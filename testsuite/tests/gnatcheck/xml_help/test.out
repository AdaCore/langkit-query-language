Without any instances
=====================

testsuite_driver: No output file generated by gnatcheck
<?xml version="1.0"?>
<gnatcheck>
   <category name="Feature Usage Rules">
      <check switch="+Rabort_statements" label="abort statement"/>
      <check switch="+Rabstract_type_declarations" label="abstract types"/>
      <check switch="+Ranonymous_access" label="anonymous access type"/>
      <check switch="+Ranonymous_subtypes" label="anonymous subtype"/>
      <check switch="+Rat_representation_clauses" label="AT representation clause"/>
      <check switch="+Rblocks" label="block statement"/>
      <spin switch="+Rcomplex_inlined_subprograms" label="complex inlined subprograms" min="0" max="99999" default="-1" separator=":"/>
      <field switch="+Rconditional_expressions" separator=":" label="conditional expression"/>
      <check switch="+Rconditional_expressions:except_assertions" label="conditional expression"/>
      <check switch="+Rcontrolled_type_declarations" label="declaration of controlled type"/>
      <check switch="+Rdeclarations_in_blocks" label="block statement with local declaration"/>
      <spin switch="+Rdeeply_nested_inlining" label="deeply nested inlining (global analysis required)" min="0" max="99999" default="-1" separator=":"/>
      <check switch="+Rdefault_parameters" label="too many parameters with default value"/>
      <check switch="+Rdiscriminated_records" label="declaration of discriminated record"/>
      <check switch="+Renumeration_representation_clauses" label="enumeration representation clause"/>
      <check switch="+Rexplicit_full_discrete_ranges" label="range could be replaced by subtype mark or 'Range"/>
      <check switch="+Rexplicit_inlining" label="subprogram marked inline"/>
      <check switch="+Rexpression_functions" label="expression function"/>
      <check switch="+Rfixed_equality_checks" label="use of equality operation for fixed values"/>
      <field switch="+Rfloat_equality_checks" separator=":" label="use of equality operation for float values"/>
      <check switch="+Rfloat_equality_checks:follow_renamings" label="use of equality operation for float values"/>
      <check switch="+Rfunction_style_procedures" label="procedure can be rewritten as function"/>
      <check switch="+Rgeneric_in_out_objects" label="generic IN OUT object"/>
      <check switch="+Rgenerics_in_subprograms" label="generic definition in subprogram body"/>
      <check switch="+Rimplicit_in_mode_parameters" label="implicit IN mode in parameter specification"/>
      <check switch="+Rimproperly_located_instantiations" label="instantiations not properly located"/>
      <check switch="+Rlibrary_level_subprograms" label="declaration of library level subprogram"/>
      <check switch="+Rmembership_tests" label="membership test"/>
      <check switch="+Rnon_qualified_aggregates" label="aggregate is not a part of a qualified expression"/>
      <check switch="+Rnumber_declarations" label="number declaration"/>
      <check switch="+Rnumeric_indexing" label="integer literal as index value"/>
      <check switch="+Rnumeric_literals" label="numeric literal"/>
      <field switch="+Rparameters_out_of_order" separator=":" label="parameter out of order"/>
      <field switch="+Rpredicate_testing" separator=":" label="expression needs subtype predicate evaluation"/>
      <check switch="+Rpredicate_testing:except_assertions" label="expression needs subtype predicate evaluation"/>
      <field switch="+Rquantified_expressions" separator=":" label="quantified expression"/>
      <check switch="+Rquantified_expressions:except_assertions" label="quantified expression"/>
      <check switch="+Rraising_predefined_exceptions" label="explicit raise of a predefined exception"/>
      <check switch="+Rrelative_delay_statements" label="relative delay statement"/>
      <check switch="+Rrenamings" label="renaming declaration"/>
      <field switch="+Rrepresentation_specifications" separator=":" label="representation specification"/>
      <check switch="+Rrepresentation_specifications:record_rep_clauses_only" label="representation specification"/>
      <check switch="+Rseparates" label="separate unit"/>
      <check switch="+Rsimple_loop_statements" label="simple loop statement"/>
      <check switch="+Rsubprogram_access" label="access to subprogram definition"/>
      <spin switch="+Rtoo_many_dependencies" label="unit has too many dependencies" min="0" max="99999" default="-1" separator=":"/>
      <field switch="+Runassigned_out_parameters" separator=":" label="OUT parameters do not get values in subprogram bodies"/>
      <check switch="+Runassigned_out_parameters:ignore_component_assignments" label="OUT parameters do not get values in subprogram bodies"/>
      <check switch="+Runconditional_exits" label="exit statement does not contain condition"/>
      <field switch="+Runconstrained_array_returns" separator=":" label="function returns unconstrained array"/>
      <check switch="+Runconstrained_array_returns:except_string" label="function returns unconstrained array"/>
      <check switch="+Runconstrained_arrays" label="unconstrained array definition"/>
      <field switch="+Ruse_clauses" separator=":" label="use clause"/>
      <check switch="+Ruse_clauses:exempt_operator_packages" label="use clause"/>
   </category>
   <category name="Metrics">
      <check switch="+Rmetrics_cyclomatic_complexity" label="cyclomatic complexity"/>
      <spin switch="+Rmetrics_essential_complexity" label="essential complexity" min="0" max="99999" default="-1" separator=":"/>
      <check switch="+Rmetrics_lsloc" label="Logical source lines"/>
   </category>
   <category name="Misc">
      <check switch="+Rkp_18614" label="possible occurrence of KP 18614"/>
      <check switch="+Rkp_18636" label="possible occurrence of KP 18636"/>
      <check switch="+Rkp_18637" label="possible occurrence of KP 18637"/>
      <check switch="+Rkp_18701" label="possible occurrence of KP 18701"/>
      <check switch="+Rkp_18718" label="possible occurrence of KP 18718"/>
      <check switch="+Rkp_18801" label="possible occurrence of KP 18801"/>
      <check switch="+Rkp_18926" label="possible occurrence of KP 18926"/>
      <check switch="+Rkp_19038" label="possible occurrence of KP 19038"/>
      <check switch="+Rkp_19134" label="possible occurrence of KP 19134"/>
      <check switch="+Rkp_19142" label="possible occurrence of KP 19142"/>
      <check switch="+Rkp_19159" label="possible occurrence of KP 19159"/>
      <check switch="+Rkp_19198" label="possible occurrence of KP 19198"/>
      <check switch="+Rkp_19237" label="possible occurrence of KP 19237"/>
      <check switch="+Rkp_19279" label="possible occurrence of KP 19279"/>
      <check switch="+Rkp_19312" label="possible occurrence of KP 19312"/>
      <check switch="+Rkp_19341" label="possible occurrence of KP 19341"/>
      <check switch="+Rkp_19423" label="possible occurrence of KP 19423"/>
      <check switch="+Rkp_19447" label="possible occurrence of KP 19447"/>
      <check switch="+Rkp_19501" label="possible occurrence of KP 19501"/>
      <check switch="+Rkp_19529" label="possible occurrence of KP 19529"/>
      <check switch="+Rkp_19625" label="possible occurrence of KP 19625"/>
      <check switch="+Rkp_19696" label="possible occurrence of KP 19696"/>
      <check switch="+Rkp_19747" label="possible occurrence of KP 19747"/>
      <check switch="+Rkp_19749" label="possible occurrence of KP 19749"/>
      <check switch="+Rkp_19753" label="possible occurrence of KP 19753"/>
      <check switch="+Rkp_19824" label="possible occurrence of KP 19824"/>
      <check switch="+Rkp_ob03_009" label="possible occurrence of KP OB03-009"/>
      <check switch="+Rkp_p226_024" label="possible occurrence of KP P226-024 - global analysis required"/>
      <check switch="+Rkp_q309_014" label="possible occurrence of KP Q309-014"/>
      <check switch="+Rkp_q609_033" label="possible occurrence of KP Q609-033 - global analysis required"/>
      <check switch="+Rkp_qc02_001" label="possible occurrence of KP QC02-001"/>
      <check switch="+Rkp_r316_001" label="possible occurrence of KP R316-001"/>
      <check switch="+Rkp_r410_028" label="possible occurrence of KP R410-028"/>
      <check switch="+Rkp_r511_017" label="possible occurrence of KP R511-017"/>
      <check switch="+Rkp_r517_023" label="possible occurrence of KP R517-023"/>
      <check switch="+Rkp_s114_015" label="possible occurrence of KP S124-035"/>
      <check switch="+Rkp_s124_035" label="possible occurrence of KP S124-035"/>
      <check switch="+Rkp_s521_014" label="possible occurrence of KP S521-014"/>
      <check switch="+Rkp_s621_051" label="possible occurrence of KP S621-051"/>
      <check switch="+Rkp_s722_023" label="possible occurrence of KP S722-023"/>
      <check switch="+Rkp_s724_042" label="possible occurrence of KP S724-042"/>
      <check switch="+Rkp_s814_034" label="possible occurrence of KP S814-034"/>
      <check switch="+Rkp_t420_033" label="possible occurrence of KP T420-033"/>
      <check switch="+Rkp_t528_043" label="possible occurrence of KP T528-043"/>
      <check switch="+Rkp_t602_028" label="possible occurrence of KP T602-028"/>
      <check switch="+Rkp_t708_064" label="possible occurrence of KP T708-064"/>
      <check switch="+Rkp_t805_037" label="possible occurrence of KP T805-037"/>
      <check switch="+Rkp_ta10_002" label="possible occurrence of KP TA10-002"/>
      <check switch="+Rkp_ta15_022" label="possible occurrence of KP TA15-022"/>
      <check switch="+Rkp_ta30_032" label="possible occurrence of KP TA30-032"/>
      <check switch="+Rkp_tb09_038" label="possible occurrence of KP TB09-038"/>
      <check switch="+Rkp_tb23_035" label="possible occurrence of KP TB23-035"/>
      <check switch="+Rkp_tb25_028" label="possible occurrence of KP TB25-028"/>
      <check switch="+Rkp_tc01_050" label="possible occurrence of KP TC01-050"/>
      <check switch="+Rkp_u126_006" label="possible occurrence of KP U126-006"/>
      <check switch="+Rkp_u225_018" label="possible occurrence of KP U225-018"/>
      <check switch="+Rkp_u310_012" label="possible occurrence of KP U310-012"/>
      <check switch="+Rkp_u316_028" label="possible occurrence of KP U316-028"/>
      <check switch="+Rkp_u629_002" label="possible occurrence of KP U629-002"/>
      <check switch="+Rkp_u630_012" label="possible occurrence of KP U630-012"/>
      <check switch="+Rkp_u701_015" label="possible occurrence of KP U701-015"/>
      <check switch="+Rkp_u702_038" label="possible occurrence of KP U702-038"/>
      <check switch="+Rkp_u727_033" label="possible occurrence of KP U727-033"/>
      <check switch="+Rkp_u803_030" label="possible occurrence of KP U803-030"/>
      <check switch="+Rkp_u812_034" label="possible occurrence of KP U812-034"/>
      <check switch="+Rkp_u923_018" label="possible occurrence of KP U923-018"/>
      <check switch="+Rkp_u928_018" label="possible occurrence of KP U928-018"/>
      <spin switch="+Rkp_ua12_036" label="possible occurrence of KP UA12-036" min="0" max="99999" default="-1" separator=":"/>
      <check switch="+Rkp_ub15_001" label="possible occurrence of KP UB15-001"/>
      <check switch="+Rkp_ub22_022" label="possible occurrence of KP UB22-022"/>
      <check switch="+Rkp_uc22_009" label="possible occurrence of KP UC22-009"/>
      <check switch="+Rkp_v114_047" label="possible occurrence of KP V114-047"/>
      <check switch="+Rkp_v120_015" label="possible occurrence of KP V120-015"/>
      <check switch="+Rkp_v127_049" label="possible occurrence of KP V127-049"/>
      <check switch="+Rkp_v206_001" label="possible occurrence of KP V206-001"/>
      <check switch="+Rkp_v214_016" label="possible occurrence of KP V214-016"/>
      <check switch="+Rkp_v216_031" label="possible occurrence of KP V216-031 - global analysis required"/>
      <check switch="+Rkp_v302_021" label="possible occurrence of KP V302-021"/>
      <check switch="+Rkp_v329_046" label="possible occurrence of KP V329-046"/>
      <check switch="+Rkp_v404_040" label="possible occurrence of KP V404-040"/>
      <check switch="+Rkp_v407_011" label="possible occurrence of KP V407-011"/>
      <check switch="+Rkp_v505_020" label="possible occurrence of KP V505-020"/>
      <check switch="+Rkp_v616_018" label="possible occurrence of KP V616-018"/>
      <check switch="+Rkp_v624_025" label="possible occurrence of KP V624-025"/>
      <check switch="+Rkp_v708_029" label="possible occurrence of KP V708-029"/>
      <check switch="+Rkp_v712_039" label="possible occurrence of KP V712-039"/>
      <check switch="+Rkp_v719_024" label="possible occurrence of KP V719-024"/>
      <check switch="+Rkp_v720_003" label="possible occurrence of KP V720-003 - global analysis required"/>
      <check switch="+Rkp_v907_005" label="possible occurrence of KP V907-005"/>
      <check switch="+Rkp_v924_001" label="possible occurrence of KP V924-001"/>
      <check switch="+Rkp_va03_035" label="possible occurrence of KP VA03-035"/>
      <check switch="+Rkp_va06_034" label="possible occurrence of KP VA06-034"/>
      <check switch="+Rkp_va18_003" label="possible occurrence of KP VA18-003"/>
      <check switch="+Rkp_vb20_002" label="possible occurrence of KP VB20-002"/>
      <check switch="+Rkp_vb24_008" label="possible occurrence of KP VB24-008"/>
      <check switch="+Rkp_w330_020" label="possible occurrence of KP W330-020"/>
   </category>
   <category name="SPARK">
      <field switch="+Rannotated_comments" separator=":" label="use of comment annotations"/>
      <check switch="+Rboolean_relational_operators" label="comparison of Boolean values"/>
      <check switch="+Rexpanded_loop_exit_names" label="expanded loop name in exit statement"/>
      <check switch="+Rnon_spark_attributes" label="attribute is not from the SPARK subset"/>
      <check switch="+Rnon_tagged_derived_types" label="derived type that is not a type extension"/>
      <check switch="+Router_loop_exits" label="exit out of the nesting loop"/>
      <check switch="+Roverloaded_operators" label="overloading of an operator symbol"/>
      <check switch="+Rslices" label="slice"/>
      <check switch="+Runiversal_ranges" label="range with universal integer bounds"/>
   </category>
   <category name="Style-Related Rules">
      <category name="Object Orientation">
         <check switch="+Rconstructors" label="declaration of constructor function"/>
         <spin switch="+Rdeep_inheritance_hierarchies" label="derivation tree is too deep" min="0" max="99999" default="-1" separator=":"/>
         <field switch="+Rdirect_calls_to_primitives" separator=":" label="non-dispatching call to primitive operation"/>
         <check switch="+Rdirect_calls_to_primitives:except_constructors" label="non-dispatching call to primitive operation"/>
         <check switch="+Rdownward_view_conversions" label="downward view conversion"/>
         <check switch="+Rno_inherited_classwide_pre" label="overridden operation has no Pre'Class"/>
         <check switch="+Rspecific_parent_type_invariant" label="parent type has specific Type_Invariant aspect"/>
         <check switch="+Rspecific_pre_post" label="definition of non class-wide aspect"/>
         <check switch="+Rspecific_type_invariants" label="definition of non class-wide Type_Invariant aspect"/>
         <spin switch="+Rtoo_many_parents" label="type has too many parents" min="0" max="99999" default="-1" separator=":"/>
         <spin switch="+Rtoo_many_primitives" label="tagged type has too many primitives" min="0" max="99999" default="-1" separator=":"/>
         <field switch="+Rvisible_components" separator=":" label="type defines publicly accessible components"/>
         <check switch="+Rvisible_components:tagged_only" label="type defines publicly accessible components"/>
      </category>
      <category name="Portability">
         <check switch="+Rbit_records_without_layout_definition" label="bit record without layout definition"/>
         <check switch="+Rforbidden_aspects:ALL" label="detect all aspects except explicitly disabled"/>
         <check switch="+Rforbidden_aspects:GNAT" label="detect all GNAT aspects except explicitly disabled"/>
         <field switch="+Rforbidden_aspects" label="detect specified aspects (use ',' as separator)" separator=":"/>
         <field switch="-Rforbidden_aspects" label="do not detect specified aspects (use ',' as separator)" separator=":"/>
         <check switch="+Rforbidden_attributes:ALL" label="detect all attributes except explicitly disabled"/>
         <check switch="+Rforbidden_attributes:GNAT" label="detect all GNAT attributes except explicitly disabled"/>
         <field switch="+Rforbidden_attributes" label="detect specified attributes (use ',' as separator)" separator=":"/>
         <field switch="-Rforbidden_attributes" label="do not detect specified attributes (use ',' as separator)" separator=":"/>
         <check switch="+Rforbidden_pragmas:ALL" label="detect all pragmas except explicitly disabled"/>
         <check switch="+Rforbidden_pragmas:GNAT" label="detect all GNAT pragmas except explicitly disabled"/>
         <field switch="+Rforbidden_pragmas" label="detect specified pragmas (use ',' as separator)" separator=":"/>
         <field switch="-Rforbidden_pragmas" label="do not detect specified pragmas (use ',' as separator)" separator=":"/>
         <check switch="+Rimplicit_small_for_fixed_point_types" label="fixed point type declaration with no 'Small clause"/>
         <check switch="+Rincomplete_representation_specifications" label="record type with incomplete representation specification"/>
         <check switch="+Rmembership_for_validity" label="membership test instead of 'Valid"/>
         <check switch="+Rno_explicit_real_range" label="real type with no range definition"/>
         <check switch="+Rno_scalar_storage_order_specified" label="Scalar_Storage_Order is not specified"/>
         <check switch="+Rpredefined_numeric_types" label="explicit reference to predefined numeric subtype"/>
         <check switch="+Rprintable_ascii" label="non-printable characters"/>
         <check switch="+Rseparate_numeric_error_handlers" label="Constraint_Error is handled separately from Numeric_Error"/>
      </category>
      <category name="Program Structure">
         <spin switch="+Rdeep_library_hierarchy" label="unit has too many ancestors" min="0" max="99999" default="-1" separator=":"/>
         <spin switch="+Rdeeply_nested_generics" label="deeply nested generic" min="0" max="99999" default="-1" separator=":"/>
         <spin switch="+Rdeeply_nested_instantiations" label="deeply nested instantiation" min="0" max="99999" default="-1" separator=":"/>
         <check switch="+Rlocal_packages" label="declaration of local package"/>
         <spin switch="+Rmaximum_expression_complexity" label="maximum complexity of an expression" min="0" max="99999" default="-1" separator=":"/>
         <spin switch="+Rmaximum_lines" label="maximum number of lines in a file" min="0" max="99999" default="-1" separator=":"/>
         <spin switch="+Rmaximum_subprogram_lines" label="maximum number of lines in a subprogram" min="0" max="99999" default="-1" separator=":"/>
         <check switch="+Rnon_visible_exceptions" label="potential propagations of non-visible exceptions"/>
         <check switch="+Rone_tagged_type_per_package" label="more than one tagged type declared in package spec"/>
         <check switch="+Routside_references_from_subprograms" label="outside references from subprogram"/>
         <check switch="+Rraising_external_exceptions" label="raised exception is not declared in visible part of enclosing library package"/>
         <field switch="+Rsame_instantiations" separator=":" label="duplicate generic package instantiations (global analysis required)"/>
         <check switch="+Rsame_instantiations:library_level_only" label="duplicate generic package instantiations (global analysis required)"/>
         <spin switch="+Rtoo_many_generic_dependencies" label="too many generic dependencies" min="0" max="99999" default="-1" separator=":"/>
      </category>
      <category name="Programming Practice">
         <check switch="+Raccess_to_local_objects" label="access attribute for local objects"/>
         <field switch="+Ractual_parameters" separator=":" label="actual parameter mismatch"/>
         <check switch="+Rada05_formal_packages" label="Ada 2005 formal package declaration"/>
         <check switch="+Rada_2022_in_ghost_code" label="Ada 2022 construct forbidden outside of ghost code"/>
         <check switch="+Raddress_attribute_for_non_volatile_objects" label="address attribute for non-volatile object"/>
         <check switch="+Raddress_specifications_for_initialized_objects" label="address specification for initialized object"/>
         <check switch="+Raddress_specifications_for_local_objects" label="address specification for local object"/>
         <check switch="+Ranonymous_arrays" label="anonymous array type"/>
         <field switch="+Rbinary_case_statements" separator=":" label="CASE statement can be replaced with IF statement"/>
         <check switch="+Rbinary_case_statements:except_enums" label="CASE statement can be replaced with IF statement"/>
         <check switch="+Rboolean_negations" label="negation of boolean operator"/>
         <field switch="+Rcalls_in_exception_handlers" separator=":" label="exception handler with forbidden calls"/>
         <field switch="+Rcalls_outside_elaboration" separator=":" label="call performed outside elaboration"/>
         <check switch="+Rconcurrent_interfaces" label="concurrent interface"/>
         <check switch="+Rconstant_overlays" label="non-constant object overlays a constant"/>
         <check switch="+Rdefault_values_for_record_components" label="default value for record component"/>
         <check switch="+Rderiving_from_predefined_type" label="deriving from predefined type"/>
         <field switch="+Rdirect_equalities" separator=":" label="direct (in)equality"/>
         <check switch="+Rduplicate_branches" label="duplicate branch"/>
         <check switch="+Renumeration_ranges_in_case_statements" label="enumeration range as a choice in a case statement"/>
         <field switch="+Rexception_propagation_from_callbacks" separator=":" label="callback may propagate exceptions (global analysis required)"/>
         <check switch="+Rexception_propagation_from_export" label="exception may propagate out of exported subprogram"/>
         <check switch="+Rexception_propagation_from_tasks" label="exceptions may propagate out of task body"/>
         <check switch="+Rexceptions_as_control_flow" label="this exception will be handled in the same body"/>
         <field switch="+Rexit_statements_with_no_loop_name" separator=":" label="exit statement with no loop name"/>
         <check switch="+Rexit_statements_with_no_loop_name:nested_only" label="exit statement with no loop name"/>
         <check switch="+Rexits_from_conditional_loops" label="exit from conditional loop"/>
         <check switch="+Rfinal_package" label="child package cannot have a final parent package"/>
         <check switch="+Rfunction_out_parameters" label="function has output parameter(s)"/>
         <field switch="+Rglobal_variables" separator=":" label="declaration of global variable"/>
         <check switch="+Rglobal_variables:only_public" label="declaration of global variable"/>
         <field switch="+Rgoto_statements" separator=":" label="goto statement"/>
         <check switch="+Rgoto_statements:only_unconditional" label="goto statement"/>
         <check switch="+Rimproper_returns" label="extra return statement"/>
         <check switch="+Rinteger_types_as_enum" label="integer type may be replaced by an enumeration (global analysis required)"/>
         <field switch="+Rlocal_instantiations" separator=":" label="local instantiation"/>
         <field switch="+Rlocal_use_clauses" separator=":" label="local use clause"/>
         <check switch="+Rlocal_use_clauses:except_use_type_clauses" label="local use clause"/>
         <spin switch="+Rmaximum_out_parameters" label="maximum number of subprogram OUT parameters" min="0" max="99999" default="-1" separator=":"/>
         <spin switch="+Rmaximum_parameters" label="maximum number of subprogram parameters" min="0" max="99999" default="-1" separator=":"/>
         <check switch="+Rmisplaced_representation_items" label="misplaced representation item"/>
         <check switch="+Rnested_paths" label="nested path may be moved outside if statement"/>
         <check switch="+Rnested_subprograms" label="subprogram declared in executable body"/>
         <spin switch="+Rno_closing_names" label="no closing name" min="0" max="99999" default="-1" separator=":"/>
         <check switch="+Rno_others_in_exception_handlers" label="no OTHERS choice in exception handlers"/>
         <check switch="+Rnon_component_in_barriers" label="barrier references non component variable"/>
         <check switch="+Rnon_constant_overlays" label="constant object overlays a variable object"/>
         <field switch="+Rnon_short_circuit_operators" separator=":" label="use of predefined AND and OR for boolean types"/>
         <check switch="+Rnon_short_circuit_operators:except_assertions" label="use of predefined AND and OR for boolean types"/>
         <check switch="+Rnonoverlay_address_specifications" label="nonoverlay address specification"/>
         <check switch="+Rnot_imported_overlays" label="not imported overlay"/>
         <field switch="+Rnull_paths" separator=":" label="null path"/>
         <check switch="+Rnull_paths:except_enums" label="null path"/>
         <check switch="+Robjects_of_anonymous_types" label="object of anonymous type"/>
         <field switch="+Roperator_renamings" separator=":" label="renaming of an operator"/>
         <check switch="+Roperator_renamings:name_mismatch" label="renaming of an operator"/>
         <check switch="+Rothers_in_aggregates" label="OTHERS choice in aggregate"/>
         <check switch="+Rothers_in_case_statements" label="OTHERS choice in case statement"/>
         <check switch="+Rothers_in_exception_handlers" label="OTHERS choice in exception handler"/>
         <check switch="+Routbound_protected_assignments" label="assignment from protected body to outside object"/>
         <check switch="+Roverly_nested_control_structures" label="nesting level of control structures too deep"/>
         <spin switch="+Roverly_nested_scopes" label="nesting level of scopes too deep" min="0" max="99999" default="-1" separator=":"/>
         <field switch="+Rparameters_aliasing" separator=":" label="parameter aliasing"/>
         <check switch="+Rparameters_aliasing:in_parameters" label="parameter aliasing"/>
         <check switch="+Rpos_on_enumeration_types" label="prefix of 'POS attribute has enumeration type"/>
         <check switch="+Rpositional_actuals_for_defaulted_generic_parameters" label="use named notation when passing actual to defaulted generic parameter"/>
         <check switch="+Rpositional_actuals_for_defaulted_parameters" label="use named notation when passing actual to defaulted parameter"/>
         <check switch="+Rpositional_components" label="aggregate with a positional component association"/>
         <check switch="+Rpositional_generic_parameters" label="positional generic association"/>
         <field switch="+Rpositional_parameters" separator=":" label="positional parameter association"/>
         <check switch="+Rpositional_parameters:all" label="positional parameter association"/>
         <field switch="+Rpotential_parameters_aliasing" separator=":" label="potential parameter aliasing"/>
         <check switch="+Rpotential_parameters_aliasing:in_parameters" label="potential parameter aliasing"/>
         <check switch="+Rrecursive_subprograms" label="recursive subprogram (global analysis required)"/>
         <check switch="+Rredundant_boolean_expressions" label="redundant boolean expression"/>
         <check switch="+Rredundant_null_statements" label="redundant null statement"/>
         <check switch="+Rsame_logic" label="same logic"/>
         <check switch="+Rsame_operands" label="same operands"/>
         <check switch="+Rsame_tests" label="same test"/>
         <field switch="+Rside_effect_parameters" separator=":" label="call with side effects"/>
         <field switch="+Rsilent_exception_handlers" separator=":" label="silent exception handler"/>
         <check switch="+Rsingle_value_enumeration_types" label="enumeration type definition with a single enumeration literal"/>
         <check switch="+Rsize_attribute_for_types" label="Size attribute for type"/>
         <check switch="+Rspark_procedures_without_globals" label="SPARK procedure doesn't have a Global aspect"/>
         <check switch="+Rsuspicious_equalities" label="suspicious equality"/>
         <check switch="+Rtrivial_exception_handlers" label="trivial exception handler"/>
         <field switch="+Runavailable_body_calls" separator=":" label="call to unavailable body (global analysis required)"/>
         <check switch="+Runavailable_body_calls:indirect_calls" label="call to unavailable body (global analysis required)"/>
         <check switch="+Runchecked_address_conversions" label="address-to-access conversion"/>
         <check switch="+Runchecked_conversions_as_actuals" label="instance of Unchecked_Conversion as actual parameter"/>
         <check switch="+Runinitialized_global_variables" label="uninitialized global variable"/>
         <check switch="+Runnamed_blocks_and_loops" label="compound statements naming"/>
         <check switch="+Runnamed_exits" label="unnamed exit statement"/>
         <check switch="+Ruse_array_slices" label="FOR loop may be replaced by an array slice"/>
         <check switch="+Ruse_case_statements" label="IF statement may be replaced by a CASE statement"/>
         <check switch="+Ruse_for_loops" label="WHILE loop may be replaced by a FOR loop"/>
         <check switch="+Ruse_for_of_loops" label="FOR loop may be replaced by a FOR OF loop"/>
         <check switch="+Ruse_if_expressions" label="IF statement may be replaced by an IF expression"/>
         <field switch="+Ruse_memberships" separator=":" label="expression may be replaced by a membership test"/>
         <check switch="+Ruse_memberships:short_circuit" label="expression may be replaced by a membership test"/>
         <check switch="+Ruse_package_clauses" label="use clause for package"/>
         <check switch="+Ruse_ranges" label="simplifiable 'First .. 'Last and 'Range"/>
         <check switch="+Ruse_record_aggregates" label="component assignments may be replaced by an aggregate"/>
         <check switch="+Ruse_simple_loops" label="WHILE loop may be replaced by a simple LOOP"/>
         <check switch="+Ruse_while_loops" label="simple LOOP may be replaced by a WHILE loop"/>
         <check switch="+Rvariable_scoping" label="variables that can be moved to an inner block"/>
      </category>
      <category name="Readability">
         <check switch="+Rend_of_line_comments" label="end of line comments"/>
         <field switch="+Rheaders" separator=":" label="compilation unit does not start with header"/>
         <combo switch="+RIdentifier_Casing:Type" label="type name casing" separator="=">
            <combo-entry value="upper" />
            <combo-entry value="lower" />
            <combo-entry value="mixed" />
         </combo>
         <combo switch="+RIdentifier_Casing:Enum" label="enumeration literal casing" separator="=">
            <combo-entry value="upper" />
            <combo-entry value="lower" />
            <combo-entry value="mixed" />
         </combo>
         <combo switch="+RIdentifier_Casing:Constant" label="constant name casing" separator="=">
            <combo-entry value="upper" />
            <combo-entry value="lower" />
            <combo-entry value="mixed" />
         </combo>
         <combo switch="+RIdentifier_Casing:Exception" label="exception name casing" separator="=">
            <combo-entry value="upper" />
            <combo-entry value="lower" />
            <combo-entry value="mixed" />
         </combo>
         <combo switch="+RIdentifier_Casing:Others" label="other name casing" separator="=">
            <combo-entry value="upper" />
            <combo-entry value="lower" />
            <combo-entry value="mixed" />
         </combo>
         <field switch="+Ridentifier_casing:Exclude" label="dictionary of casing exceptions" separator="="/>
         <field switch="+Ridentifier_prefixes:Type" label="prefix for type names (empty string disables check)" separator="=" switch-off="-Ridentifier_prefixes:Type"/>
         <field switch="+Ridentifier_prefixes:Concurrent" label="prefix for task and protected type names (empty string disables check)" separator="=" switch-off="-Ridentifier_prefixes:Concurrent"/>
         <field switch="+Ridentifier_prefixes:Access" label="prefix for access type names (empty string disables check)" separator="=" switch-off="-Ridentifier_prefixes:Access"/>
         <field switch="+Ridentifier_prefixes:Class_Access" label="prefix for class access type names (empty string disables check)" separator="=" switch-off="-Ridentifier_prefixes:Class_Access"/>
         <field switch="+Ridentifier_prefixes:Subprogram_Access" label="prefix for access-to-subprogram type names (empty string disables check)" separator="=" switch-off="-Ridentifier_prefixes:Subprogram_Access"/>
         <field switch="+Ridentifier_prefixes:Derived" label="prefix for derived type names (empty string disables check)" separator="=" switch-off="-Ridentifier_prefixes:Derived"/>
         <field switch="+Ridentifier_prefixes:Constant" label="prefix for constant names (empty string disables check)" separator="=" switch-off="-Ridentifier_prefixes:Constant"/>
         <field switch="+Ridentifier_prefixes:Exception" label="prefix for exception names (empty string disables check)" separator="=" switch-off="-Ridentifier_prefixes:Exception"/>
         <field switch="+Ridentifier_prefixes:Enum" label="prefix for enumeration literals (empty string disables check)" separator="=" switch-off="-Ridentifier_prefixes:Enum"/>
         <check switch="+Ridentifier_prefixes:Exclusive" label="strong check mode"/>
         <check switch="+Ridentifier_suffixes:Default" label="identifiers use standard suffixes"/>
         <field switch="+Ridentifier_suffixes:Type_Suffix" label="suffix for type names (empty string disables check)" separator="=" switch-off="-Ridentifier_suffixes:Type_Suffix"/>
         <field switch="+Ridentifier_suffixes:Access_Suffix" label="suffix for access type names (empty string disables check)" separator="=" switch-off="-Ridentifier_suffixes:Access_Suffix"/>
         <field switch="+Ridentifier_suffixes:Constant_Suffix" label="suffix for constant names (empty string disables check)" separator="=" switch-off="-Ridentifier_suffixes:Constant_Suffix"/>
         <field switch="+Ridentifier_suffixes:Renaming_Suffix" label="suffix for package renaming names (empty string disables check)" separator="=" switch-off="-Ridentifier_suffixes:Renaming_Suffix"/>
         <field switch="+Ridentifier_suffixes:Access_Obj_Suffix" label="suffix for access object names (empty string disables check)" separator="=" switch-off="-Ridentifier_suffixes:Access_Obj_Suffix"/>
         <field switch="+Ridentifier_suffixes:Interrupt_Suffix" label="suffix for interrupt handler names (empty string disables check)" separator="=" switch-off="-Ridentifier_suffixes:Interrupt_Suffix"/>
         <default-value-dependency master-switch="+Ridentifier_suffixes:Default" slave-switch="+Ridentifier_suffixes:Type_Suffix=_T"/>
         <default-value-dependency master-switch="+Ridentifier_suffixes:Default" slave-switch="+Ridentifier_suffixes:Access_Suffix=_A"/>
         <default-value-dependency master-switch="+Ridentifier_suffixes:Default" slave-switch="+Ridentifier_suffixes:Constant_Suffix=_C"/>
         <default-value-dependency master-switch="+Ridentifier_suffixes:Default" slave-switch="+Ridentifier_suffixes:Renaming_Suffix=_R"/>
         <field switch="+Rlowercase_keywords" separator=":" label="lowercase_keywords"/>
         <spin switch="+Rmax_identifier_length" label="maximal identifier length" min="0" max="99999" default="-1" separator=":"/>
         <spin switch="+Rmin_identifier_length" label="identifier too short" min="0" max="99999" default="-1" separator=":"/>
         <check switch="+Rmisnamed_controlling_parameters" label="first parameter should have name 'This' and proper type"/>
         <field switch="+Rname_clashes" separator=":" label="use of forbidden identifier"/>
         <field switch="+Rno_dependence" separator=":" label="Forbidden dependency"/>
         <check switch="+Rnumeric_format" label="incorrect format for numeric literal"/>
         <check switch="+Robject_declarations_out_of_order" label="object declarations should precede program unit declarations"/>
         <check switch="+Rone_construct_per_line" label="more than one construct on the same line"/>
         <check switch="+Roverriding_marks" label="Missing overriding mark"/>
         <check switch="+Rprofile_discrepancies" label="parameter profile discrepancies"/>
         <check switch="+Runcommented_begin" label="BEGIN not marked with entity name comment"/>
         <check switch="+Runcommented_begin_in_package_bodies" label="BEGIN in package bodies not marked with package name comment"/>
         <spin switch="+Runcommented_end_record" label="END RECORD not marked with type name comment" min="0" max="99999" default="-1" separator=":"/>
      </category>
      <category name="Tasking">
         <check switch="+Rmultiple_entries_in_protected_definitions" label="more than one entry in protected definition"/>
         <check switch="+Rvolatile_objects_without_address_clauses" label="volatile object with no address clause"/>
      </category>
   </category>
   <category name="Restriction rules">
      <field switch="+RRestrictions:No_Dependence" label="No_Dependence, specify one unit to check" separator="=&gt;"/>
      <check switch="+RRestrictions:Simple_Barriers" label="Simple_Barriers"/>
      <check switch="+RRestrictions:Pure_Barriers" label="Pure_Barriers"/>
      <check switch="+RRestrictions:No_Abort_Statements" label="No_Abort_Statements"/>
      <check switch="+RRestrictions:No_Access_Parameter_Allocators" label="No_Access_Parameter_Allocators"/>
      <check switch="+RRestrictions:No_Access_Subprograms" label="No_Access_Subprograms"/>
      <check switch="+RRestrictions:No_Allocators" label="No_Allocators"/>
      <check switch="+RRestrictions:No_Anonymous_Allocators" label="No_Anonymous_Allocators"/>
      <check switch="+RRestrictions:No_Asynchronous_Control" label="No_Asynchronous_Control"/>
      <check switch="+RRestrictions:No_Calendar" label="No_Calendar"/>
      <check switch="+RRestrictions:No_Coextensions" label="No_Coextensions"/>
      <check switch="+RRestrictions:No_Default_Stream_Attributes" label="No_Default_Stream_Attributes"/>
      <check switch="+RRestrictions:No_Delay" label="No_Delay"/>
      <check switch="+RRestrictions:No_Direct_Boolean_Operators" label="No_Direct_Boolean_Operators"/>
      <check switch="+RRestrictions:No_Dispatch" label="No_Dispatch"/>
      <check switch="+RRestrictions:No_Dispatching_Calls" label="No_Dispatching_Calls"/>
      <check switch="+RRestrictions:No_Dynamic_Accessibility_Checks" label="No_Dynamic_Accessibility_Checks"/>
      <check switch="+RRestrictions:No_Dynamic_Attachment" label="No_Dynamic_Attachment"/>
      <check switch="+RRestrictions:No_Dynamic_Cpu_Assignment" label="No_Dynamic_Cpu_Assignment"/>
      <check switch="+RRestrictions:No_Dynamic_Priorities" label="No_Dynamic_Priorities"/>
      <check switch="+RRestrictions:No_Enumeration_Maps" label="No_Enumeration_Maps"/>
      <check switch="+RRestrictions:No_Entry_Calls_In_Elaboration_Code" label="No_Entry_Calls_In_Elaboration_Code"/>
      <check switch="+RRestrictions:No_Entry_Queue" label="No_Entry_Queue"/>
      <check switch="+RRestrictions:No_Exception_Handlers" label="No_Exception_Handlers"/>
      <check switch="+RRestrictions:No_Exception_Propagation" label="No_Exception_Propagation"/>
      <check switch="+RRestrictions:No_Exception_Registration" label="No_Exception_Registration"/>
      <check switch="+RRestrictions:No_Exceptions" label="No_Exceptions"/>
      <check switch="+RRestrictions:No_Finalization" label="No_Finalization"/>
      <check switch="+RRestrictions:No_Fixed_Io" label="No_Fixed_Io"/>
      <check switch="+RRestrictions:No_Fixed_Point" label="No_Fixed_Point"/>
      <check switch="+RRestrictions:No_Floating_Point" label="No_Floating_Point"/>
      <check switch="+RRestrictions:No_Io" label="No_Io"/>
      <check switch="+RRestrictions:No_Implicit_Conditionals" label="No_Implicit_Conditionals"/>
      <check switch="+RRestrictions:No_Implicit_Dynamic_Code" label="No_Implicit_Dynamic_Code"/>
      <check switch="+RRestrictions:No_Implicit_Heap_Allocations" label="No_Implicit_Heap_Allocations"/>
      <check switch="+RRestrictions:No_Implicit_Task_Allocations" label="No_Implicit_Task_Allocations"/>
      <check switch="+RRestrictions:No_Implicit_Protected_Object_Allocations" label="No_Implicit_Protected_Object_Allocations"/>
      <check switch="+RRestrictions:No_Initialize_Scalars" label="No_Initialize_Scalars"/>
      <check switch="+RRestrictions:No_Local_Tagged_Types" label="No_Local_Tagged_Types"/>
      <check switch="+RRestrictions:No_Local_Allocators" label="No_Local_Allocators"/>
      <check switch="+RRestrictions:No_Local_Timing_Events" label="No_Local_Timing_Events"/>
      <check switch="+RRestrictions:No_Local_Protected_Objects" label="No_Local_Protected_Objects"/>
      <check switch="+RRestrictions:No_Long_Long_Integers" label="No_Long_Long_Integers"/>
      <check switch="+RRestrictions:No_Multiple_Elaboration" label="No_Multiple_Elaboration"/>
      <check switch="+RRestrictions:No_Nested_Finalization" label="No_Nested_Finalization"/>
      <check switch="+RRestrictions:No_Protected_Type_Allocators" label="No_Protected_Type_Allocators"/>
      <check switch="+RRestrictions:No_Protected_Types" label="No_Protected_Types"/>
      <check switch="+RRestrictions:No_Recursion" label="No_Recursion"/>
      <check switch="+RRestrictions:No_Reentrancy" label="No_Reentrancy"/>
      <check switch="+RRestrictions:No_Relative_Delay" label="No_Relative_Delay"/>
      <check switch="+RRestrictions:No_Requeue_Statements" label="No_Requeue_Statements"/>
      <check switch="+RRestrictions:No_Secondary_Stack" label="No_Secondary_Stack"/>
      <check switch="+RRestrictions:No_Select_Statements" label="No_Select_Statements"/>
      <check switch="+RRestrictions:No_Specific_Termination_Handlers" label="No_Specific_Termination_Handlers"/>
      <check switch="+RRestrictions:No_Standard_Allocators_After_Elaboration" label="No_Standard_Allocators_After_Elaboration"/>
      <check switch="+RRestrictions:No_Standard_Storage_Pools" label="No_Standard_Storage_Pools"/>
      <check switch="+RRestrictions:No_Stream_Optimizations" label="No_Stream_Optimizations"/>
      <check switch="+RRestrictions:No_Streams" label="No_Streams"/>
      <check switch="+RRestrictions:No_Tagged_Type_Registration" label="No_Tagged_Type_Registration"/>
      <check switch="+RRestrictions:No_Task_Allocators" label="No_Task_Allocators"/>
      <check switch="+RRestrictions:No_Task_Attributes_Package" label="No_Task_Attributes_Package"/>
      <check switch="+RRestrictions:No_Task_At_Interrupt_Priority" label="No_Task_At_Interrupt_Priority"/>
      <check switch="+RRestrictions:No_Task_Hierarchy" label="No_Task_Hierarchy"/>
      <check switch="+RRestrictions:No_Task_Hierarchy_Implicit" label="No_Task_Hierarchy_Implicit"/>
      <check switch="+RRestrictions:No_Task_Termination" label="No_Task_Termination"/>
      <check switch="+RRestrictions:No_Tasks_Unassigned_To_Cpu" label="No_Tasks_Unassigned_To_Cpu"/>
      <check switch="+RRestrictions:No_Tasking" label="No_Tasking"/>
      <check switch="+RRestrictions:No_Terminate_Alternatives" label="No_Terminate_Alternatives"/>
      <check switch="+RRestrictions:No_Unchecked_Access" label="No_Unchecked_Access"/>
      <check switch="+RRestrictions:No_Unchecked_Conversion" label="No_Unchecked_Conversion"/>
      <check switch="+RRestrictions:No_Unchecked_Deallocation" label="No_Unchecked_Deallocation"/>
      <check switch="+RRestrictions:Static_Priorities" label="Static_Priorities"/>
      <check switch="+RRestrictions:Static_Storage_Size" label="Static_Storage_Size"/>
      <check switch="+RRestrictions:No_Default_Initialization" label="No_Default_Initialization"/>
      <check switch="+RRestrictions:Immediate_Reclamation" label="Immediate_Reclamation"/>
      <check switch="+RRestrictions:No_Dynamic_Sized_Objects" label="No_Dynamic_Sized_Objects"/>
      <check switch="+RRestrictions:No_Implementation_Aspect_Specifications" label="No_Implementation_Aspect_Specifications"/>
      <check switch="+RRestrictions:No_Implementation_Attributes" label="No_Implementation_Attributes"/>
      <check switch="+RRestrictions:No_Implementation_Identifiers" label="No_Implementation_Identifiers"/>
      <check switch="+RRestrictions:No_Implementation_Pragmas" label="No_Implementation_Pragmas"/>
      <check switch="+RRestrictions:No_Implementation_Restrictions" label="No_Implementation_Restrictions"/>
      <check switch="+RRestrictions:No_Implementation_Units" label="No_Implementation_Units"/>
      <check switch="+RRestrictions:No_Implicit_Aliasing" label="No_Implicit_Aliasing"/>
      <check switch="+RRestrictions:No_Implicit_Loops" label="No_Implicit_Loops"/>
      <check switch="+RRestrictions:No_Elaboration_Code" label="No_Elaboration_Code"/>
      <check switch="+RRestrictions:No_Obsolescent_Features" label="No_Obsolescent_Features"/>
      <check switch="+RRestrictions:No_Unrecognized_Aspects" label="No_Unrecognized_Aspects"/>
      <check switch="+RRestrictions:No_Unrecognized_Pragmas" label="No_Unrecognized_Pragmas"/>
      <check switch="+RRestrictions:No_Wide_Characters" label="No_Wide_Characters"/>
      <check switch="+RRestrictions:Static_Dispatch_Tables" label="Static_Dispatch_Tables"/>
      <check switch="+RRestrictions:Spark_05" label="Spark_05"/>
      <field switch="+RRestrictions:No_Specification_Of_Aspect" label="No_Specification_Of_Aspect, specify one feature to check" separator="=&gt;"/>
      <field switch="+RRestrictions:No_Use_Of_Attribute" label="No_Use_Of_Attribute, specify one feature to check" separator="=&gt;"/>
      <field switch="+RRestrictions:No_Use_Of_Pragma" label="No_Use_Of_Pragma, specify one feature to check" separator="=&gt;"/>
      <spin switch="+RRestrictions:Max_Protected_Entries" label="Max_Protected_Entries" min="1" max="99999" default="0" separator="=&gt;"/>
      <spin switch="+RRestrictions:Max_Select_Alternatives" label="Max_Select_Alternatives" min="1" max="99999" default="0" separator="=&gt;"/>
      <spin switch="+RRestrictions:Max_Task_Entries" label="Max_Task_Entries" min="1" max="99999" default="0" separator="=&gt;"/>
      <spin switch="+RRestrictions:Max_Tasks" label="Max_Tasks" min="1" max="99999" default="0" separator="=&gt;"/>
      <spin switch="+RRestrictions:Max_Asynchronous_Select_Nesting" label="Max_Asynchronous_Select_Nesting" min="1" max="99999" default="0" separator="=&gt;"/>
      <spin switch="+RRestrictions:Max_Entry_Queue_Length" label="Max_Entry_Queue_Length" min="1" max="99999" default="0" separator="=&gt;"/>
      <spin switch="+RRestrictions:Max_Storage_At_Blocking" label="Max_Storage_At_Blocking" min="1" max="99999" default="0" separator="=&gt;"/>
   </category>
   <instances>
   </instances>
</gnatcheck>
>>>program returned status code 3

With some instances
===================

testsuite_driver: No output file generated by gnatcheck
<?xml version="1.0"?>
<gnatcheck>
   <category name="Feature Usage Rules">
      <check switch="+Rabort_statements" label="abort statement"/>
      <check switch="+Rabstract_type_declarations" label="abstract types"/>
      <check switch="+Ranonymous_access" label="anonymous access type"/>
      <check switch="+Ranonymous_subtypes" label="anonymous subtype"/>
      <check switch="+Rat_representation_clauses" label="AT representation clause"/>
      <check switch="+Rblocks" label="block statement"/>
      <spin switch="+Rcomplex_inlined_subprograms" label="complex inlined subprograms" min="0" max="99999" default="-1" separator=":"/>
      <field switch="+Rconditional_expressions" separator=":" label="conditional expression"/>
      <check switch="+Rconditional_expressions:except_assertions" label="conditional expression"/>
      <check switch="+Rcontrolled_type_declarations" label="declaration of controlled type"/>
      <check switch="+Rdeclarations_in_blocks" label="block statement with local declaration"/>
      <spin switch="+Rdeeply_nested_inlining" label="deeply nested inlining (global analysis required)" min="0" max="99999" default="-1" separator=":"/>
      <check switch="+Rdefault_parameters" label="too many parameters with default value"/>
      <check switch="+Rdiscriminated_records" label="declaration of discriminated record"/>
      <check switch="+Renumeration_representation_clauses" label="enumeration representation clause"/>
      <check switch="+Rexplicit_full_discrete_ranges" label="range could be replaced by subtype mark or 'Range"/>
      <check switch="+Rexplicit_inlining" label="subprogram marked inline"/>
      <check switch="+Rexpression_functions" label="expression function"/>
      <check switch="+Rfixed_equality_checks" label="use of equality operation for fixed values"/>
      <field switch="+Rfloat_equality_checks" separator=":" label="use of equality operation for float values"/>
      <check switch="+Rfloat_equality_checks:follow_renamings" label="use of equality operation for float values"/>
      <check switch="+Rfunction_style_procedures" label="procedure can be rewritten as function"/>
      <check switch="+Rgeneric_in_out_objects" label="generic IN OUT object"/>
      <check switch="+Rgenerics_in_subprograms" label="generic definition in subprogram body"/>
      <check switch="+Rimplicit_in_mode_parameters" label="implicit IN mode in parameter specification"/>
      <check switch="+Rimproperly_located_instantiations" label="instantiations not properly located"/>
      <check switch="+Rlibrary_level_subprograms" label="declaration of library level subprogram"/>
      <check switch="+Rmembership_tests" label="membership test"/>
      <check switch="+Rnon_qualified_aggregates" label="aggregate is not a part of a qualified expression"/>
      <check switch="+Rnumber_declarations" label="number declaration"/>
      <check switch="+Rnumeric_indexing" label="integer literal as index value"/>
      <check switch="+Rnumeric_literals" label="numeric literal"/>
      <field switch="+Rparameters_out_of_order" separator=":" label="parameter out of order"/>
      <field switch="+Rpredicate_testing" separator=":" label="expression needs subtype predicate evaluation"/>
      <check switch="+Rpredicate_testing:except_assertions" label="expression needs subtype predicate evaluation"/>
      <field switch="+Rquantified_expressions" separator=":" label="quantified expression"/>
      <check switch="+Rquantified_expressions:except_assertions" label="quantified expression"/>
      <check switch="+Rraising_predefined_exceptions" label="explicit raise of a predefined exception"/>
      <check switch="+Rrelative_delay_statements" label="relative delay statement"/>
      <check switch="+Rrenamings" label="renaming declaration"/>
      <field switch="+Rrepresentation_specifications" separator=":" label="representation specification"/>
      <check switch="+Rrepresentation_specifications:record_rep_clauses_only" label="representation specification"/>
      <check switch="+Rseparates" label="separate unit"/>
      <check switch="+Rsimple_loop_statements" label="simple loop statement"/>
      <check switch="+Rsubprogram_access" label="access to subprogram definition"/>
      <spin switch="+Rtoo_many_dependencies" label="unit has too many dependencies" min="0" max="99999" default="-1" separator=":"/>
      <field switch="+Runassigned_out_parameters" separator=":" label="OUT parameters do not get values in subprogram bodies"/>
      <check switch="+Runassigned_out_parameters:ignore_component_assignments" label="OUT parameters do not get values in subprogram bodies"/>
      <check switch="+Runconditional_exits" label="exit statement does not contain condition"/>
      <field switch="+Runconstrained_array_returns" separator=":" label="function returns unconstrained array"/>
      <check switch="+Runconstrained_array_returns:except_string" label="function returns unconstrained array"/>
      <check switch="+Runconstrained_arrays" label="unconstrained array definition"/>
      <field switch="+Ruse_clauses" separator=":" label="use clause"/>
      <check switch="+Ruse_clauses:exempt_operator_packages" label="use clause"/>
   </category>
   <category name="Metrics">
      <check switch="+Rmetrics_cyclomatic_complexity" label="cyclomatic complexity"/>
      <spin switch="+Rmetrics_essential_complexity" label="essential complexity" min="0" max="99999" default="-1" separator=":"/>
      <check switch="+Rmetrics_lsloc" label="Logical source lines"/>
   </category>
   <category name="Misc">
      <check switch="+Rkp_18614" label="possible occurrence of KP 18614"/>
      <check switch="+Rkp_18636" label="possible occurrence of KP 18636"/>
      <check switch="+Rkp_18637" label="possible occurrence of KP 18637"/>
      <check switch="+Rkp_18701" label="possible occurrence of KP 18701"/>
      <check switch="+Rkp_18718" label="possible occurrence of KP 18718"/>
      <check switch="+Rkp_18801" label="possible occurrence of KP 18801"/>
      <check switch="+Rkp_18926" label="possible occurrence of KP 18926"/>
      <check switch="+Rkp_19038" label="possible occurrence of KP 19038"/>
      <check switch="+Rkp_19134" label="possible occurrence of KP 19134"/>
      <check switch="+Rkp_19142" label="possible occurrence of KP 19142"/>
      <check switch="+Rkp_19159" label="possible occurrence of KP 19159"/>
      <check switch="+Rkp_19198" label="possible occurrence of KP 19198"/>
      <check switch="+Rkp_19237" label="possible occurrence of KP 19237"/>
      <check switch="+Rkp_19279" label="possible occurrence of KP 19279"/>
      <check switch="+Rkp_19312" label="possible occurrence of KP 19312"/>
      <check switch="+Rkp_19341" label="possible occurrence of KP 19341"/>
      <check switch="+Rkp_19423" label="possible occurrence of KP 19423"/>
      <check switch="+Rkp_19447" label="possible occurrence of KP 19447"/>
      <check switch="+Rkp_19501" label="possible occurrence of KP 19501"/>
      <check switch="+Rkp_19529" label="possible occurrence of KP 19529"/>
      <check switch="+Rkp_19625" label="possible occurrence of KP 19625"/>
      <check switch="+Rkp_19696" label="possible occurrence of KP 19696"/>
      <check switch="+Rkp_19747" label="possible occurrence of KP 19747"/>
      <check switch="+Rkp_19749" label="possible occurrence of KP 19749"/>
      <check switch="+Rkp_19753" label="possible occurrence of KP 19753"/>
      <check switch="+Rkp_19824" label="possible occurrence of KP 19824"/>
      <check switch="+Rkp_ob03_009" label="possible occurrence of KP OB03-009"/>
      <check switch="+Rkp_p226_024" label="possible occurrence of KP P226-024 - global analysis required"/>
      <check switch="+Rkp_q309_014" label="possible occurrence of KP Q309-014"/>
      <check switch="+Rkp_q609_033" label="possible occurrence of KP Q609-033 - global analysis required"/>
      <check switch="+Rkp_qc02_001" label="possible occurrence of KP QC02-001"/>
      <check switch="+Rkp_r316_001" label="possible occurrence of KP R316-001"/>
      <check switch="+Rkp_r410_028" label="possible occurrence of KP R410-028"/>
      <check switch="+Rkp_r511_017" label="possible occurrence of KP R511-017"/>
      <check switch="+Rkp_r517_023" label="possible occurrence of KP R517-023"/>
      <check switch="+Rkp_s114_015" label="possible occurrence of KP S124-035"/>
      <check switch="+Rkp_s124_035" label="possible occurrence of KP S124-035"/>
      <check switch="+Rkp_s521_014" label="possible occurrence of KP S521-014"/>
      <check switch="+Rkp_s621_051" label="possible occurrence of KP S621-051"/>
      <check switch="+Rkp_s722_023" label="possible occurrence of KP S722-023"/>
      <check switch="+Rkp_s724_042" label="possible occurrence of KP S724-042"/>
      <check switch="+Rkp_s814_034" label="possible occurrence of KP S814-034"/>
      <check switch="+Rkp_t420_033" label="possible occurrence of KP T420-033"/>
      <check switch="+Rkp_t528_043" label="possible occurrence of KP T528-043"/>
      <check switch="+Rkp_t602_028" label="possible occurrence of KP T602-028"/>
      <check switch="+Rkp_t708_064" label="possible occurrence of KP T708-064"/>
      <check switch="+Rkp_t805_037" label="possible occurrence of KP T805-037"/>
      <check switch="+Rkp_ta10_002" label="possible occurrence of KP TA10-002"/>
      <check switch="+Rkp_ta15_022" label="possible occurrence of KP TA15-022"/>
      <check switch="+Rkp_ta30_032" label="possible occurrence of KP TA30-032"/>
      <check switch="+Rkp_tb09_038" label="possible occurrence of KP TB09-038"/>
      <check switch="+Rkp_tb23_035" label="possible occurrence of KP TB23-035"/>
      <check switch="+Rkp_tb25_028" label="possible occurrence of KP TB25-028"/>
      <check switch="+Rkp_tc01_050" label="possible occurrence of KP TC01-050"/>
      <check switch="+Rkp_u126_006" label="possible occurrence of KP U126-006"/>
      <check switch="+Rkp_u225_018" label="possible occurrence of KP U225-018"/>
      <check switch="+Rkp_u310_012" label="possible occurrence of KP U310-012"/>
      <check switch="+Rkp_u316_028" label="possible occurrence of KP U316-028"/>
      <check switch="+Rkp_u629_002" label="possible occurrence of KP U629-002"/>
      <check switch="+Rkp_u630_012" label="possible occurrence of KP U630-012"/>
      <check switch="+Rkp_u701_015" label="possible occurrence of KP U701-015"/>
      <check switch="+Rkp_u702_038" label="possible occurrence of KP U702-038"/>
      <check switch="+Rkp_u727_033" label="possible occurrence of KP U727-033"/>
      <check switch="+Rkp_u803_030" label="possible occurrence of KP U803-030"/>
      <check switch="+Rkp_u812_034" label="possible occurrence of KP U812-034"/>
      <check switch="+Rkp_u923_018" label="possible occurrence of KP U923-018"/>
      <check switch="+Rkp_u928_018" label="possible occurrence of KP U928-018"/>
      <spin switch="+Rkp_ua12_036" label="possible occurrence of KP UA12-036" min="0" max="99999" default="-1" separator=":"/>
      <check switch="+Rkp_ub15_001" label="possible occurrence of KP UB15-001"/>
      <check switch="+Rkp_ub22_022" label="possible occurrence of KP UB22-022"/>
      <check switch="+Rkp_uc22_009" label="possible occurrence of KP UC22-009"/>
      <check switch="+Rkp_v114_047" label="possible occurrence of KP V114-047"/>
      <check switch="+Rkp_v120_015" label="possible occurrence of KP V120-015"/>
      <check switch="+Rkp_v127_049" label="possible occurrence of KP V127-049"/>
      <check switch="+Rkp_v206_001" label="possible occurrence of KP V206-001"/>
      <check switch="+Rkp_v214_016" label="possible occurrence of KP V214-016"/>
      <check switch="+Rkp_v216_031" label="possible occurrence of KP V216-031 - global analysis required"/>
      <check switch="+Rkp_v302_021" label="possible occurrence of KP V302-021"/>
      <check switch="+Rkp_v329_046" label="possible occurrence of KP V329-046"/>
      <check switch="+Rkp_v404_040" label="possible occurrence of KP V404-040"/>
      <check switch="+Rkp_v407_011" label="possible occurrence of KP V407-011"/>
      <check switch="+Rkp_v505_020" label="possible occurrence of KP V505-020"/>
      <check switch="+Rkp_v616_018" label="possible occurrence of KP V616-018"/>
      <check switch="+Rkp_v624_025" label="possible occurrence of KP V624-025"/>
      <check switch="+Rkp_v708_029" label="possible occurrence of KP V708-029"/>
      <check switch="+Rkp_v712_039" label="possible occurrence of KP V712-039"/>
      <check switch="+Rkp_v719_024" label="possible occurrence of KP V719-024"/>
      <check switch="+Rkp_v720_003" label="possible occurrence of KP V720-003 - global analysis required"/>
      <check switch="+Rkp_v907_005" label="possible occurrence of KP V907-005"/>
      <check switch="+Rkp_v924_001" label="possible occurrence of KP V924-001"/>
      <check switch="+Rkp_va03_035" label="possible occurrence of KP VA03-035"/>
      <check switch="+Rkp_va06_034" label="possible occurrence of KP VA06-034"/>
      <check switch="+Rkp_va18_003" label="possible occurrence of KP VA18-003"/>
      <check switch="+Rkp_vb20_002" label="possible occurrence of KP VB20-002"/>
      <check switch="+Rkp_vb24_008" label="possible occurrence of KP VB24-008"/>
      <check switch="+Rkp_w330_020" label="possible occurrence of KP W330-020"/>
   </category>
   <category name="SPARK">
      <field switch="+Rannotated_comments" separator=":" label="use of comment annotations"/>
      <check switch="+Rboolean_relational_operators" label="comparison of Boolean values"/>
      <check switch="+Rexpanded_loop_exit_names" label="expanded loop name in exit statement"/>
      <check switch="+Rnon_spark_attributes" label="attribute is not from the SPARK subset"/>
      <check switch="+Rnon_tagged_derived_types" label="derived type that is not a type extension"/>
      <check switch="+Router_loop_exits" label="exit out of the nesting loop"/>
      <check switch="+Roverloaded_operators" label="overloading of an operator symbol"/>
      <check switch="+Rslices" label="slice"/>
      <check switch="+Runiversal_ranges" label="range with universal integer bounds"/>
   </category>
   <category name="Style-Related Rules">
      <category name="Object Orientation">
         <check switch="+Rconstructors" label="declaration of constructor function"/>
         <spin switch="+Rdeep_inheritance_hierarchies" label="derivation tree is too deep" min="0" max="99999" default="-1" separator=":"/>
         <field switch="+Rdirect_calls_to_primitives" separator=":" label="non-dispatching call to primitive operation"/>
         <check switch="+Rdirect_calls_to_primitives:except_constructors" label="non-dispatching call to primitive operation"/>
         <check switch="+Rdownward_view_conversions" label="downward view conversion"/>
         <check switch="+Rno_inherited_classwide_pre" label="overridden operation has no Pre'Class"/>
         <check switch="+Rspecific_parent_type_invariant" label="parent type has specific Type_Invariant aspect"/>
         <check switch="+Rspecific_pre_post" label="definition of non class-wide aspect"/>
         <check switch="+Rspecific_type_invariants" label="definition of non class-wide Type_Invariant aspect"/>
         <spin switch="+Rtoo_many_parents" label="type has too many parents" min="0" max="99999" default="-1" separator=":"/>
         <spin switch="+Rtoo_many_primitives" label="tagged type has too many primitives" min="0" max="99999" default="-1" separator=":"/>
         <field switch="+Rvisible_components" separator=":" label="type defines publicly accessible components"/>
         <check switch="+Rvisible_components:tagged_only" label="type defines publicly accessible components"/>
      </category>
      <category name="Portability">
         <check switch="+Rbit_records_without_layout_definition" label="bit record without layout definition"/>
         <check switch="+Rforbidden_aspects:ALL" label="detect all aspects except explicitly disabled"/>
         <check switch="+Rforbidden_aspects:GNAT" label="detect all GNAT aspects except explicitly disabled"/>
         <field switch="+Rforbidden_aspects" label="detect specified aspects (use ',' as separator)" separator=":"/>
         <field switch="-Rforbidden_aspects" label="do not detect specified aspects (use ',' as separator)" separator=":"/>
         <check switch="+Rforbidden_attributes:ALL" label="detect all attributes except explicitly disabled"/>
         <check switch="+Rforbidden_attributes:GNAT" label="detect all GNAT attributes except explicitly disabled"/>
         <field switch="+Rforbidden_attributes" label="detect specified attributes (use ',' as separator)" separator=":"/>
         <field switch="-Rforbidden_attributes" label="do not detect specified attributes (use ',' as separator)" separator=":"/>
         <check switch="+Rforbidden_pragmas:ALL" label="detect all pragmas except explicitly disabled"/>
         <check switch="+Rforbidden_pragmas:GNAT" label="detect all GNAT pragmas except explicitly disabled"/>
         <field switch="+Rforbidden_pragmas" label="detect specified pragmas (use ',' as separator)" separator=":"/>
         <field switch="-Rforbidden_pragmas" label="do not detect specified pragmas (use ',' as separator)" separator=":"/>
         <check switch="+Rimplicit_small_for_fixed_point_types" label="fixed point type declaration with no 'Small clause"/>
         <check switch="+Rincomplete_representation_specifications" label="record type with incomplete representation specification"/>
         <check switch="+Rmembership_for_validity" label="membership test instead of 'Valid"/>
         <check switch="+Rno_explicit_real_range" label="real type with no range definition"/>
         <check switch="+Rno_scalar_storage_order_specified" label="Scalar_Storage_Order is not specified"/>
         <check switch="+Rpredefined_numeric_types" label="explicit reference to predefined numeric subtype"/>
         <check switch="+Rprintable_ascii" label="non-printable characters"/>
         <check switch="+Rseparate_numeric_error_handlers" label="Constraint_Error is handled separately from Numeric_Error"/>
      </category>
      <category name="Program Structure">
         <spin switch="+Rdeep_library_hierarchy" label="unit has too many ancestors" min="0" max="99999" default="-1" separator=":"/>
         <spin switch="+Rdeeply_nested_generics" label="deeply nested generic" min="0" max="99999" default="-1" separator=":"/>
         <spin switch="+Rdeeply_nested_instantiations" label="deeply nested instantiation" min="0" max="99999" default="-1" separator=":"/>
         <check switch="+Rlocal_packages" label="declaration of local package"/>
         <spin switch="+Rmaximum_expression_complexity" label="maximum complexity of an expression" min="0" max="99999" default="-1" separator=":"/>
         <spin switch="+Rmaximum_lines" label="maximum number of lines in a file" min="0" max="99999" default="-1" separator=":"/>
         <spin switch="+Rmaximum_subprogram_lines" label="maximum number of lines in a subprogram" min="0" max="99999" default="-1" separator=":"/>
         <check switch="+Rnon_visible_exceptions" label="potential propagations of non-visible exceptions"/>
         <check switch="+Rone_tagged_type_per_package" label="more than one tagged type declared in package spec"/>
         <check switch="+Routside_references_from_subprograms" label="outside references from subprogram"/>
         <check switch="+Rraising_external_exceptions" label="raised exception is not declared in visible part of enclosing library package"/>
         <field switch="+Rsame_instantiations" separator=":" label="duplicate generic package instantiations (global analysis required)"/>
         <check switch="+Rsame_instantiations:library_level_only" label="duplicate generic package instantiations (global analysis required)"/>
         <spin switch="+Rtoo_many_generic_dependencies" label="too many generic dependencies" min="0" max="99999" default="-1" separator=":"/>
      </category>
      <category name="Programming Practice">
         <check switch="+Raccess_to_local_objects" label="access attribute for local objects"/>
         <field switch="+Ractual_parameters" separator=":" label="actual parameter mismatch"/>
         <check switch="+Rada05_formal_packages" label="Ada 2005 formal package declaration"/>
         <check switch="+Rada_2022_in_ghost_code" label="Ada 2022 construct forbidden outside of ghost code"/>
         <check switch="+Raddress_attribute_for_non_volatile_objects" label="address attribute for non-volatile object"/>
         <check switch="+Raddress_specifications_for_initialized_objects" label="address specification for initialized object"/>
         <check switch="+Raddress_specifications_for_local_objects" label="address specification for local object"/>
         <check switch="+Ranonymous_arrays" label="anonymous array type"/>
         <field switch="+Rbinary_case_statements" separator=":" label="CASE statement can be replaced with IF statement"/>
         <check switch="+Rbinary_case_statements:except_enums" label="CASE statement can be replaced with IF statement"/>
         <check switch="+Rboolean_negations" label="negation of boolean operator"/>
         <field switch="+Rcalls_in_exception_handlers" separator=":" label="exception handler with forbidden calls"/>
         <field switch="+Rcalls_outside_elaboration" separator=":" label="call performed outside elaboration"/>
         <check switch="+Rconcurrent_interfaces" label="concurrent interface"/>
         <check switch="+Rconstant_overlays" label="non-constant object overlays a constant"/>
         <check switch="+Rdefault_values_for_record_components" label="default value for record component"/>
         <check switch="+Rderiving_from_predefined_type" label="deriving from predefined type"/>
         <field switch="+Rdirect_equalities" separator=":" label="direct (in)equality"/>
         <check switch="+Rduplicate_branches" label="duplicate branch"/>
         <check switch="+Renumeration_ranges_in_case_statements" label="enumeration range as a choice in a case statement"/>
         <field switch="+Rexception_propagation_from_callbacks" separator=":" label="callback may propagate exceptions (global analysis required)"/>
         <check switch="+Rexception_propagation_from_export" label="exception may propagate out of exported subprogram"/>
         <check switch="+Rexception_propagation_from_tasks" label="exceptions may propagate out of task body"/>
         <check switch="+Rexceptions_as_control_flow" label="this exception will be handled in the same body"/>
         <field switch="+Rexit_statements_with_no_loop_name" separator=":" label="exit statement with no loop name"/>
         <check switch="+Rexit_statements_with_no_loop_name:nested_only" label="exit statement with no loop name"/>
         <check switch="+Rexits_from_conditional_loops" label="exit from conditional loop"/>
         <check switch="+Rfinal_package" label="child package cannot have a final parent package"/>
         <check switch="+Rfunction_out_parameters" label="function has output parameter(s)"/>
         <field switch="+Rglobal_variables" separator=":" label="declaration of global variable"/>
         <check switch="+Rglobal_variables:only_public" label="declaration of global variable"/>
         <field switch="+Rgoto_statements" separator=":" label="goto statement"/>
         <check switch="+Rgoto_statements:only_unconditional" label="goto statement"/>
         <check switch="+Rimproper_returns" label="extra return statement"/>
         <check switch="+Rinteger_types_as_enum" label="integer type may be replaced by an enumeration (global analysis required)"/>
         <field switch="+Rlocal_instantiations" separator=":" label="local instantiation"/>
         <field switch="+Rlocal_use_clauses" separator=":" label="local use clause"/>
         <check switch="+Rlocal_use_clauses:except_use_type_clauses" label="local use clause"/>
         <spin switch="+Rmaximum_out_parameters" label="maximum number of subprogram OUT parameters" min="0" max="99999" default="-1" separator=":"/>
         <spin switch="+Rmaximum_parameters" label="maximum number of subprogram parameters" min="0" max="99999" default="-1" separator=":"/>
         <check switch="+Rmisplaced_representation_items" label="misplaced representation item"/>
         <check switch="+Rnested_paths" label="nested path may be moved outside if statement"/>
         <check switch="+Rnested_subprograms" label="subprogram declared in executable body"/>
         <spin switch="+Rno_closing_names" label="no closing name" min="0" max="99999" default="-1" separator=":"/>
         <check switch="+Rno_others_in_exception_handlers" label="no OTHERS choice in exception handlers"/>
         <check switch="+Rnon_component_in_barriers" label="barrier references non component variable"/>
         <check switch="+Rnon_constant_overlays" label="constant object overlays a variable object"/>
         <field switch="+Rnon_short_circuit_operators" separator=":" label="use of predefined AND and OR for boolean types"/>
         <check switch="+Rnon_short_circuit_operators:except_assertions" label="use of predefined AND and OR for boolean types"/>
         <check switch="+Rnonoverlay_address_specifications" label="nonoverlay address specification"/>
         <check switch="+Rnot_imported_overlays" label="not imported overlay"/>
         <field switch="+Rnull_paths" separator=":" label="null path"/>
         <check switch="+Rnull_paths:except_enums" label="null path"/>
         <check switch="+Robjects_of_anonymous_types" label="object of anonymous type"/>
         <field switch="+Roperator_renamings" separator=":" label="renaming of an operator"/>
         <check switch="+Roperator_renamings:name_mismatch" label="renaming of an operator"/>
         <check switch="+Rothers_in_aggregates" label="OTHERS choice in aggregate"/>
         <check switch="+Rothers_in_case_statements" label="OTHERS choice in case statement"/>
         <check switch="+Rothers_in_exception_handlers" label="OTHERS choice in exception handler"/>
         <check switch="+Routbound_protected_assignments" label="assignment from protected body to outside object"/>
         <check switch="+Roverly_nested_control_structures" label="nesting level of control structures too deep"/>
         <spin switch="+Roverly_nested_scopes" label="nesting level of scopes too deep" min="0" max="99999" default="-1" separator=":"/>
         <field switch="+Rparameters_aliasing" separator=":" label="parameter aliasing"/>
         <check switch="+Rparameters_aliasing:in_parameters" label="parameter aliasing"/>
         <check switch="+Rpos_on_enumeration_types" label="prefix of 'POS attribute has enumeration type"/>
         <check switch="+Rpositional_actuals_for_defaulted_generic_parameters" label="use named notation when passing actual to defaulted generic parameter"/>
         <check switch="+Rpositional_actuals_for_defaulted_parameters" label="use named notation when passing actual to defaulted parameter"/>
         <check switch="+Rpositional_components" label="aggregate with a positional component association"/>
         <check switch="+Rpositional_generic_parameters" label="positional generic association"/>
         <field switch="+Rpositional_parameters" separator=":" label="positional parameter association"/>
         <check switch="+Rpositional_parameters:all" label="positional parameter association"/>
         <field switch="+Rpotential_parameters_aliasing" separator=":" label="potential parameter aliasing"/>
         <check switch="+Rpotential_parameters_aliasing:in_parameters" label="potential parameter aliasing"/>
         <check switch="+Rrecursive_subprograms" label="recursive subprogram (global analysis required)"/>
         <check switch="+Rredundant_boolean_expressions" label="redundant boolean expression"/>
         <check switch="+Rredundant_null_statements" label="redundant null statement"/>
         <check switch="+Rsame_logic" label="same logic"/>
         <check switch="+Rsame_operands" label="same operands"/>
         <check switch="+Rsame_tests" label="same test"/>
         <field switch="+Rside_effect_parameters" separator=":" label="call with side effects"/>
         <field switch="+Rsilent_exception_handlers" separator=":" label="silent exception handler"/>
         <check switch="+Rsingle_value_enumeration_types" label="enumeration type definition with a single enumeration literal"/>
         <check switch="+Rsize_attribute_for_types" label="Size attribute for type"/>
         <check switch="+Rspark_procedures_without_globals" label="SPARK procedure doesn't have a Global aspect"/>
         <check switch="+Rsuspicious_equalities" label="suspicious equality"/>
         <check switch="+Rtrivial_exception_handlers" label="trivial exception handler"/>
         <field switch="+Runavailable_body_calls" separator=":" label="call to unavailable body (global analysis required)"/>
         <check switch="+Runavailable_body_calls:indirect_calls" label="call to unavailable body (global analysis required)"/>
         <check switch="+Runchecked_address_conversions" label="address-to-access conversion"/>
         <check switch="+Runchecked_conversions_as_actuals" label="instance of Unchecked_Conversion as actual parameter"/>
         <check switch="+Runinitialized_global_variables" label="uninitialized global variable"/>
         <check switch="+Runnamed_blocks_and_loops" label="compound statements naming"/>
         <check switch="+Runnamed_exits" label="unnamed exit statement"/>
         <check switch="+Ruse_array_slices" label="FOR loop may be replaced by an array slice"/>
         <check switch="+Ruse_case_statements" label="IF statement may be replaced by a CASE statement"/>
         <check switch="+Ruse_for_loops" label="WHILE loop may be replaced by a FOR loop"/>
         <check switch="+Ruse_for_of_loops" label="FOR loop may be replaced by a FOR OF loop"/>
         <check switch="+Ruse_if_expressions" label="IF statement may be replaced by an IF expression"/>
         <field switch="+Ruse_memberships" separator=":" label="expression may be replaced by a membership test"/>
         <check switch="+Ruse_memberships:short_circuit" label="expression may be replaced by a membership test"/>
         <check switch="+Ruse_package_clauses" label="use clause for package"/>
         <check switch="+Ruse_ranges" label="simplifiable 'First .. 'Last and 'Range"/>
         <check switch="+Ruse_record_aggregates" label="component assignments may be replaced by an aggregate"/>
         <check switch="+Ruse_simple_loops" label="WHILE loop may be replaced by a simple LOOP"/>
         <check switch="+Ruse_while_loops" label="simple LOOP may be replaced by a WHILE loop"/>
         <check switch="+Rvariable_scoping" label="variables that can be moved to an inner block"/>
      </category>
      <category name="Readability">
         <check switch="+Rend_of_line_comments" label="end of line comments"/>
         <field switch="+Rheaders" separator=":" label="compilation unit does not start with header"/>
         <combo switch="+RIdentifier_Casing:Type" label="type name casing" separator="=">
            <combo-entry value="upper" />
            <combo-entry value="lower" />
            <combo-entry value="mixed" />
         </combo>
         <combo switch="+RIdentifier_Casing:Enum" label="enumeration literal casing" separator="=">
            <combo-entry value="upper" />
            <combo-entry value="lower" />
            <combo-entry value="mixed" />
         </combo>
         <combo switch="+RIdentifier_Casing:Constant" label="constant name casing" separator="=">
            <combo-entry value="upper" />
            <combo-entry value="lower" />
            <combo-entry value="mixed" />
         </combo>
         <combo switch="+RIdentifier_Casing:Exception" label="exception name casing" separator="=">
            <combo-entry value="upper" />
            <combo-entry value="lower" />
            <combo-entry value="mixed" />
         </combo>
         <combo switch="+RIdentifier_Casing:Others" label="other name casing" separator="=">
            <combo-entry value="upper" />
            <combo-entry value="lower" />
            <combo-entry value="mixed" />
         </combo>
         <field switch="+Ridentifier_casing:Exclude" label="dictionary of casing exceptions" separator="="/>
         <field switch="+Ridentifier_prefixes:Type" label="prefix for type names (empty string disables check)" separator="=" switch-off="-Ridentifier_prefixes:Type"/>
         <field switch="+Ridentifier_prefixes:Concurrent" label="prefix for task and protected type names (empty string disables check)" separator="=" switch-off="-Ridentifier_prefixes:Concurrent"/>
         <field switch="+Ridentifier_prefixes:Access" label="prefix for access type names (empty string disables check)" separator="=" switch-off="-Ridentifier_prefixes:Access"/>
         <field switch="+Ridentifier_prefixes:Class_Access" label="prefix for class access type names (empty string disables check)" separator="=" switch-off="-Ridentifier_prefixes:Class_Access"/>
         <field switch="+Ridentifier_prefixes:Subprogram_Access" label="prefix for access-to-subprogram type names (empty string disables check)" separator="=" switch-off="-Ridentifier_prefixes:Subprogram_Access"/>
         <field switch="+Ridentifier_prefixes:Derived" label="prefix for derived type names (empty string disables check)" separator="=" switch-off="-Ridentifier_prefixes:Derived"/>
         <field switch="+Ridentifier_prefixes:Constant" label="prefix for constant names (empty string disables check)" separator="=" switch-off="-Ridentifier_prefixes:Constant"/>
         <field switch="+Ridentifier_prefixes:Exception" label="prefix for exception names (empty string disables check)" separator="=" switch-off="-Ridentifier_prefixes:Exception"/>
         <field switch="+Ridentifier_prefixes:Enum" label="prefix for enumeration literals (empty string disables check)" separator="=" switch-off="-Ridentifier_prefixes:Enum"/>
         <check switch="+Ridentifier_prefixes:Exclusive" label="strong check mode"/>
         <check switch="+Ridentifier_suffixes:Default" label="identifiers use standard suffixes"/>
         <field switch="+Ridentifier_suffixes:Type_Suffix" label="suffix for type names (empty string disables check)" separator="=" switch-off="-Ridentifier_suffixes:Type_Suffix"/>
         <field switch="+Ridentifier_suffixes:Access_Suffix" label="suffix for access type names (empty string disables check)" separator="=" switch-off="-Ridentifier_suffixes:Access_Suffix"/>
         <field switch="+Ridentifier_suffixes:Constant_Suffix" label="suffix for constant names (empty string disables check)" separator="=" switch-off="-Ridentifier_suffixes:Constant_Suffix"/>
         <field switch="+Ridentifier_suffixes:Renaming_Suffix" label="suffix for package renaming names (empty string disables check)" separator="=" switch-off="-Ridentifier_suffixes:Renaming_Suffix"/>
         <field switch="+Ridentifier_suffixes:Access_Obj_Suffix" label="suffix for access object names (empty string disables check)" separator="=" switch-off="-Ridentifier_suffixes:Access_Obj_Suffix"/>
         <field switch="+Ridentifier_suffixes:Interrupt_Suffix" label="suffix for interrupt handler names (empty string disables check)" separator="=" switch-off="-Ridentifier_suffixes:Interrupt_Suffix"/>
         <default-value-dependency master-switch="+Ridentifier_suffixes:Default" slave-switch="+Ridentifier_suffixes:Type_Suffix=_T"/>
         <default-value-dependency master-switch="+Ridentifier_suffixes:Default" slave-switch="+Ridentifier_suffixes:Access_Suffix=_A"/>
         <default-value-dependency master-switch="+Ridentifier_suffixes:Default" slave-switch="+Ridentifier_suffixes:Constant_Suffix=_C"/>
         <default-value-dependency master-switch="+Ridentifier_suffixes:Default" slave-switch="+Ridentifier_suffixes:Renaming_Suffix=_R"/>
         <field switch="+Rlowercase_keywords" separator=":" label="lowercase_keywords"/>
         <spin switch="+Rmax_identifier_length" label="maximal identifier length" min="0" max="99999" default="-1" separator=":"/>
         <spin switch="+Rmin_identifier_length" label="identifier too short" min="0" max="99999" default="-1" separator=":"/>
         <check switch="+Rmisnamed_controlling_parameters" label="first parameter should have name 'This' and proper type"/>
         <field switch="+Rname_clashes" separator=":" label="use of forbidden identifier"/>
         <field switch="+Rno_dependence" separator=":" label="Forbidden dependency"/>
         <check switch="+Rnumeric_format" label="incorrect format for numeric literal"/>
         <check switch="+Robject_declarations_out_of_order" label="object declarations should precede program unit declarations"/>
         <check switch="+Rone_construct_per_line" label="more than one construct on the same line"/>
         <check switch="+Roverriding_marks" label="Missing overriding mark"/>
         <check switch="+Rprofile_discrepancies" label="parameter profile discrepancies"/>
         <check switch="+Runcommented_begin" label="BEGIN not marked with entity name comment"/>
         <check switch="+Runcommented_begin_in_package_bodies" label="BEGIN in package bodies not marked with package name comment"/>
         <spin switch="+Runcommented_end_record" label="END RECORD not marked with type name comment" min="0" max="99999" default="-1" separator=":"/>
      </category>
      <category name="Tasking">
         <check switch="+Rmultiple_entries_in_protected_definitions" label="more than one entry in protected definition"/>
         <check switch="+Rvolatile_objects_without_address_clauses" label="volatile object with no address clause"/>
      </category>
   </category>
   <category name="Restriction rules">
      <field switch="+RRestrictions:No_Dependence" label="No_Dependence, specify one unit to check" separator="=&gt;"/>
      <check switch="+RRestrictions:Simple_Barriers" label="Simple_Barriers"/>
      <check switch="+RRestrictions:Pure_Barriers" label="Pure_Barriers"/>
      <check switch="+RRestrictions:No_Abort_Statements" label="No_Abort_Statements"/>
      <check switch="+RRestrictions:No_Access_Parameter_Allocators" label="No_Access_Parameter_Allocators"/>
      <check switch="+RRestrictions:No_Access_Subprograms" label="No_Access_Subprograms"/>
      <check switch="+RRestrictions:No_Allocators" label="No_Allocators"/>
      <check switch="+RRestrictions:No_Anonymous_Allocators" label="No_Anonymous_Allocators"/>
      <check switch="+RRestrictions:No_Asynchronous_Control" label="No_Asynchronous_Control"/>
      <check switch="+RRestrictions:No_Calendar" label="No_Calendar"/>
      <check switch="+RRestrictions:No_Coextensions" label="No_Coextensions"/>
      <check switch="+RRestrictions:No_Default_Stream_Attributes" label="No_Default_Stream_Attributes"/>
      <check switch="+RRestrictions:No_Delay" label="No_Delay"/>
      <check switch="+RRestrictions:No_Direct_Boolean_Operators" label="No_Direct_Boolean_Operators"/>
      <check switch="+RRestrictions:No_Dispatch" label="No_Dispatch"/>
      <check switch="+RRestrictions:No_Dispatching_Calls" label="No_Dispatching_Calls"/>
      <check switch="+RRestrictions:No_Dynamic_Accessibility_Checks" label="No_Dynamic_Accessibility_Checks"/>
      <check switch="+RRestrictions:No_Dynamic_Attachment" label="No_Dynamic_Attachment"/>
      <check switch="+RRestrictions:No_Dynamic_Cpu_Assignment" label="No_Dynamic_Cpu_Assignment"/>
      <check switch="+RRestrictions:No_Dynamic_Priorities" label="No_Dynamic_Priorities"/>
      <check switch="+RRestrictions:No_Enumeration_Maps" label="No_Enumeration_Maps"/>
      <check switch="+RRestrictions:No_Entry_Calls_In_Elaboration_Code" label="No_Entry_Calls_In_Elaboration_Code"/>
      <check switch="+RRestrictions:No_Entry_Queue" label="No_Entry_Queue"/>
      <check switch="+RRestrictions:No_Exception_Handlers" label="No_Exception_Handlers"/>
      <check switch="+RRestrictions:No_Exception_Propagation" label="No_Exception_Propagation"/>
      <check switch="+RRestrictions:No_Exception_Registration" label="No_Exception_Registration"/>
      <check switch="+RRestrictions:No_Exceptions" label="No_Exceptions"/>
      <check switch="+RRestrictions:No_Finalization" label="No_Finalization"/>
      <check switch="+RRestrictions:No_Fixed_Io" label="No_Fixed_Io"/>
      <check switch="+RRestrictions:No_Fixed_Point" label="No_Fixed_Point"/>
      <check switch="+RRestrictions:No_Floating_Point" label="No_Floating_Point"/>
      <check switch="+RRestrictions:No_Io" label="No_Io"/>
      <check switch="+RRestrictions:No_Implicit_Conditionals" label="No_Implicit_Conditionals"/>
      <check switch="+RRestrictions:No_Implicit_Dynamic_Code" label="No_Implicit_Dynamic_Code"/>
      <check switch="+RRestrictions:No_Implicit_Heap_Allocations" label="No_Implicit_Heap_Allocations"/>
      <check switch="+RRestrictions:No_Implicit_Task_Allocations" label="No_Implicit_Task_Allocations"/>
      <check switch="+RRestrictions:No_Implicit_Protected_Object_Allocations" label="No_Implicit_Protected_Object_Allocations"/>
      <check switch="+RRestrictions:No_Initialize_Scalars" label="No_Initialize_Scalars"/>
      <check switch="+RRestrictions:No_Local_Tagged_Types" label="No_Local_Tagged_Types"/>
      <check switch="+RRestrictions:No_Local_Allocators" label="No_Local_Allocators"/>
      <check switch="+RRestrictions:No_Local_Timing_Events" label="No_Local_Timing_Events"/>
      <check switch="+RRestrictions:No_Local_Protected_Objects" label="No_Local_Protected_Objects"/>
      <check switch="+RRestrictions:No_Long_Long_Integers" label="No_Long_Long_Integers"/>
      <check switch="+RRestrictions:No_Multiple_Elaboration" label="No_Multiple_Elaboration"/>
      <check switch="+RRestrictions:No_Nested_Finalization" label="No_Nested_Finalization"/>
      <check switch="+RRestrictions:No_Protected_Type_Allocators" label="No_Protected_Type_Allocators"/>
      <check switch="+RRestrictions:No_Protected_Types" label="No_Protected_Types"/>
      <check switch="+RRestrictions:No_Recursion" label="No_Recursion"/>
      <check switch="+RRestrictions:No_Reentrancy" label="No_Reentrancy"/>
      <check switch="+RRestrictions:No_Relative_Delay" label="No_Relative_Delay"/>
      <check switch="+RRestrictions:No_Requeue_Statements" label="No_Requeue_Statements"/>
      <check switch="+RRestrictions:No_Secondary_Stack" label="No_Secondary_Stack"/>
      <check switch="+RRestrictions:No_Select_Statements" label="No_Select_Statements"/>
      <check switch="+RRestrictions:No_Specific_Termination_Handlers" label="No_Specific_Termination_Handlers"/>
      <check switch="+RRestrictions:No_Standard_Allocators_After_Elaboration" label="No_Standard_Allocators_After_Elaboration"/>
      <check switch="+RRestrictions:No_Standard_Storage_Pools" label="No_Standard_Storage_Pools"/>
      <check switch="+RRestrictions:No_Stream_Optimizations" label="No_Stream_Optimizations"/>
      <check switch="+RRestrictions:No_Streams" label="No_Streams"/>
      <check switch="+RRestrictions:No_Tagged_Type_Registration" label="No_Tagged_Type_Registration"/>
      <check switch="+RRestrictions:No_Task_Allocators" label="No_Task_Allocators"/>
      <check switch="+RRestrictions:No_Task_Attributes_Package" label="No_Task_Attributes_Package"/>
      <check switch="+RRestrictions:No_Task_At_Interrupt_Priority" label="No_Task_At_Interrupt_Priority"/>
      <check switch="+RRestrictions:No_Task_Hierarchy" label="No_Task_Hierarchy"/>
      <check switch="+RRestrictions:No_Task_Hierarchy_Implicit" label="No_Task_Hierarchy_Implicit"/>
      <check switch="+RRestrictions:No_Task_Termination" label="No_Task_Termination"/>
      <check switch="+RRestrictions:No_Tasks_Unassigned_To_Cpu" label="No_Tasks_Unassigned_To_Cpu"/>
      <check switch="+RRestrictions:No_Tasking" label="No_Tasking"/>
      <check switch="+RRestrictions:No_Terminate_Alternatives" label="No_Terminate_Alternatives"/>
      <check switch="+RRestrictions:No_Unchecked_Access" label="No_Unchecked_Access"/>
      <check switch="+RRestrictions:No_Unchecked_Conversion" label="No_Unchecked_Conversion"/>
      <check switch="+RRestrictions:No_Unchecked_Deallocation" label="No_Unchecked_Deallocation"/>
      <check switch="+RRestrictions:Static_Priorities" label="Static_Priorities"/>
      <check switch="+RRestrictions:Static_Storage_Size" label="Static_Storage_Size"/>
      <check switch="+RRestrictions:No_Default_Initialization" label="No_Default_Initialization"/>
      <check switch="+RRestrictions:Immediate_Reclamation" label="Immediate_Reclamation"/>
      <check switch="+RRestrictions:No_Dynamic_Sized_Objects" label="No_Dynamic_Sized_Objects"/>
      <check switch="+RRestrictions:No_Implementation_Aspect_Specifications" label="No_Implementation_Aspect_Specifications"/>
      <check switch="+RRestrictions:No_Implementation_Attributes" label="No_Implementation_Attributes"/>
      <check switch="+RRestrictions:No_Implementation_Identifiers" label="No_Implementation_Identifiers"/>
      <check switch="+RRestrictions:No_Implementation_Pragmas" label="No_Implementation_Pragmas"/>
      <check switch="+RRestrictions:No_Implementation_Restrictions" label="No_Implementation_Restrictions"/>
      <check switch="+RRestrictions:No_Implementation_Units" label="No_Implementation_Units"/>
      <check switch="+RRestrictions:No_Implicit_Aliasing" label="No_Implicit_Aliasing"/>
      <check switch="+RRestrictions:No_Implicit_Loops" label="No_Implicit_Loops"/>
      <check switch="+RRestrictions:No_Elaboration_Code" label="No_Elaboration_Code"/>
      <check switch="+RRestrictions:No_Obsolescent_Features" label="No_Obsolescent_Features"/>
      <check switch="+RRestrictions:No_Unrecognized_Aspects" label="No_Unrecognized_Aspects"/>
      <check switch="+RRestrictions:No_Unrecognized_Pragmas" label="No_Unrecognized_Pragmas"/>
      <check switch="+RRestrictions:No_Wide_Characters" label="No_Wide_Characters"/>
      <check switch="+RRestrictions:Static_Dispatch_Tables" label="Static_Dispatch_Tables"/>
      <check switch="+RRestrictions:Spark_05" label="Spark_05"/>
      <field switch="+RRestrictions:No_Specification_Of_Aspect" label="No_Specification_Of_Aspect, specify one feature to check" separator="=&gt;"/>
      <field switch="+RRestrictions:No_Use_Of_Attribute" label="No_Use_Of_Attribute, specify one feature to check" separator="=&gt;"/>
      <field switch="+RRestrictions:No_Use_Of_Pragma" label="No_Use_Of_Pragma, specify one feature to check" separator="=&gt;"/>
      <spin switch="+RRestrictions:Max_Protected_Entries" label="Max_Protected_Entries" min="1" max="99999" default="0" separator="=&gt;"/>
      <spin switch="+RRestrictions:Max_Select_Alternatives" label="Max_Select_Alternatives" min="1" max="99999" default="0" separator="=&gt;"/>
      <spin switch="+RRestrictions:Max_Task_Entries" label="Max_Task_Entries" min="1" max="99999" default="0" separator="=&gt;"/>
      <spin switch="+RRestrictions:Max_Tasks" label="Max_Tasks" min="1" max="99999" default="0" separator="=&gt;"/>
      <spin switch="+RRestrictions:Max_Asynchronous_Select_Nesting" label="Max_Asynchronous_Select_Nesting" min="1" max="99999" default="0" separator="=&gt;"/>
      <spin switch="+RRestrictions:Max_Entry_Queue_Length" label="Max_Entry_Queue_Length" min="1" max="99999" default="0" separator="=&gt;"/>
      <spin switch="+RRestrictions:Max_Storage_At_Blocking" label="Max_Storage_At_Blocking" min="1" max="99999" default="0" separator="=&gt;"/>
   </category>
   <instances>
      <rule name="calls_in_exception_handlers">
         <instance name="calls_in_exception_handlers">
            <arg name="subprograms" value="[\"this\", \"that\"]" />
         </instance>
      </rule>
      <rule name="goto_statements">
         <instance name="goto_statements" />
         <instance name="Uncond_Goto">
            <arg name="only_unconditional" value="true" />
         </instance>
      </rule>
      <rule name="identifier_prefixes">
         <instance name="Access_Prefix">
            <arg name="access" value="\"_Ptr\"" />
         </instance>
         <instance name="identifier_prefixes">
            <arg name="type" value="\"_T\"" />
         </instance>
      </rule>
      <rule name="redundant_null_statements">
         <instance name="redundant_null_statements" />
      </rule>
      <rule name="too_many_parents">
         <instance name="too_many_parents">
            <arg name="n" value="10" />
         </instance>
      </rule>
   </instances>
</gnatcheck>
>>>program returned status code 3
