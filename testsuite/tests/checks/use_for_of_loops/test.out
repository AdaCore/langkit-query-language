loop2.adb:13:4: rule violation: FOR loop may be replaced by a FOR OF loop
13 |     for I in X.Bounds'Range loop                -- FLAG
   | ____^
   ||
   || ~~~ 1 other lines ~~~
   ||
15 ||    end loop;
   ||____________^

loop3.adb:31:9: rule violation: FOR loop may be replaced by a FOR OF loop
31 |          for I in L.Undep_Content'Range loop      --  FLAG
   | _________^
   ||
   || ~~~ 1 other lines ~~~
   ||
33 ||         end loop;
   ||_________________^

loop3.adb:40:9: rule violation: FOR loop may be replaced by a FOR OF loop
40 |          for I in Const.Dep_Content'Range loop    --  FLAG
   | _________^
   ||
   || ~~~ 1 other lines ~~~
   ||
42 ||         end loop;
   ||_________________^

loop3.adb:59:9: rule violation: FOR loop may be replaced by a FOR OF loop
59 |          for I in L.Dep_Content'Range loop        --  FLAG
   | _________^
   ||
   || ~~~ 1 other lines ~~~
   ||
61 ||         end loop;
   ||_________________^

loop3.adb:72:9: rule violation: FOR loop may be replaced by a FOR OF loop
72 |          for I in L.Undep_Content'Range loop      --  FLAG
   | _________^
   ||
   || ~~~ 1 other lines ~~~
   ||
74 ||         end loop;
   ||_________________^

Patched "loop2.adb":
====================

procedure Loop2 is
   type Arr_T is array (Positive range <>) of Integer;
   type Rec_T is record
      Bounds : Arr_T (1 .. 3);
   end record;

   X, Y : Rec_T := (Bounds => (others => 0));
begin
   for I in X.Bounds'Range loop                -- NOFLAG
      X.Bounds (I) := Y.Bounds (I);
   end loop;

   for I of X.Bounds loop                -- FLAG
      I:= I;
   end loop;
end Loop2;

Patched "loop3.adb":
====================

with Ada.Text_IO; use Ada.Text_IO;

procedure Loop3 is
    type Int_Array is array (Natural range <>) of Integer;
    type Int_List (Length, Other : Natural := 10) is record
        Dep_Content : Int_Array (1 .. Length);
        Other_Content : Int_Array (1 .. Other);
        Undep_Content : Int_Array (1 .. 10);
    end record;

    type Cond_Int_List (Cond : Boolean := True) is record
       Undep_Content : Int_Array (1 .. 10);
       case Cond is
          when True =>
             Content : Int_Array (1 .. 10);
          when False => null;
       end case;
   end record;

    procedure With_In_Out_Param (L : in out Int_List) is
        Copy : Int_List := L;
        Renamed : Int_List renames L;
        Const : constant Int_List := L;
    begin
        for I in L.Dep_Content'Range loop        --  NOFLAG
            Put_Line (L.Dep_Content (I)'Image);
        end loop;
        for I in L.Other_Content'Range loop      --  NOFLAG
            Put_Line (L.Other_Content (I)'Image);
        end loop;
        for I of L.Undep_Content loop      --  FLAG
            Put_Line (I'Image);
        end loop;
        for I in Copy.Dep_Content'Range loop     --  NOFLAG
            Put_Line (Copy.Dep_Content (I)'Image);
        end loop;
        for I in Renamed.Dep_Content'Range loop  --  NOFLAG
            Put_Line (Renamed.Dep_Content (I)'Image);
        end loop;
        for I of Const.Dep_Content loop    --  FLAG
            Put_Line (I'Image);
        end loop;
    end With_In_Out_Param;

    procedure With_Out_Param (L : out Int_List) is
        Copy : Int_List := L;
    begin
        for I in L.Dep_Content'Range loop        --  NOFLAG
            Put_Line (L.Dep_Content (I)'Image);
        end loop;
        for I in Copy.Dep_Content'Range loop     --  NOFLAG
            Put_Line (Copy.Dep_Content (I)'Image);
        end loop;
    end With_Out_Param;

    procedure With_In_Param (L : in Int_List) is
        Copy : Int_List := L;
    begin
        for I of L.Dep_Content loop        --  FLAG
            Put_Line (I'Image);
        end loop;
        for I in Copy.Dep_Content'Range loop     --  NOFLAG
            Put_Line (Copy.Dep_Content (I)'Image);
        end loop;
    end With_In_Param;

    procedure Cond_Component (L : in out Cond_Int_List) is
    begin
        for I in L.Content'Range loop            --  NOFLAG
            Put_Line (L.Content (I)'Image);
        end loop;
        for I of L.Undep_Content loop      --  FLAG
            Put_Line (I'Image);
        end loop;
    end Cond_Component;
begin
    null;
end Loop3;

