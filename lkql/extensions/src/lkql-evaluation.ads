------------------------------------------------------------------------------
--                                                                          --
--                                   LKQL                                   --
--                                                                          --
--                     Copyright (C) 2019-2021, AdaCore                     --
--                                                                          --
-- LKQL is free software;  you can redistribute it and/or modify  it        --
-- under terms of the GNU General Public License  as published by the Free  --
-- Software Foundation;  either version 3,  or (at your option)  any later  --
-- version.   This  software  is distributed in the hope that it  will  be  --
-- useful but  WITHOUT ANY WARRANTY;  without even the implied warranty of  --
-- MERCHANTABILITY  or  FITNESS  FOR  A PARTICULAR PURPOSE.                 --
--                                                                          --
-- As a special  exception  under  Section 7  of  GPL  version 3,  you are  --
-- granted additional  permissions described in the  GCC  Runtime  Library  --
-- Exception, version 3.1, as published by the Free Software Foundation.    --
--                                                                          --
-- You should have received a copy of the GNU General Public License and a  --
-- copy of the GCC Runtime Library Exception along with this program;  see  --
-- the files COPYING3 and COPYING.RUNTIME respectively.  If not, see        --
-- <http://www.gnu.org/licenses/>.                                          --
------------------------------------------------------------------------------

with GNATCOLL.Traces;

with Iters.Maps;
with Iters.Iterators;
with LKQL.Primitives;       use LKQL.Primitives;
with LKQL.Eval_Contexts;    use LKQL.Eval_Contexts;

package LKQL.Evaluation is

   function Eval (Ctx            : Eval_Context;
                  Node           : L.LKQL_Node'Class;
                  Expected_Kind  : Base_Primitive_Kind := No_Kind;
                  Local_Bindings : Environment_Map :=
                    String_Value_Maps.Empty_Map) return Primitive;
   --  Return the result of the AST node's evaluation in the given context.
   --  An Eval_Error will be raised if the node represents an invalid query or
   --  expression.

   function Eval_Default
     (Ctx            : Eval_Context;
      Node           : L.LKQL_Node'Class;
      Default        : Primitive;
      Expected_Kind  : Base_Primitive_Kind := No_Kind;
      Local_Bindings : Environment_Map :=
        String_Value_Maps.Empty_Map) return Primitive
   is
     (if Node.Is_Null then Default
      else Eval (Ctx, Node, Expected_Kind, Local_Bindings));
   --  If 'Node' is null return 'Default', otherwise call 'Eval' with the
   --  given arguments.

   procedure Check_Kind (Ctx           : Eval_Context;
                         Node          : L.LKQL_Node;
                         Expected_Kind : Valid_Primitive_Kind;
                         Value         : Primitive);
   --  Raise an exception and register an error in the evaluation context if
   --  `Value` doesn't have the expected kind.

   Eval_Trace : GNATCOLL.Traces.Trace_Handle
     := GNATCOLL.Traces.Create ("LKQL.EVAL");

private

   -----------------------------------------
   -- Comprehensions environment iterator --
   -----------------------------------------

   package Environment_Iters is new Iters.Iterators (Environment_Map);
   --  Iterator that yields the environments generated by a list
   --  comprehension's generator expressions.

   type Comprehension_Env_Iter is new Environment_Iters.Iterator_Interface with
      record
         Binding_Name    : Symbol_Type;
         --  Name associated with the generator
         Current_Element : Primitive_Options.Option;
         --  Value of the next element to be yielded
         Gen             : Primitive_Iters.Iterator_Access;
         --  Iterator that yields the generator values
         Nested          : Environment_Iters.Resetable_Access;
         --  'Nested' generator that appeared at the right-hand side of the
         --  current generator in the generators list
      end record;

   overriding function Next (Iter   : in out Comprehension_Env_Iter;
                             Result : out Environment_Map) return Boolean;

   overriding function Clone
     (Iter : Comprehension_Env_Iter) return Comprehension_Env_Iter;

   overriding procedure Release (Iter : in out Comprehension_Env_Iter);

   type Comprehension_Env_Iter_Access is access all Comprehension_Env_Iter;

   ------------------------------
   -- Comprehension evaluation --
   ------------------------------

   package Env_Primitive_Maps is
     new Iters.Maps (Environment_Iters, Primitive_Iters);
   --  Mapping from environment values to primitive values

   type Closure is new Env_Primitive_Maps.Map_Funcs.Func with record
      Ctx           : Eval_Context;
      --  Copy of the evaluation context at call site
      Body_Expr     : L.Expr;
      --  Body of the closure
   end record;

   overriding function Evaluate (Self    : in out Closure;
                                 Element : Environment_Map) return Primitive;

   overriding function Clone (Self : Closure) return Closure;

   overriding procedure Release (Self : in out Closure);

   function Make_Closure (Ctx            : Eval_Context;
                          Body_Expr      : L.Expr)
                          return Closure;

   type Comprehension_Guard_Filter is new Environment_Iters.Predicates.Func
   with record
      Ctx   : Eval_Context;
      Guard : L.Expr;
   end record;
   --  Func that, given an environment, computes the value of a list
   --  comprehension's guard expression in the context of this environment.

   function Evaluate (Self : in out Comprehension_Guard_Filter;
                      Element : Environment_Map) return Boolean;

   function Clone
     (Self : Comprehension_Guard_Filter) return Comprehension_Guard_Filter;

   function Make_Guard_Filter (Ctx : Eval_Context;
                               Guard : L.Expr)
                               return Comprehension_Guard_Filter;

end LKQL.Evaluation;
