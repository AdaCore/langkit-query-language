@stub_check(category="Style", subcategory="Programming Practice")
fun restrictions() =
    |" Flags violations of Ada predefined and GNAT-specific restrictions
    |" according to the rule parameter(s) specified.
    |"
    |" ``gnatcheck`` does not check Ada or GNAT restrictions itself, instead
    |" it compiles an argument source with a configuration file that
    |" defines restrictions of interest,
    |" analyses the style warnings generated by the GNAT compiler and
    |" includes the information about restriction violations detected into
    |" the ``gnatcheck`` messages.
    |"
    |" This rule allows parametric rule exemptions, the parameters
    |" that are allowed in the definition of exemption sections are
    |" the names of the restrictions except for the case when a restriction
    |" requires a non-numeric parameter, in this case the parameter should be
    |" the name of the restriction with the parameter, as it is given for the
    |" rule.
    |"
    |" The rule should have a parameter, the format of the rule parameter is the
    |" same as the parameter of
    |" the pragma ``Restrictions`` or ``Restriction_Warnings``.
    |"
    |" .. note::
    |"    In LKQL rule options files, this rule should have an ``Arg`` named parameter
    |"    associated to a list of strings. Each element of this list should be a
    |"    restriction parameter, for example:
    |"
    |"    .. code-block:: lkql
    |"
    |"       val rules = @{
    |"          Restrictions: {Arg: ["Max_Task_Entries=>2", "No_Access_Subprograms"]}
    |"       }
    |"
    |" .. attention::
    |"    It is forbidden to provide the same restriction name in multiple instances
    |"    of the ``Restrictions`` rule. Meaning that such configuration is invalid and
    |"    will cause GNATcheck to issue an error message:
    |"
    |"    .. code-block:: lkql
    |"
    |"       val rules = @{
    |"          Restrictions: [
    |"             {Arg: ["Max_Task_Entries=>2", "No_Access_Subprograms"]},
    |"             {Arg: ["Max_Task_Entries=>6"], instance_name: "Another_Instance"}
    |"                   # ^^^^^^^^^^^^^^^^ The "Max_Task_Entries" name is provided in multiple instances of "Restrictions"
    |"          ]
    |"       }
    |"
    |" If your code contains pragmas ``Warnings`` with parameter ``Off``, this may
    |" result in false negatives for this rule, because the corresponding warnings
    |" generated during compilation will be suppressed. The workaround is to
    |" use for ``gnatcheck`` call a configuration file that
    |" contains ``pragma Ignore_Pragma (Warnings);``.
    |"
    |" .. warning:: Note, that some restriction checks cannot be performed by gnatcheck
    |"    because they are either dynamic or require information from the code
    |"    generation phase. For such restrictions gnatcheck generates the
    |"    corresponding warnings and disables the ``Restrictions`` rules.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 1,6
    |"
    |"    with Ada.Finalization;      --  FLAG (+RRestrictions:No_Dependence=>Ada.Finalization)
    |"    procedure Proc is
    |"       type Access_Integer is access Integer;
    |"       Var : Access_Integer;
    |"    begin
    |"       Var := new Integer'(1);  --  FLAG (+RRestrictions:No_Allocators)
    |"    end Proc;
    ()
