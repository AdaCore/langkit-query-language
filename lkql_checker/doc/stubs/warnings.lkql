@stub_check(category="Style", subcategory="Programming Practice")
fun warnings() =
    |" Flags construct that would result in issuing a GNAT warning if an argument
    |" source would be compiled with warning options corresponding to the rule
    |" parameter(s) specified. For GNAT warnings and corresponding warning control
    |" options see the `Warning Message Control <https://docs.adacore.com/gnat_ugn-docs/html/gnat_ugn/gnat_ugn/building_executable_programs_with_gnat.html#warning-message-control>`_ section of the GNAT User's Guide.
    |"
    |" ``gnatcheck`` does not check itself if this or that construct would result
    |" in issuing a warning, instead it compiles the project sources with the
    |" needed warning control compilation options combined with the ``-gnatc``
    |" switch, analyses the warnings generated by GNAT and adds the relevant
    |" information to the ``gnatcheck`` messages.
    |"
    |" The rule should have a parameter, the format of the parameter should
    |" be a valid ``static_string_expression`` listing GNAT warnings switches
    |" (the letter following ``-gnatw`` in the `Warning Message Control` section
    |" mentioned above).
    |"
    |" .. note::
    |"    In LKQL rule options files, this rule should have an ``Arg`` named parameter
    |"    associated to a string corresponding to the wanted GNAT warning switches.
    |"    Example:
    |"
    |"    .. code-block:: lkql
    |"
    |"       val rules = @{ Warnings: {Arg: "u"} }
    |"
    |"    You can also use the shortcut argument format by associating a simple string
    |"    to the rule name:
    |"
    |"    .. code-block:: lkql
    |"
    |"       val rules = @{
    |"          Warnings: "u"
    |"       }
    |"
    |" .. attention::
    |"    It is forbidden to provide the same parameter in multiple instance of the
    |"    ``Warnings`` rule. Meaning that such configuration is invalid and will cause
    |"    GNATcheck to issue an error message:
    |"
    |"    .. code-block:: lkql
    |"
    |"       val rules = @{
    |"          Warnings: [
    |"             {Arg: "u"},
    |"             {Arg: "u", instance_name: "Another_Instance"}
    |"                  # ^-- The "u" parameter is provided in multiple instances of "Warnings"
    |"          ]
    |"       }
    |"
    |" Note that ``s`` and ``e`` parameters, corresponding respectively to GNAT
    |" ``-gnatws`` and ``-gnatwe`` options, are not allowed for the ``Warnings``
    |" GNATcheck rule since they may have side effects on other rules.
    |"
    |" Note also that some GNAT warnings are only emitted when generating code,
    |" these warnings will not be generated by this rule. In other words, this
    |" rule will only generate warnings that are enabled when using ``-gnatc``.
    |"
    |" If your code contains pragmas ``Warnings`` with parameter ``Off``, this may
    |" result in false negatives for this rule, because the corresponding warnings
    |" generated during compilation will be suppressed. The workaround is to
    |" use a configuration file that contains ``pragma Ignore_Pragma (Warnings);``
    |" when running ``gnatcheck``.
    |"
    |" This rule allows parametric rule exemptions, the parameters
    |" that are allowed in the definition of exemption sections are the
    |" same as the parameters of the rule itself.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 1,4
    |"
    |"    with Ada.Text_IO;                        --  FLAG (+RWarnings:u)
    |"    procedure Proc (I : in out Integer) is
    |"    begin
    |"       pragma Unrecognized;                  --  FLAG (+RWarnings:g)
    |"
    |"       I := I + 1;
    |"    end Proc;
    ()
