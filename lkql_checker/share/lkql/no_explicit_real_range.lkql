# Flag a declaration of a floating point type or a decimal fixed point type,
# including types derived from them if no explicit range specification is
# provided for the type.

fun is_real_without_range(decl) =
    decl is
        ((TypeDecl
         when decl.f_type_def is
              (RealTypeDef(f_range: null) |
              d@DerivedTypeDef
              when not (from d.f_subtype_indication.f_constraint
                        select first RangeSpec)
               and is_real_without_range(decl.p_base_type())))
      | SubtypeDecl
         when not (from decl.f_subtype.f_constraint select first RangeSpec)
          and is_real_without_range(decl.p_base_subtype()))

@check(message="real type with no range definition",
       category="Style", subcategory="Portability")
fun no_explicit_real_range(node) =
    node is TypeDecl when node.p_is_real_type() and is_real_without_range(node)
