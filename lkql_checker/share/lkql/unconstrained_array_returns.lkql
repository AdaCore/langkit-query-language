import stdlib

fun unconstrained_array_type(type, except_string) =
    if type is SubtypeDecl
    then type.f_subtype.f_constraint is not Constraint and
         unconstrained_array_type(type.p_canonical_type(), except_string)
    else if type is TypeDecl(f_type_def: DerivedTypeDef)
    then type.f_type_def.f_subtype_indication.f_constraint is not Constraint and
         unconstrained_array_type(type.p_base_type(), except_string)
    else type is TypeDecl(p_is_array_type(): true,
                          f_type_def: ArrayTypeDef(f_indices:
                                                     UnconstrainedArrayIndices))
         when not (except_string and
                   type.p_root_type().p_fully_qualified_name()
                   == "Standard.String")

@check(message="function returns unconstrained array",
       follow_generic_instantiations=true, category="Feature")
fun unconstrained_array_returns(node, except_string = false) =
    |" Flag each function returning an unconstrained array. Function declarations,
    |" function bodies (and body stubs) having no separate specifications,
    |" and generic function instantiations are flagged.
    |" Function calls and function renamings are
    |" not flagged.
    |"
    |" Generic function declarations, and function declarations in generic
    |" packages, are not flagged.  Instead, this rule flags the results of
    |" generic instantiations (that is, expanded specification and expanded
    |" body corresponding to an instantiation).
    |"
    |" This rule has the following (optional) parameter for the ``+R`` option and
    |" for LKQL rule options files:
    |"
    |" *Except_String: bool*
    |"    If ``true``, do not flag functions that return the predefined ``String`` type
    |"    or a type derived from it, directly or indirectly.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 4
    |"
    |"    type Arr is array (Integer range <>) of Integer;
    |"    subtype Arr_S is Arr (1 .. 10);
    |"
    |"    function F1 (I : Integer) return Arr;      --  FLAG
    |"    function F2 (I : Integer) return Arr_S;
    node is (AbstractSubpDecl | SubpDecl | GenericSubpInternal |
             BaseSubpBody(p_previous_part(): null) |
             SubpBodyStub(p_previous_part(): null))

    when (not stdlib.in_generic_template(node))

     and node.f_subp_spec is SubpSpec(f_subp_returns:
         TypeExpr(p_designated_type_decl():
                  t@BaseTypeDecl
                  when unconstrained_array_type(t, except_string)))
