# Flag each function returning an unconstrained array. Function declarations,
# function bodies (and body stubs) having no separate specifications, and
# generic function instantiations are flagged. Function calls and function
# renamings are not flagged.
# Generic function declarations, and function declarations in generic packages,
# are not flagged. Instead, this rule flags the results of generic
# instantiations (that is, expanded specification and expanded body
# corresponding to an instantiation).
# This rule has the parameter Except_String: Do not flag functions that return
# the predefined String type or a type derived from it, directly or indirectly.

import stdlib

@check(message="function returns unconstrained array",
       follow_generic_instantiations=true, category="Feature")
fun unconstrained_array_returns(node, except_string = false) =
    {
        fun is_unconstrained_array(type_decl) =
            |" Get whether the provided TypeDecl is declaring an unconstrained array type.
            |" If `type_decl` designate the "standard.string" type and `except_string` is
            |" `true`, the result of this function is `false`.
            type_decl is TypeDecl(
                p_is_array_type(): true,
                f_type_def: ArrayTypeDef(f_indices: UnconstrainedArrayIndices)
            ) when (
                if except_string
                then type_decl.p_fully_qualified_name().to_lower_case != "standard.string"
            );

        node is (
            AbstractSubpDecl |
            SubpDecl |
            GenericSubpInternal |
            BaseSubpBody(p_previous_part(): null) |
            SubpBodyStub(p_previous_part(): null)
        )
        and (not stdlib.in_generic_template(node))
        and node.f_subp_spec is SubpSpec(
            f_subp_returns: TypeExpr(
                p_is_definite_subtype(): false,
                p_designated_type_decl(): t@BaseTypeDecl when is_unconstrained_array(t.p_root_type())
            )
        )
    }
