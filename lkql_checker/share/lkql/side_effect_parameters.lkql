# Flag subprogram calls and generic instantiations that have in their
# parameters at least two calls to the same function, taking into account
# renamings.
# `functions` is a list of fully qualified function names to check.

import stdlib

fun check_list(l, functions) =
    [f for f in functions if {
        val func = f.to_lower_case;
        # Find at least two calls to the same function
        [n for n in (from [p.actual for p in l].to_list select BaseId)
         if n.p_referenced_decl() is decl@BasicDecl(p_is_subprogram() is true)
          and stdlib.ultimate_subprogram_alias(decl).
              p_canonical_fully_qualified_name() == func]?[2] != ()
    }]

@check(message="call with side effects",
       category="Style", subcategory="Programming Practice")
fun side_effect_parameters(node, functions=[]) =
    node is GenericInstantiation
            when check_list(node.p_inst_params(), functions)
    or
            AssocList(parent is n@Name(p_is_call() is true))
            when check_list(n.p_call_params(), functions)
