import stdlib

fun get_first_id(node) =
    |" Get the first Identifier in the given ``node`` which is, either the
    |" left part of a RelationOp, or the expression if a MembershipExpr
    match (from node select first (RelationOp(f_left: Identifier) |
                                   MembershipExpr(f_expr: Identifier)))
    | r@RelationOp     => r.f_left
    | m@MembershipExpr => m.f_expr

fun check_expr(expr, id, short_circuit) =
    match expr
    # Strip parenthesis
    | ParenExpr                    => check_expr(expr.f_expr, id, short_circuit)

    # Check both "or" operands
    | BinOp(
        f_op: op@(OpOr | OpOrElse when short_circuit)
              when stdlib.is_predefined_op(op)
    ) =>
        check_expr(expr.f_left, id, short_circuit) and
        check_expr(expr.f_right, id, short_circuit)

    # Allow X >= E1 and X <= E2
    | BinOp(
        f_op: op@(OpAnd | OpAndThen when short_circuit)
              when stdlib.is_predefined_op(op)
    ) =>
        expr.f_left is RelationOp(
            f_op: gte@OpGte,
            f_left: Identifier(p_name_matches(id): true)) when
        expr.f_right is RelationOp(
            f_op: lte@OpLte,
            f_left: Identifier(p_name_matches(id): true)) when
        stdlib.is_predefined_op(gte) and
        stdlib.is_predefined_op(lte)

    # Allow X = C
    | RelationOp(f_op: op@OpEq)  =>
        expr.f_left is Name(p_name_matches(id): true) and
        stdlib.is_predefined_op(op)

    # Allow X in ...
    | MembershipExpr(f_op: OpIn) => expr.f_expr.p_name_matches(id)

    # Reject anything else
    | *                            => false

fun to_membership_exprs(node) =
    |" Used by ``membership_equivalent`` to compute the membership format
    |" of an expression. This function returns a list containing all
    |" required parts for the created membership expression.
    match node
    | ParenExpr => to_membership_exprs(node.f_expr)
    | BinOp(f_op: (OpOr | OpOrElse)) =>
        to_membership_exprs(node.f_left) & to_membership_exprs(node.f_right)
    | BinOp(f_op: (OpAnd | OpAndThen)) =>
        [new BinOp(
            f_left=node.f_left.f_right,
            f_op= new OpDoubleDot(),
            f_right=node.f_right.f_right
        )]
    | RelationOp(f_op: OpEq) => [node.f_right]
    | MembershipExpr => node.f_membership_exprs.children

fun membership_equivalent(bin_op) =
    |" Get the membership equivalent of a BinOp ``bin_op`` which has been
    |" flagged by the "use_memberships" rule.
    new MembershipExpr(
        f_expr=get_first_id(bin_op),
        f_op=new OpIn(),
        f_membership_exprs=new ExprAlternativesList(to_membership_exprs(bin_op))
    )

@check(message="expression may be replaced by a membership test",
       category="Style", subcategory="Programming Practice",
       auto_fix=(n, ctx) => ctx.replace(n, membership_equivalent(n)))
fun use_memberships(node, short_circuit = false) =
    |" Flag expressions that could be rewritten as membership tests. Only expressions
    |" that are not subexpressions of other expressions are flagged. An expression
    |" is considered to be replaceable with an equivalent membership test if it is
    |" a logical expression consisting of a call to one or more predefined ``or``
    |" operation(s), each relation that is an operand of the ``or`` expression is
    |" a comparison of the same variable of one of following forms:
    |"
    |" * a call to a predefined ``=`` operator, the variable is the left operand
    |"   of this call;
    |" * a membership test applied to this variable;
    |" * a range test of the form ``Var >= E1 and Var <= E2`` where ``Var`` is
    |"   the variable in question and ``>=``, ``and`` and ``<=`` are predefined
    |"   operators;
    |"
    |" This rule has the following (optional) parameter for the ``+R`` option and
    |" for LKQL rule options files:
    |"
    |" *Short_Circuit: bool*
    |"   Whether to consider the short circuit ``and then`` and ``or else`` operations
    |"   along with the predefined logical ``and`` and ``or`` operators.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 2,8
    |"
    |"    begin
    |"       Bool1 := A = 100        -- FLAG (if Short_Circuit is true)
    |"               or (A >=  1 and then A <= B);
    |"
    |"       Bool2 := A = 100        --  NO FLAG
    |"               or B in S;
    |"
    |"       Bool3 := A = 1          --  FLAG
    |"               or
    |"                A = B
    |"               or
    |"                A = B + A;
    node is BinOp(
        parent: not Expr,
        f_op: op@(OpOr | OpAnd | (OpOrElse | OpAndThen) when short_circuit)
    ) when stdlib.is_predefined_op(op)

    # Find a first variable used as LHS (id) and pass it to check_expr
    and if not get_first_id(node) is null
        then check_expr(node, get_first_id(node), short_circuit)
        else false
