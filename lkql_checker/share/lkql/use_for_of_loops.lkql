# Flag for ... in loops which could be replaced by a for ... of loop,
# that is, where the loop index is used only for indexing a single variable
# on a one dimension array.
#
# This rule recognizes loops of the form:
#      for Index in <array>'Range loop
#         [all references to Index are of the form <array> (Index)]
#      end loop;
#
# This rule has one parameter N: specifies the minimal number of references
# that will trigger the detection (defaults to 1).

import stdlib

fun num_indices(type) =
    match type.f_type_def
    | def@ArrayTypeDef => (match def.f_indices
        | a@ConstrainedArrayIndices   => a.f_list.children_count
        | a@UnconstrainedArrayIndices => a.f_types.children_count)
    | DerivedTypeDef => num_indices(type.p_base_type())

fun is_same_object(a, b) =
    |" Return whether the two given expressions refer to the same object
    |" This conservatively returns false for paths that are too complex.
{
    val def_a = a.p_referenced_defining_name();
    val def_b = b.p_referenced_defining_name();
    (def_a == def_b) and match def_a.p_basic_decl()
    | ParamSpec => true
    | ObjectDecl => true
    | ComponentDecl =>
        (a is DottedName)
        and (b is DottedName)
        and is_same_object(a.f_prefix, b.f_prefix)
    | * => false
}

fun replace_in_by_of(for_stmt, ctx) =
    |" Replace the "for_stmt" with a "in" type by a loop statement with a "of"
    |" spec. All references to the for <index> variable should be inside array
    |" accesses, those are replaced by simple <index> references.
    {
        val spec = for_stmt.f_spec;
        val ids = (
            from for_stmt.f_stmts
            select Identifier(p_name_matches(spec.f_var_decl.f_id.f_name): true)
        );
        ids.reduce(
            (ctx, id) => ctx.replace(id.parent.parent.parent, id),
            ctx
        )
        .replace(spec.f_loop_type, new IterTypeOf())
        .replace(spec.f_iter_expr, spec.f_iter_expr.f_prefix)
    }

@check(message="FOR loop may be replaced by a FOR OF loop",
       category="Style", subcategory="Programming Practice",
       auto_fix=replace_in_by_of)
fun use_for_of_loops(node, n : int = 1, ignore = false) =
    # Look for "for <index> in <array>'Range" loops
    node is ForLoopStmt(
        f_spec: spec@ForLoopSpec(
            f_has_reverse: not ReversePresent,
            f_loop_type: IterTypeIn,
            f_iter_expr: attr@AttributeRef))
    when attr.f_attribute.p_name_is("Range")
     # where <array> is a one dimension array.
     and attr.f_prefix.p_expression_type() is
         iter_type@TypeDecl(p_is_array_type(): true)
     when num_indices(iter_type) == 1
      and {
         val ids = (from node.f_stmts select
                    Identifier(p_name_matches(spec.f_var_decl.f_id.f_name): true));

         # Now check that all references to <index> are of the form <array>(<index>)
         not stdlib.any([
                f for f in ids
                if match f.parent
                   | ParamAssoc(parent: AssocList(parent: call@CallExpr)) =>
                         not is_same_object(call.f_name, attr.f_prefix)
                   | * => true
             ])
         # Finally check that we have at least N references to <index>
         and ids.length >= n
      }

     # and <array> is not a mutable discriminant-dependent component
     and attr.f_prefix.p_referenced_decl() is comp@ComponentDecl
     when (match attr.f_prefix
           | d@DottedName => d.f_prefix.p_referenced_decl().p_is_constant_object()
           | o@* => o.p_referenced_decl().p_is_constant_object())
       or not stdlib.depends_on_mutable_discriminant(comp)
