import stdlib

fun num_indices(type) =
    match type.f_type_def
    | def@ArrayTypeDef => (match def.f_indices
        | a@ConstrainedArrayIndices   => a.f_list.children_count
        | a@UnconstrainedArrayIndices => a.f_types.children_count)
    | DerivedTypeDef => num_indices(type.p_base_type())

fun is_same_object(a, b) =
    |" Return whether the two given expressions refer to the same object
    |" This conservatively returns false for paths that are too complex.
{
    val def_a = a.p_referenced_defining_name();
    val def_b = b.p_referenced_defining_name();
    (def_a == def_b) and match def_a.p_basic_decl()
    | ParamSpec => true
    | ObjectDecl => true
    | ComponentDecl =>
        (a is DottedName) and (b is DottedName)
        and is_same_object(a.f_prefix, b.f_prefix)
    | * => false
}

@check(message="FOR loop may be replaced by a FOR OF loop",
       category="Style", subcategory="Programming Practice")
fun use_for_of_loops(node, n : int = 1, ignore = false) =
    |" Flag ``for ... in`` loops which could be replaced by a ``for ... of`` loop,
    |" that is, where the loop index is used only for indexing a single object
    |" on a one dimension array.
    |"
    |" The rule detects the following code patterns:
    |"
    |" .. code-block:: ada
    |"
    |"    for Index in <array>'Range loop
    |"       --  where <array> is an array object
    |"       [all references to Index are of the form <array> (Index)]
    |"    end loop;
    |"
    |" This rule has the following (optional) parameter for the ``+R`` option and
    |" for LKQL rule options files:
    |"
    |" *N: int*
    |"    Non-negative integer, indicates the minimal number of references of the form
    |"    ``<array> (Index)`` in the loop to make the loop to be flagged.
    |"
    |" If no parameter is used for the rule, this corresponds to the parameter value 1.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 3
    |"
    |"    for J in Arr'Range loop    --  FLAG
    |"       Sum := Sum + Arr (J);
    |"    end loop;
    |"
    |"    for K in Left'Range loop
    |"       Res := Left (J) + Right (J);
    |"    end loop;
    # Look for "for <index> in <array>'Range" loops
    node is ForLoopStmt(
        f_spec: spec@ForLoopSpec(
            f_has_reverse: not ReversePresent,
            f_loop_type: IterTypeIn,
            f_iter_expr: attr@AttributeRef))
    when attr.f_attribute.p_name_is("Range")
     # where <array> is a one dimension array.
     and attr.f_prefix.p_expression_type() is
         iter_type@TypeDecl(p_is_array_type(): true)
     when num_indices(iter_type) == 1
      and {
         val ids = (from node.f_stmts select
                    Identifier(p_name_matches(spec.f_var_decl.f_id.f_name): true));

         # Now check that all references to <index> are of the form <array>(<index>)
         not [f for f in ids
              if match f.parent
                 | ParamAssoc(parent: AssocList(parent: call@CallExpr)) =>
                     not is_same_object(call.f_name, attr.f_prefix)
                 | * => true]
         # Finally check that we have at least N references to <index>
         and ids.length >= n
      }

     # and <array> is not a mutable discriminant-dependent component
     and attr.f_prefix.p_referenced_decl() is comp@ComponentDecl
     when (match attr.f_prefix
           | d@DottedName => d.f_prefix.p_referenced_decl().p_is_constant_object()
           | o@* => o.p_referenced_decl().p_is_constant_object())
       or not stdlib.depends_on_mutable_discriminant(comp)
