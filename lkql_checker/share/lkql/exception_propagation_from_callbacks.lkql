# Flag each 'Address or 'Access reference to a subprogram whose body may
# propagate an exception, when this reference is part of one the
# given subprogram calls and formal parameter name as specified by the
# parameters.
# For LKQL: Callbacks is a list of
# ("fully qualified subprogram name", "parameter name").
# For gnatcheck: each parameter is of the form
# "fully.qualified.subprogram.parameter_name".
# A subprogram is considered as not propagating if:
# - it has an exception handler with a "when others" choice;
# - no exception handler contains a raise statement, nor any call to
#   Ada.Exception.Raise_Exception or Ada.Exception.Reraise_Occurrence.

import stdlib

fun get_uninstantiated_subp(subp) =
   |" Works around an inconsistency in LAL's API wrt. generic subprograms
   |" TODO: Fix when eng/libadalang/libadalang/-/issues/1127 is fixed
    match subp
    | GenericSubpInstantiation(f_generic_subp_name: s) =>
        s.p_referenced_decl().p_get_uninstantiated_node()
    | AdaNode => subp.p_get_uninstantiated_node()
    | * => null


@check(help="callback may propagate exceptions (global analysis required)",
       message="callback may propagate exceptions",
       category="Style", subcategory="Programming Practice")
fun exception_propagation_from_callbacks(node, callbacks=[]) =
   # Select 'Access or 'Address on subprograms in a subprogram call
   node is AttributeRef(
       f_attribute: id@Identifier
           when id.p_name_is("Address") or id.p_name_is("Access"))
    when node.f_prefix.p_referenced_decl() is
         subp@(SubpBody | SubpDecl | SubpBodyStub | GenericSubpInstantiation)
     when (from node through parent
           select first CallExpr(p_is_call(): true)) is call@CallExpr
      when {
          val uninst_subp_name = get_uninstantiated_subp(
              call.f_name.p_referenced_decl()
          )?.p_canonical_fully_qualified_name?();

          val subp_name = call.f_name.p_referenced_decl()
                              ?.p_canonical_fully_qualified_name?();

          val params = [
              c[2] for c in callbacks
              if c[1] == uninst_subp_name
                 or c[1] == subp_name
          ].to_list;

          params.length != 0 and
          [p for p in call.p_call_params()
           if p.actual == node and [param for param in params
                                    if p.param.p_name_is(param)]] and
          stdlib.propagate_exceptions(
              match subp
              | SubpBody                 => subp
              | GenericSubpInstantiation =>
                  subp.p_designated_subp().p_body_part_for_decl()
              | *                        => subp.p_body_part_for_decl())
      }
