import stdlib

# Return true if `id` matches `param` (the ParamDecl of `name`), taking
# renamings into account.
fun param_matches(id, param, name, ignore_comp) = {
   val decl = id.p_referenced_decl();

   (match decl
    | ObjectDecl(f_renaming_clause: r@RenamingClause) =>
      stdlib.ultimate_alias(
        r.f_renamed_object,
        strip_component=not ignore_comp
      ) == param
     | * => decl == param and id.p_name_matches(name))
   and not (ignore_comp and id.parent is (DottedName | CallExpr))
}

# Return true if the list of stmts s contains any assignment to name as
# defined above, which happens to match the p_is_write_reference() property.
# param is the ParamDecl of name.
fun check_stmts(param, name, s, ignore_comp) =
    s is *(any children: id@Name
           when id.p_is_write_reference()
            and param_matches(id, param, name, ignore_comp))

# Return true if the exception handler h contains a raise statement, a call
# to a No_Return procedure or an assignment to param as defined above.
fun check_exception_handler(param, name, h, ignore_comp) =
    (h.f_stmts is *(any children: RaiseStmt |
                    c@CallStmt when c.f_call.p_is_call()
                                and c.f_call.p_referenced_decl()
                                     .p_has_aspect("No_Return"))) or
    check_stmts(param, name, h, ignore_comp)

@unit_check(help="OUT parameters do not get values in subprogram bodies",
            rule_name="Unassigned_OUT_Parameters", category="Feature")
fun unassigned_out_parameters(unit, ignore_component_assignments=false) =
    |" Flag subprograms' ``out`` parameters that are not assigned.
    |"
    |" An ``out`` parameter is flagged if neither the *declarative part* nor the
    |" *sequence of statements* of the subprogram body (before the subprogram body's
    |" exception part, if any) contain an assignment to the parameter.
    |"
    |" An ``out`` parameter is flagged if an *exception handler* contains neither an
    |" assignment to the parameter nor a raise statement nor a call to a procedure
    |" marked No_Return.
    |"
    |" Bodies of generic subprograms are also considered.
    |"
    |" The following are treated as assignments to an ``out`` parameter:
    |"
    |" * an assignment statement, with the parameter or some component as the target
    |" * passing the parameter (or one of its components) as an ``out`` or
    |"   ``in out`` parameter.
    |"
    |" The rule has an optional parameter for the ``+R`` option and for LKQL rule
    |" options files:
    |"
    |" *Ignore_Component_Assignments: bool*
    |"    Whether to ignore assignments to subcomponents of an ``out`` parameter when
    |"    detecting if the parameter is assigned.
    |"
    |" .. note:: An assignment to a subprogram's parameter can occur in the subprogram
    |"    body's *declarative part* in the presence of a nested subprogram declaration
    |"    which itself contains an assignment to the enclosing subprogram's parameter.
    |"
    |" .. warning:: This rule only detects the described cases of unassigned variables
    |"    and doesn't provide a full guarantee that there is no uninitialized access.
    |"    It is only a partial replacement for the validity checks provided by
    |"    CodePeer.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 1
    |"
    |"    procedure Proc                --  FLAG
    |"      (I    : Integer;
    |"       Out1 : out Integer;
    |"       Out2 : out Integer)
    |"    is
    |"    begin
    |"       Out1 := I + 1;
    |"    end Proc;
    [
        {message: "unassigned OUT parameter " & n.f_name.text, loc: n}
        for n in from unit.root
        # Look for out parameters of subprogram bodies only
        select node@DefiningName(parent: DefiningNameList(parent:
                    decl@ParamSpec(f_mode: ModeOut,
                                   parent: ParamSpecList(parent: Params(parent:
                                   SubpSpec(parent: body@SubpBody))))))
        when not (
            check_stmts(decl, node.f_name, body.f_decls,
                        ignore_component_assignments)
            or check_stmts(decl, node.f_name, body.f_stmts.f_stmts,
                           ignore_component_assignments)
        ) or stdlib.any([
            m for m in (from body.f_stmts.f_exceptions select h@ExceptionHandler
            when not check_exception_handler(decl, node.f_name, h,
                                             ignore_component_assignments))
        ])
    ]
