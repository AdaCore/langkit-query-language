# Flag procedures' out parameters that are not assigned.
# An out parameter is flagged if the sequence of statements of the procedure
# body (before the procedure body's exception part, if any) contains no
# assignment to the parameter.
# An out parameter is also flagged if an exception handler contains neither an
# assignment to the parameter nor a raise statement nor a call to a procedure
# marked No_Return.
# Bodies of generic procedures are also considered.
#
# The following are treated as assignments to an out parameter:
# - an assignment statement, with the parameter or some component as the target
# - passing the parameter (or one of its components) as an out or in out
#   parameter.
#
# This rule has an optional parameter:
# - Ignore_Component_Assignments: ignore component assignments when determining
#   whether a composite parameter is initialized, only consider full
#   assignments.

import stdlib

# Return true if `id` matches `param` (the ParamDecl of `name`), taking
# renamings into account.
fun param_matches(id, param, name, ignore_comp) = {
   val decl = id.p_referenced_decl();

   (if decl is ObjectDecl(f_renaming_clause is r@RenamingClause)
    then stdlib.ultimate_alias(r.f_renamed_object, strip_component=not ignore_comp)
         == param
    else decl == param and id.p_name_matches(name)) and
   not (ignore_comp and id.parent is DottedName or CallExpr)
}

# Return true if the list of stmts s contains any assignment to name as
# defined above, which happens to match the p_is_write_reference() property.
# param is the ParamDecl of name.
fun check_stmts(param, name, s, ignore_comp) =
    s is *(any children is id@Name
           when id.p_is_write_reference()
            and param_matches(id, param, name, ignore_comp))

# Return true if the exception handler h contains a raise statement, a call
# to a No_Return procedure or an assignment to param as defined above.
fun check_exception_handler(param, name, h, ignore_comp) =
    (h.f_stmts is *(any children is RaiseStmt or
                    c@CallStmt when c.f_call.p_is_call()
                                and c.f_call.p_referenced_decl().
                                    p_has_aspect("No_Return"))) or
    check_stmts(param, name, h, ignore_comp)

fun enclosing_body_stmts(node) =
   match stdlib.enclosing_body(node)
   | null         => null
   | NullSubpDecl => null
   | p@*          => p.f_stmts

@unit_check(help="OUT parameters do not get values in procedure bodies",
            category="Feature")
fun unassigned_out_parameters(unit, ignore_component_assignments=false) = [
    {message: "unassigned OUT parameter " & n.f_name.text, loc: n}
    for n in from unit.root
    # Look for out parameters of subprogram bodies only
    select node@DefiningName(parent is DefiningNameList(parent is
                ParamSpec(f_mode is ModeOut,
                          parent is ParamSpecList(parent is Params(parent is
                          SubpSpec(parent is SubpBody))))))
    when {
        val f = enclosing_body_stmts(node);
        val decl = node.p_basic_decl();

        f and not (
        check_stmts(decl, node.f_name, f.f_stmts, ignore_component_assignments)
        and not [m for m in (from f.f_exceptions select h@ExceptionHandler
             when not check_exception_handler(decl, node.f_name, h,
                                              ignore_component_assignments))
            ])
    }]
