import metrics

@unit_check(help="essential complexity", execution_cost=3, category="Metrics")
fun metrics_essential_complexity(unit, n : int = 3) =
    |" The ``Metrics_Essential_Complexity`` rule takes a positive integer as
    |" upper bound.  A program unit that is an executable body exceeding this limit will be flagged.
    |"
    |" The Ada essential complexity metric is a McCabe cyclomatic complexity metric counted
    |" for the code that is reduced by excluding all the pure structural Ada control statements.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 2
    |"
    |"    --  if the rule parameter is 3 or less
    |"    procedure Proc (I : in out Integer; S : String) is   --  FLAG
    |"    begin
    |"       if I in 1 .. 10 then
    |"          for J in S'Range loop
    |"
    |"             if S (J) = ' ' then
    |"                if I > 10 then
    |"                   exit;
    |"                else
    |"                   I := 10;
    |"                end if;
    |"             end if;
    |"
    |"             I := I + Character'Pos (S (J));
    |"          end loop;
    |"       end if;
    |"    end Proc;
    [
        { message: "essential complexity is too high: " & img(t[2]), loc: t[1] }
        for t in [(body, metrics.essential_complexity(body))
                  for body in (from unit.root select BaseSubpBody)]
        if t[2] > n
    ]
