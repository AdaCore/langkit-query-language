# Flag any statement, declaration or representation clause if the code
# line where this construct starts contains some other Ada code symbols
# preceding or following this construct. The following constructs are not
# flagged:
# - enumeration literal specification;
# - parameter specifications;
# - discriminant specifications;
# - loop parameter specification;
# - entry index specification;

import stdlib

@check(message="more than one construct on the same line", remediation="EASY",
       category="Style", subcategory="Readability")
fun one_construct_per_line(node) =
    # Flag any statement, declaration or representation clause
    node is (Stmt or BasicDecl or AttributeDefClause or
             EnumRepClause or RecordRepClause or AtClause)
    # except for enum literal, param spec, discriminant spec
    when (not node is (EnumLiteralDecl or ParamSpec or DiscriminantSpec or
                       # or loop param or entry index.
                       ForLoopVarDecl or EntryIndexSpec or
                       # Also ignore anonymous or nested constructs
                       # generating false positives.
                       SingleTaskTypeDecl or AnonymousTypeDecl or
                       LabelDecl or GenericSubpInternal or
                       ConcreteFormalSubpDecl or
                       ExtendedReturnStmtObjectDecl or
                       NamedStmtDecl))
     and (node.token_end().end_line ==
          stdlib.next_non_blank_token_line(node.token_end())
          or node.token_start().start_line ==
             stdlib.previous_non_blank_token_line(node.token_start()))
