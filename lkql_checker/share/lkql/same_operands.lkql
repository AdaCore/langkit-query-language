import stdlib

fun reduce_op(bin_op) =
    match bin_op.f_op
    | OpDiv                     => new IntLiteral("1")
    | (OpMinus | OpMod | OpRem) => new IntLiteral("0")
    | (OpEq | OpGte | OpLte)    => new Identifier("True")
    | (OpNeq | OpGt | OpLt)     => new Identifier("False")

fun replace_op(bin_op, ctx) =
    |" Replace the binary operation by its reduction only if its operators
    |" is a predefined one.
    if stdlib.is_predefined_op(bin_op.f_op)
    then ctx.replace(bin_op, reduce_op(bin_op))
    else ctx

@check(message="same operands",
       category="Style", subcategory="Programming Practice",
       auto_fix=replace_op)
fun same_operands(node) =
    |" Flags infix calls to binary operators ``/``, ``=``, ``/=``, ``>``, ``>=``,
    |" ``<``, ``<=``, ``-``, ``mod``, ``rem`` (except when operating on floating
    |" point types) if operands of a call are syntactically equivalent.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 2
    |"
    |"    Y := (X + 1) / (X - 1);        --  NO FLAG
    |"    Z := (X + 1) / (X + 1);        --  FLAG
    node is BinOp(f_op: OpDiv | OpEq | OpGt | OpGte | OpLt | OpLte |
                          OpMinus | OpMod | OpNeq | OpRem)
    when node.f_left.p_expression_type() is not
         BaseTypeDecl(p_is_float_type(): true)
     and node.f_left.same_tokens(node.f_right)
