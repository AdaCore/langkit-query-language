import stdlib

fun outside_refs(body) = {
    val body_uninst = body.p_get_uninstantiated_node();

    [id for id in stdlib.children_no_nested(body)
        if id is Identifier and
           match stdlib.ultimate_alias(id)
           | o@ObjectDecl => stdlib.is_local_object(o) and
                             stdlib.enclosing_body(o) is o_body@BaseSubpBody
                             when o_body.p_get_uninstantiated_node() != body_uninst
           | o@ParamSpec  => (not (id.parent is ParamAssoc and
                                   id.parent.f_designator == id)) and
                             o.parent.parent.parent.p_get_uninstantiated_node() !=
                             body_uninst.p_subp_spec_or_null()
           | *            => false].to_list
}

@unit_check(message="outside references from subprogram",
            category="Style", subcategory="Program Structure")
fun outside_references_from_subprograms(unit) =
    |" Within a subprogram body or an expression function flag any identifier that
    |" denotes a non global data object declared outside this body.
    |"
    |" This rule analyzes generic instantiations and ignores generic packages to
    |" avoid flagging all references to formal objects.
    |"
    |" This rule has no parameters.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 6
    |"
    |"    procedure Enclosing is
    |"       Var : Integer;
    |"
    |"       procedure Proc (I : in out Integer) is
    |"       begin
    |"          I := I + Var;      --  FLAG
    [
        {message: "outside references from subprogram", loc: n}
        for n in concat([outside_refs(body)
                         for body in from unit.root through follow_generics
                         select subp@BaseSubpBody
                         when not stdlib.in_generic_template(subp)].to_list)
    ]
