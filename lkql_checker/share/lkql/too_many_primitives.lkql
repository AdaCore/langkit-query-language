# Flag any tagged type declaration that has more than N user-defined primitive
# operations (counting both inherited and not overridden and explicitly
# declared, not counting predefined operators). Only types declared in visible
# parts of packages, generic packages and package instantiations are flagged.
# This rule has the parameter N: Positive integer specifying the maximal number
# of primitives when the type is not flagged.

fun is_visible(type_decl) = type_decl.parent.parent is PublicPart

# TODO: would be nice to use a unit_check here to customize the message
# and add the number of primitives but this is currently incompatible
# with follow_generic_instantiations
@check(message="tagged type has too many primitives",
       remediation="MAJOR",
       follow_generic_instantiations=true,
       execution_cost=4)
fun too_many_primitives(node, n : int = 5) =
    node is TypeDecl
    when node.p_is_tagged_type() and is_visible(node)
     and node.p_get_primitives().length > n
