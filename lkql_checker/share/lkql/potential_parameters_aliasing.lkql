import stdlib
import parameters_aliasing

@unit_check(help="potential parameter aliasing",
            category="Style", subcategory="Programming Practice")
fun potential_parameters_aliasing(unit, in_parameters = false) =
    |" This rule is a complementary rule for the *Parameters_Aliasing* rule -
    |" it flags subprogram calls where the same variable (or a variable and its
    |" subcomponent) is given as an actual to more than one ``OUT`` or ``IN OUT``
    |" parameter, but the fact of aliasing cannot be determined statically because
    |" this variable is an array component, and the index value(s) is(are) not
    |" known statically. The rule resolves object renamings.
    |"
    |" Note that this rule does not flag calls that are flagged by the
    |" *Parameters_Aliasing* rule and vice versa.
    |"
    |" This rule has the following (optional) parameter for the ``+R`` option and
    |" for LKQL rule options files:
    |"
    |" *In_Parameters: bool*
    |"    Whether to consider aliasing between ``OUT``, ``IN OUT`` and ``IN``
    |"    parameters, except for those ``IN`` parameters that are of a by-copy
    |"    type, see the definition of by-copy parameters in the Ada Standard.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 9
    |"
    |"     package Pack is
    |"        procedure Proc (P1 : out Integer; P2 : in out Integer);
    |"        type Arr is array (1 .. 10 ) of Integer;
    |"     end Pack;
    |"
    |"     with Pack; use Pack;
    |"     procedure Proc (X : in out Arr; I, J : Integer) is
    |"     begin
    |"        Proc (X (I), X (J));   --  FLAG
    [
        {message: "potential parameter aliasing between " &
                  parameters_aliasing.param_image(
                      n.parent.p_call_params(), in_parameters,
                      canonical_indexes=true),
         loc: n.parent}
        for n in from unit.root select
        AssocList(parent: call@CallExpr(p_is_call(): true))
        when parameters_aliasing.params_aliasing(
                 call.p_call_params(), in_parameters, canonical_indexes=true)
    ]
