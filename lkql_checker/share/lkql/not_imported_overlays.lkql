import stdlib

@check(message="not imported overlay",
       category="Style", subcategory="Programming Practice")
fun not_imported_overlays(node) =
    |" Flag an attribute definition clause that defines 'Address attribute and
    |" has the form ``for Overlaying'Address use Overlaid'Address;`` where
    |" ``Overlaying`` and ``Overlaid`` are identifiers
    |" both defined by object declarations if ``Overlaying`` is not marked as
    |" imported. Flag an Address aspect specification if this aspect specification
    |" is a part of an object declaration of the object ``Overlaying`` and
    |" if the aspect value has the form ``Overlaid'Address`` where ``Overlaid``
    |" is an identifier defined by an object declaration if the object ``Overlaying``
    |" is not marked as imported.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 4
    |"
    |"    package Pack is
    |"       I : Integer;
    |"
    |"       J : Integer with Address => I'Address;            --  FLAG
    |"
    |"       L : Integer;
    |"       for L'Address use I'Address;                      --  NO FLAG
    |"       pragma Import (C, L);
    |"    end Pack;
    node is ((
      AspectAssoc(f_id: Identifier(p_name_is("Address"): true),
                  any parent(depth=3): o@ObjectDecl
                  when not o.p_has_aspect("Import")))
    | (AttributeDefClause(f_attribute_expr: at@AttributeRef
        when at.f_attribute.p_name_is("Address")
         and at.f_prefix.p_referenced_decl() is o@ObjectDecl
         when not o.p_has_aspect("Import"))))
    # Check that we have an Overlaid'Address expression and that Overlaid is
    # an identifier corresponding to an ObjectDecl or ParamSpec
    and node.f_expr is at@AttributeRef
        when at.f_attribute.p_name_is("Address")
         and stdlib.ultimate_alias(at.f_prefix, false) is (ObjectDecl | ParamSpec)
