# Flag an overlay definition that has a form of an attribute definition clause
# for Overlaying'Address use Overlaid'Address; or a form of aspect definition
# Address => Overlaid'Address, and Overlaid is a data object defined by a
# variable declaration, a formal parameter of mode IN OUT or OUT or a generic
# formal parameter of mode IN OUT if at least one of the following is true:
# - the overlaying object is a constant object;
# - overlaying object is not marked as Volatile;
# - if overlaid object is not a parameter, it is not marked as Volatile.

# This rule is basically the mirror of the Constant_Overlays rule and will
# trigger on the same nodes.

import stdlib

fun check_non_const_overlay(decl, overlaid) =
    # Check overlaid'Address
    overlaid is AttributeRef
    when overlaid.f_attribute.p_name_is("Address")
     # Check that overlaid is a variable object or formal of mode [IN] OUT
     and ({
         val overlaid_object = stdlib.ultimate_alias(overlaid.f_prefix);
         not stdlib.is_constant_object(overlaid_object)
         # Check that overlaying is constant
         and (stdlib.is_constant_object(decl)
              # or overlaying object is not marked volatile
              or not decl.p_has_aspect("Volatile")
              # or if overlaid object is not a parameter, it is not marked as
              # Volatile
              or (overlaid_object is
                  not (ParamSpec or
                       ObjectDecl(parent is GenericFormalObjDecl))
                  and not overlaid_object.p_has_aspect("Volatile")))})

# TODO: customize message:
# non-volatile object overlays a variable object
# constant object overlays a variable
# overlaying of a non-volatile variable object

@check(message="constant object overlays a variable object",
       category="Style", subcategory="Programming Practice")
fun non_constant_overlays(node) = match node
    | AspectAssoc(f_id is id@Identifier, any parent(depth=3) is o@ObjectDecl
        when id.p_name_is("Address")
         and check_non_const_overlay(o, node.f_expr)) => true
    | AttributeDefClause(f_attribute_expr is at@AttributeRef
        when at.f_attribute.p_name_is("Address")
         and check_non_const_overlay(at.f_prefix.p_referenced_decl(),
                                     node.f_expr)) => true
    | * => false
