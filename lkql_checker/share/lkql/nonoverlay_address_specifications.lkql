import stdlib

fun check_nonoverlay(overlaid) =
    # Check overlaid'Address
    overlaid is not AttributeRef or
    not overlaid.f_attribute.p_name_is("address") or
    # Check that overlaid does NOT correspond to an object or parameter
    # specification.
    stdlib.ultimate_alias(overlaid.f_prefix, false)
    is not (ObjectDecl | ParamSpec)

@check(message="nonoverlay address specification",
       category="Style", subcategory="Programming Practice")
fun nonoverlay_address_specifications(node) =
    |" Flag an attribute definition clause that defines ``'Address`` attribute if
    |" it does not have the form ``for Overlaying'Address use Overlaid'Address;``
    |" where ``Overlaying`` is an identifier defined by an object declaration
    |" and ``Overlaid`` is an identifier defined either by an object declaration
    |" or a parameter specification. Flag an Address aspect specification if
    |" this aspect specification is not a part of an object declaration and
    |" if the aspect value does not have the form ``Overlaid'Address``
    |" where ``Overlaid`` is an identifier defined either by an object
    |" declaration or a parameter specification.
    |"
    |" Address specifications given for program units are not flagged.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 9
    |"
    |"    type Rec is record
    |"       C : Integer;
    |"    end record;
    |"
    |"    Var_Rec : Rec;
    |"    Var_Int : Integer;
    |"
    |"    Var1 : Integer with Address => Var_Int'Address;
    |"    Var2 : Integer with Address => Var_Rec.C'Address;  --  FLAG
    node is
        ((AspectAssoc(f_id: id@Identifier, any parent(depth=3): ObjectDecl
         when id.p_name_is("address") and check_nonoverlay (node.f_expr)))
    | AttributeDefClause(f_attribute_expr: at@AttributeRef
                          when at.f_attribute.p_name_is("address")
                           and at.f_prefix.p_referenced_decl() is ObjectDecl
                           and check_nonoverlay(node.f_expr)))
