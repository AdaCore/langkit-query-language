import stdlib

fun write_references(node, id) =
    |" Return all the write references to `id`, starting from `node`
    from node select Identifier(p_name_matches(id): true,
                                p_is_write_reference(): true)

fun no_write_reference(node, id) =
    |" Return true if no write reference to `id` is found, starting from `node`
    (from node select first
     Identifier(p_name_matches(id): true,
                p_is_write_reference(): true)) == null

fun has_references(node, id) =
    |" Return true if any reference to `id` starting from `node` is found
    (from node select first Identifier(p_name_matches(id): true)) != null

fun exit_stmt(node) =
    |" Return the first exit statement referencing node (assumed to be a
    |" BaseLoopStmt)
    from node select first s@ExitStmt
    when (
      match s.f_loop_name
      | id@Name => node.f_end_name is n@EndName when n.f_name.p_name_matches(id)
      | *       => (from s through parent select first BaseLoopStmt) == node
    )

fun enclosing_scope(node) = {
    val p = node.p_semantic_parent();
    if p is NamedStmt then enclosing_scope(p) else p
}

@check(message="WHILE loop may be replaced by a FOR loop",
       category="Style", subcategory="Programming Practice")
fun use_for_loops(node, no_exit = false, no_function = false) =
    |" Flag ``while`` loops which could be replaced by a ``for`` loop. The rule detects
    |" the following code patterns:
    |"
    |" .. code-block:: ada
    |"
    |"       ...
    |"       Id : Some_Integer_Type ...;
    |"       ... -- no write reference to Id
    |"    begin
    |"       ...
    |"       while Id <relation_operator> <expression> loop
    |"          ...  -- no write reference to Id
    |"          Id := Id <increment_operator> 1;
    |"       end loop;
    |"       ...  -- no reference to Id
    |"    end;
    |"
    |" where relation operator in the loop condition should be some predefined
    |" relation operator, and increment_operator should be a predefined "+" or
    |" "-" operator.
    |"
    |" Note, that the rule only informs about a possibility to replace a
    |" ``while`` loop by a ``for``, but does not guarantee that this is
    |" really possible, additional human analysis is required for all the
    |" loops marked by the rule.
    |"
    |" This rule has the following (optional) parameters for the ``+R`` option and
    |" for LKQL rule options files:
    |"
    |" *No_Exit: bool*
    |"    If ``true``, flag only loops that do not include an exit statement that
    |"    applies to them.
    |"
    |" *No_Function: bool*
    |"    If ``true``, <expression> must not contain any non-operator function call.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 3
    |"
    |"       Idx : Integer := 1;
    |"    begin
    |"       while Idx <= 10 loop    --  FLAG
    |"          Idx := Idx + 1;
    |"       end loop;
    |"    end;
    # Find while loops of the form: while Id <relation op> ... loop
    node is WhileLoopStmt(f_spec: WhileLoopSpec(f_expr:
                          rel@RelationOp(f_left: id@Identifier)
                          when stdlib.is_predefined_op(rel.f_op)))
    when {
        val refs = write_references(node.f_stmts, id);
        # Look for a single write reference to id
        refs.length == 1 and
        # which is of the form: id := id +/- 1
        refs[1].parent is
        assign@AssignStmt(f_expr:
            expr@BinOp(f_op: op@(OpPlus | OpMinus)
                           when stdlib.is_predefined_op(op),
                       f_right: i@IntLiteral
                       when i.p_denoted_value() == 1,
                       f_left: Identifier(p_name_matches(id): true)))
        # located at the very end of the loop
        when not assign.next_sibling() and assign.parent == node.f_stmts
         # and where id is declared in the same enclosing scope as the loop
         and id.p_referenced_decl() is decl@ObjectDecl
             when enclosing_scope(node) == decl.p_semantic_parent()
              # and no other write of Id is found in its declarative part
              # (e.g. from nested subprograms)
              and no_write_reference(decl.parent, id)
              # also check that there are no further references to id after the
              # loop.
              and not node is *(any next_siblings: n
                                when has_references(n, id))
    }
    and not (no_exit and exit_stmt(node))
    and not (no_function and
             from rel.f_right select first Name(p_is_call(): true))
