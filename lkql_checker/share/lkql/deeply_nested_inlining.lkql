import stdlib

# Given a name, return the body of the decl referenced by the name if it is
# marked Inline, null otherwise
@memoized
fun inlined_body(name) = match name.p_referenced_decl()
    | b@BaseSubpBody when b?.p_has_aspect("Inline")
                      => b
    | EnumLiteralDecl => null
    | g@GenericSubpInstantiation(f_generic_subp_name: *(p_referenced_decl(): b@GenericSubpDecl))
      when b.p_has_aspect("Inline") or g.p_has_aspect("Inline")
                      => b.p_body_part()
    | d@BasicDecl when d.p_is_subprogram() and d.p_has_aspect("Inline")
                      => d.p_body_part()
    | *               => null

# Return true if we reach a level ``n`` of inlining of 0
@memoized
fun check_inlining(node, n: int) =
    if n == 0
    then node != null
    else [a for a in stdlib.children_no_nested(node)
          if a is Name when a.p_is_call()
                        and check_inlining(inlined_body(a), n - 1)]?[1] != ()

@check(help="deeply nested inlining (global analysis required)",
       message="deeply nested inlining", category="Feature")
fun deeply_nested_inlining(node, n: int = 3) =
    |" Flag a subprogram (or generic subprogram) if pragma Inline has been applied
    |" to it, and it calls another subprogram to which pragma Inline applies,
    |" resulting in potential nested inlining, with a nesting depth exceeding the
    |" value specified by the *N* rule parameter.
    |"
    |" This rule requires the global analysis of all the compilation units that
    |" are ``gnatcheck`` arguments; such analysis may affect the tool's
    |" performance. If gnatcheck generates warnings saying that "*body is not
    |" analyzed for ...*", this means that such an analysis is incomplete, this
    |" may result in rule false negatives.
    |"
    |" This rule has the following (mandatory) parameter for the ``+R`` option and
    |" for LKQL rule options files:
    |"
    |" *N: int*
    |"    Positive integer specifying the maximum level of nested calls to
    |"    subprograms to which pragma Inline has been applied.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 1
    |"
    |"    procedure P1 (I : in out integer) with Inline => True;   --  FLAG
    |"    procedure P2 (I : in out integer) with Inline => True;
    |"    procedure P3 (I : in out integer) with Inline => True;
    |"    procedure P4 (I : in out integer) with Inline => True;
    |"
    |"    procedure P1 (I : in out integer) is
    |"    begin
    |"       I := I + 1;
    |"       P2 (I);
    |"    end;
    |"
    |"    procedure P2 (I : in out integer) is
    |"    begin
    |"       I := I + 1;
    |"       P3 (I);
    |"    end;
    |"
    |"    procedure P3 (I : in out integer) is
    |"    begin
    |"       I := I + 1;
    |"       P4 (I);
    |"    end;
    |"
    |"    procedure P4 (I : in out integer) is
    |"    begin
    |"       I := I + 1;
    |"    end;
    match node
    | ClassicSubpDecl          => node.p_has_aspect("Inline") and
                                  check_inlining(node.p_body_part(), n + 1)
    | GenericSubpDecl          => node.p_has_aspect("Inline") and
                                  check_inlining(node.p_body_part(), n + 1)
    | BaseSubpBody             => not node.p_previous_part() and
                                  node.p_has_aspect("Inline") and
                                  check_inlining(node, n + 1)
    | GenericSubpInstantiation => node.f_generic_subp_name?.p_referenced_decl()
                                  is g@GenericSubpDecl
                                  when g.p_has_aspect("Inline") and
                                  check_inlining(g.p_body_part(), n + 1)
    | *                        => false
