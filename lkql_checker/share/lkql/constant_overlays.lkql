# Flag an overlay definition that has a form of an attribute definition clause
# for Overlaying'Address use Overlaid'Address; or a form of aspect definition
# Address => Overlaid'Address, and Overlaid is a data object defined by a
# constant declaration or a formal or generic formal parameter of mode IN if at
# least one of the following is true:
# - the overlaying object is not a constant object;
# - overlaying object or overlaid object is marked as Volatile;

import stdlib

fun check_overlay(decl, overlaid) =
    # Check overlaid'Address
    overlaid is AttributeRef
    when overlaid?.f_attribute?.p_name_is("address")
     # Check that overlaid is a constant object or formal of mode IN
     and ({
         val overlaid_object = stdlib.ultimate_alias(overlaid?.f_prefix);
         # TODO use o?.p_is_constant_object() once available, see U330-040
         (match overlaid_object
          | o@ObjectDecl =>
              o?.f_has_constant?.p_as_bool() or
              o?.f_mode is ModeIn or
              (o?.f_mode is ModeDefault and o?.parent is GenericFormalObjDecl)
          | p@ParamSpec  => p?.f_mode is ModeDefault or p?.f_mode is ModeIn
          | *            => false)
         # Check that overlaying is not constant
         and ((not decl?.f_has_constant?.p_as_bool())
              # or either object is marked volatile
              or decl?.p_has_aspect("Volatile")
              or overlaid_object?.p_has_aspect("Volatile"))})

@check(message="non-constant object overlays a constant object")
fun constant_overlays(node) = match node
    | AspectAssoc(f_id is id@Identifier, any parent(depth=3) is o@ObjectDecl
        when id?.p_name_is("address")
         and check_overlay (o, node.f_expr)) => true
    | AttributeDefClause(f_attribute_expr is at@AttributeRef
        when at?.f_attribute?.p_name_is("address")
         and check_overlay(at?.f_prefix?.p_referenced_decl(),
                           node.f_expr)) => true
    | * => false
