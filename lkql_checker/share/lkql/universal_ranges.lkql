# Flag discrete ranges that are a part of an index constraint, constrained
# array definition, or for-loop parameter specification, and whose bounds are
# both of type universal_integer. Ranges that have at least one bound of a
# specific type (such as 1 .. N, where N is a variable or an expression of
# non-universal type) are not flagged.

# In the context of a range constraint, a NumberDecl is always an int
fun is_universal_int(i) =
    i is IntLiteral or i?.p_referenced_decl() is NumberDecl

@check(message="range with universal integer bounds")
fun universal_ranges(node) =
    node is AdaNode
    when (
        # index constraint or constrained array definition
        node is IndexConstraint
        when node.f_constraints[1] is r@BinOp(f_op is OpDoubleDot)
            when is_universal_int(r.f_right) and is_universal_int(r.f_left)
    # TODO: [U311-008] Use `or` patterns operator
    ) or
        # range of a "for of" loop
        node is r@BinOp (parent is ForLoopSpec, f_op is OpDoubleDot)
        when is_universal_int(r.f_right) and is_universal_int(r.f_left)
