import stdlib

fun can_eval_as_int(expr) =
    |" Return true is expr is an expression on which p_eval_as_int() can be
    |" called.
    expr is Expr(p_is_static_expr(): true,
                 p_expression_type(): BaseTypeDecl(
                     p_is_discrete_type(): true))

@memoized
fun fully_expanded_name(name, canonical_indexes) =
    |" Return the fully expanded name in lower case, expanding renamings along
    |" the way and stripping type conversions, type qualification,
    |" dereferences, blocks and subprogram names. If `canonical_indexes` is
    |" true, replace non static array indexes by "0" and all array slices by
    |" ["0"].
    |" Also insert the special marker "NO MATCH" when encountering dynamic
    |" elements (e.g. function calls) that should be excluded from static
    |" aliasing considerations.
    match name
    # Canonicalize static expressions
    | Expr when can_eval_as_int(name) => img(name.p_eval_as_int())
    # Strip parentheses
    | ParenExpr     => fully_expanded_name(name.f_expr, canonical_indexes)
    # Punt on aggregates
    | BaseAggregate => "NO MATCH"
    # Punt for now on attribute references
    | (AttributeRef | ReduceAttributeRef | UpdateAttributeRef) => "NO MATCH"
    # Strip dereferences
    | ExplicitDeref => fully_expanded_name(name.f_prefix, canonical_indexes)
    # Strip type qualifications
    | QualExpr      => fully_expanded_name(name.f_suffix, canonical_indexes)
    | DottedName    =>
        # Strip named blocks and subprograms
        (if name.f_prefix is Identifier(
             p_referenced_decl(): NamedStmtDecl | BasicSubpDecl |
                                    BaseSubpBody)
         then ""
         else fully_expanded_name(name.f_prefix, canonical_indexes) & ".") &
        fully_expanded_name(name.f_suffix, canonical_indexes)
    | CallExpr      =>
        # Note: we cannot use name.p_kind() pending W313-005

        # Punt on subprogram calls ("call")
        (if name.p_is_call()
         then "NO MATCH"
         else if name.f_name is Name(p_referenced_decl(): BaseTypeDecl)
         # Strip type conversions ("type_conversion")
         then fully_expanded_name(name.f_suffix[1].f_r_expr, canonical_indexes)
         else if name.p_is_array_slice()
         # "array_slice"
         then fully_expanded_name(name.f_name, canonical_indexes) & "(" &
              (if canonical_indexes
               then img([0])
               else if name.f_suffix is BinOp
                    then (fully_expanded_name(name.f_suffix.f_left, canonical_indexes)
                          & ".."
                          & fully_expanded_name(name.f_suffix.f_right, canonical_indexes))
                    else fully_expanded_name(name.f_suffix, canonical_indexes))
              & ")"
         # "array_index"
         else fully_expanded_name(name.f_name, canonical_indexes) & "(" &
              (if canonical_indexes
               # The code below may generate false positives and false
               # negatives, which is OK for now and avoids frequent false
               # positives on e.g. A(2) vs A(3).
               then img([(if can_eval_as_int(n.f_r_expr)
                          then img(n.f_r_expr.p_eval_as_int())
                          else 0)
                         for n in name.f_suffix.children].to_list)
               else img([fully_expanded_name(n.f_r_expr, canonical_indexes)
                         for n in name.f_suffix.children].to_list)) & ")")
    | Name          =>
        (match name.p_referenced_decl()
         # Follow renamings
         | ObjectDecl(f_renaming_clause: r@RenamingClause) =>
             fully_expanded_name(r.f_renamed_object, canonical_indexes)
         | decl@PackageRenamingDecl =>
             fully_expanded_name(decl.p_final_renamed_package(), canonical_indexes)
         | * => name.text.to_lower_case)
    | BasicDecl     => name.p_defining_name().text.to_lower_case
    | (StringLiteral | CharLiteral) => name.text
    # Punt on all other expressions
    | Expr          => "NO MATCH"
    # Default fallback: take the name in lower case
    | *             => name.text.to_lower_case

@memoized
fun param_aliasing(param1, param2, canonical_indexes) = {
    val name1 = fully_expanded_name(param1, canonical_indexes);
    val name2 = fully_expanded_name(param2, canonical_indexes);

    not name1.contains("NO MATCH") and
    not name2.contains("NO MATCH") and
    (name1 == name2 or
     (if name1.length > name2.length
       then name1.starts_with(name2 & ".") or name1.starts_with(name2 & "(")
       else name2.starts_with(name1 & ".") or name2.starts_with(name1 & "("))) and
    # Don't flag when canonical_indexes = true and we have a match with
    # canonical_indexes = false. For example if we have X.S and X.S(I)
    not (canonical_indexes and param_aliasing(param1, param2, false))
}

fun second_param(params, p, canonical_indexes) =
    # We examine each pair of parameters twice but since we memoize
    # fully_expanded_name this is actually more efficient currently than e.g.
    # computing the position of each parameter and using the position to exclude
    # the second pair.
    [q for q in params
     if p != q and
        q.param.parent.parent is ParamSpec(f_mode: ModeOut | ModeInOut) and
        param_aliasing(p.actual, q.actual, canonical_indexes)]

fun params_aliasing(params, in_parameters, canonical_indexes = false) =
    # We consider out and in (if in_parameters) here, and only out parameters
    # in second_param, since at least one of the aliases should be [in] out.
    [p for p in params
     if (p.param.parent.parent is ParamSpec(f_mode: ModeOut | ModeInOut) or
         (in_parameters and not stdlib.is_by_copy(p))) and
        second_param(params, p, canonical_indexes)]

fun param_image(params, in_parameters, canonical_indexes = false) = {
    val p = params_aliasing(params, in_parameters, canonical_indexes)[1];
    val q = second_param(params, p, canonical_indexes)[1];
    "formals " & p.param.text & " and " & q.param.text
}

@unit_check(help="parameter aliasing",
            category="Style", subcategory="Programming Practice")
fun parameters_aliasing(unit, in_parameters = false) =
    |" Flags subprogram calls for which it can be statically detected that the same
    |" variable (or a variable and a subcomponent of this variable) is given as
    |" an actual to more than one ``OUT`` or ``IN OUT`` parameter. The rule resolves
    |" object renamings.
    |"
    |" This rule has the following (optional) parameter for the ``+R`` option and
    |" for LKQL rule options files:
    |"
    |" *In_Parameters: bool*
    |"    Whether to consider aliasing between ``OUT``, ``IN OUT`` and ``IN``
    |"    parameters, except for those ``IN`` parameters that are of a by-copy
    |"    type, see the definition of by-copy parameters in the Ada Standard.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 15
    |"
    |"    package Pack is
    |"       type Arr is array (1 .. 5) of Integer;
    |"
    |"       type Rec is record
    |"          Comp : Arr;
    |"       end record;
    |"
    |"       procedure Proc (P1 : in out : Rec; P2 : out Integer);
    |"    end Pack;
    |"
    |"    with Pack; use Pack;
    |"    procedure Test (I : Integer) is
    |"       Var : Rec;
    |"    begin
    |"       Proc (Var, Var.Comp (I));   --  FLAG
    [
        {message: "parameter aliasing between " &
                  param_image(n.parent.p_call_params(), in_parameters),
         loc: n.parent}
        for n in from unit.root select
        AssocList(parent: call@CallExpr(p_is_call(): true))
        when params_aliasing(call.p_call_params(), in_parameters)
    ]
