@check(message="OTHERS choice in aggregate", remediation="EASY",
       rule_name="OTHERS_In_Aggregates",
       category="Style", subcategory="Programming Practice")
fun others_in_aggregates(node) =
    |" Flag each use of an ``others`` choice in extension aggregates.
    |" In record and array aggregates, an ``others`` choice is flagged unless
    |" it is used to refer to all components, or to all but one component.
    |"
    |" If, in case of a named array aggregate, there are two associations, one
    |" with an ``others`` choice and another with a discrete range, the
    |" ``others`` choice is flagged even if the discrete range specifies
    |" exactly one component; for example, ``(1..1 => 0, others => 1)``.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 22, 25, 29
    |"
    |"    package Foo is
    |"       type Arr is array (1 .. 10) of Integer;
    |"
    |"       type Rec is record
    |"          C1 : Integer;
    |"          C2 : Integer;
    |"          C3 : Integer;
    |"          C4 : Integer;
    |"       end record;
    |"
    |"       type Tagged_Rec is tagged record
    |"          C1 : Integer;
    |"       end record;
    |"
    |"       type New_Tagged_Rec is new Tagged_Rec with record
    |"          C2 : Integer;
    |"          C3 : Integer;
    |"          C4 : Integer;
    |"       end record;
    |"
    |"       Arr_Var1 : Arr := (others => 1);
    |"       Arr_Var2 : Arr := (1 => 1, 2=> 2, others => 0);  --  FLAG
    |"
    |"       Rec_Var1 : Rec := (C1 => 1, others => 0);
    |"       Rec_Var2 : Rec := (1, 2, others => 3);           --  FLAG
    |"
    |"       Tagged_Rec_Var : Tagged_Rec := (C1 => 1);
    |"
    |"       New_Tagged_Rec_Var : New_Tagged_Rec := (Tagged_Rec_Var with others => 0); -- FLAG
    |"    end Foo;
    node is OthersDesignator(parent: l@AlternativesList(
                             parent: a@AggregateAssoc
    # Flag all aggregates with more than 2 alternatives
    when a?.parent.children_count > 2
      # Flag all extension aggregates
      or a?.parent is (AssocList(any parent:
                                    Aggregate(f_ancestor_expr: AdaNode))
      # Find the single alternative and flag in the following cases:
      | AssocList(any children: assoc@AggregateAssoc
                   when assoc != a
                         # More than one value
                    and (assoc.f_designators.children_count > 1 or
                         # A range
                         assoc.f_designators[1] is BinOp(f_op: OpDoubleDot) or
                         # A (sub)type designator
                         assoc.f_designators[1] is
                           Identifier(p_referenced_decl(): BaseTypeDecl))))))
