# Flag 'or' expressions whose two operands are inequality expressions comparing
# a same variable against two literals and 'and' expressions whose two operands
# are equality expressions comparing a same variable against two literals.

fun name_of(node) =
    match node
    | BinOp(f_left: n@Name) => n
    | BinOp(f_right: r) => r

fun is_literal(node) =
    node is (CharLiteral | NumLiteral | StringLiteral)

fun is_name_binop_literal(node) =
    (node.f_left is Name and is_literal(node.f_right)) or
    (is_literal(node.f_left) and node.f_right is Name)

fun is_name_neq_literal(node) =
    node is BinOp(f_op: OpNeq) and is_name_binop_literal(node)

fun is_or_neq(node) =
    node is BinOp(f_op: OpOr | OpOrElse)
    when is_name_neq_literal(node.f_left)
     and is_name_neq_literal(node.f_right)
     and name_of(node.f_left).p_name_matches(name_of(node.f_right))

fun is_name_eq_literal(node) =
    node is BinOp(f_op: OpEq) and is_name_binop_literal(node)

fun is_and_eq(node) =
    node is BinOp(f_op: OpAnd | OpAndThen)
    when is_name_eq_literal(node.f_left)
     and is_name_eq_literal(node.f_right)
     and name_of(node.f_left).p_name_matches(name_of(node.f_right))

@check(message="suspicious equality",
       category="Style", subcategory="Programming Practice")
fun suspicious_equalities(node) =
    is_and_eq(node) or is_or_neq(node)
