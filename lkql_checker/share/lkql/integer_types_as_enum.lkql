# Flag each integer type which may benefit from being replaced by an
# enumeration type. All the following criterias are considered:
# - no use of any arithmetic operator
# - no reference in generic instantiations
# - no type conversion

@memoized
fun ops() = [op.p_expression_type()
             for op in select
                 BinOp(f_op is OpDiv or OpMinus or OpMod or OpMult or
                               OpPlus or OpPow or OpRem or OpXor) or
                 UnOp(f_op is OpAbs or OpMinus or OpPlus)].to_list

@memoized
fun insts() = [id.p_referenced_decl()
               for id in from select GenericInstantiation
               select Identifier].to_list

@memoized
fun types() = [c.p_referenced_decl()
               for c in 
               select CallExpr(p_referenced_decl() is TypeDecl)].to_list

@unit_check
fun integer_types_as_enum(unit) = {
    # For efficiency, we perform a single global scan by only running on the
    # first CompilationUnit.
    # arithmetic operators
    selector op_type | * => *ops();

    # parameters of generic instantiations
    selector inst_param | * => *insts();

    # type conversions
    selector type_conv | * => *types();

    # Perform a complete scan of the project via a global select
    [{message: "integer type may be replaced by an enumeration",
      loc: n.p_defining_name()}
     for n in from unit.root select
     node@TypeDecl(p_is_int_type() is true,
                   all op_type is t@* when t != node,
                   all inst_param is t@* when t != node,
                   all type_conv is t@* when t != node)]
}
