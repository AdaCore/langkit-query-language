fun assign_stmts(n, prefix) =
    |" Return all consecutive AssignStmt starting at n and following siblings
    |" when the destination is a DottedName whose prefix matches prefix.
    match n
    | AssignStmt(f_dest: DottedName(f_prefix: Name(p_name_matches(prefix): true)))
        => [n] & assign_stmts(n.next_sibling(), prefix)
    | * => []

fun replace_by_aggregate(node, ctx) =
    |" Replace all consecutive AssignStmt, starting from the ``node`` by a
    |" record aggregate.
    {
        val assigns = assign_stmts(node, node.f_dest.f_prefix);
        assigns.reduce(
            (ctx, a) => ctx.remove(a),
            ctx.insert_before(
                assigns[1],
                new AssignStmt(
                    f_dest=node.f_dest.f_prefix,
                    f_expr=new Aggregate(
                        f_ancestor_expr=null,
                        f_assocs=new AssocList([
                            new AggregateAssoc(
                                f_designators=new AlternativesList([a.f_dest.f_suffix]),
                                f_r_expr=a.f_expr
                            ) for a in assigns
                        ].to_list)
                    )
                )
            )
        )
    }

@check(message="component assignments may be replaced by an aggregate",
       category="Style", subcategory="Programming Practice",
       auto_fix=replace_by_aggregate)
fun use_record_aggregates(node) =
    |" Flag the first statement in the sequence of assignment statements if the targets
    |" of all these assignment statements are components of the same record objects,
    |" all the components of this objects get assigned as the result of such a
    |" sequence, and the type of the record object does not have discriminants.
    |" This rule helps to detect cases when a sequence of assignment statements
    |" can be replaced with a single assignment statement with a record aggregate
    |" as an expression being assigned, there is no guarantee that it detects all
    |" such sequences.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 7
    |"
    |"       type Rec is record
    |"          Comp1, Comp2 : Integer;
    |"       end record;
    |"
    |"       Var1, Var2 : Rec;
    |"    begin
    |"       Var1.Comp1 := 1;  --  FLAG
    |"       Var1.Comp2 := 2;
    |"
    |"       Var2.Comp1 := 1;  --  NO FLAG
    |"       I := 1;
    |"       Var2.Comp2 := 2;
    node is AssignStmt(
        f_dest: DottedName(
            f_prefix: prefix@Name,
            f_suffix: Identifier(
                p_referenced_decl(): ComponentDecl(
                    p_semantic_parent(): type@TypeDecl(
                        f_discriminants: null,
                        p_is_tagged_type(): false)))))
    # Only check for the first assignment in a row
    when node.previous_sibling() is not
         AssignStmt(f_dest: DottedName(
                    f_prefix: Name(p_name_matches(prefix): true))) and
    {
        val num_comps = (from type.f_type_def select DefiningName).length;
        # More than 1 component
        num_comps > 1 and
        # All components are assigned individually
        unique([s.f_dest.f_suffix.text
                for s in (from assign_stmts(node, prefix) select s@AssignStmt(
                    f_dest: DottedName(
                        # Check that the suffix is a ComponentDecl of the same
                        # type.
                        f_suffix: Identifier(p_referenced_decl():
                                               c2@ComponentDecl)
                        when type == c2.p_semantic_parent())))])
        .length == num_comps
    }
