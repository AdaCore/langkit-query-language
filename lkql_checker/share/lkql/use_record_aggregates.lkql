# Flag each set of consecutive assignment (not intersperced with other
# statements) to record components when all components of the record are
# assigned, unless the record type has a single component, or has discriminants,
# or is tagged.

fun assign_stmts(n, prefix) =
    |" Return all consecutive AssignStmt starting at n and following siblings
    |" when the destination is a DottedName whose prefix matches prefix.
    match n
    | AssignStmt(f_dest: DottedName(f_prefix: Name(p_name_matches(prefix): true)))
        => [n] & assign_stmts(n.next_sibling(), prefix)
    | * => []

@check(message="component assignments may be replaced by an aggregate",
       category="Style", subcategory="Programming Practice")
fun use_record_aggregates(node) =
    node is AssignStmt(
        f_dest: DottedName(
            f_prefix: prefix@Name,
            f_suffix: Identifier(
                p_referenced_decl(): ComponentDecl(
                    p_semantic_parent(): type@TypeDecl(
                        f_discriminants: null,
                        p_is_tagged_type(): false)))))
    # Only check for the first assignment in a row
    when node.previous_sibling() is not
         AssignStmt(f_dest: DottedName(
                    f_prefix: Name(p_name_matches(prefix): true))) and
    {
        val num_comps = (from type.f_type_def select DefiningName).length;
        # More than 1 component
        num_comps > 1 and
        # All components are assigned individually
        unique([s.f_dest.f_suffix.text
                for s in (from assign_stmts(node, prefix) select s@AssignStmt(
                    f_dest: DottedName(
                        # Check that the suffix is a ComponentDecl of the same
                        # type.
                        f_suffix: Identifier(p_referenced_decl():
                                               c2@ComponentDecl)
                        when type == c2.p_semantic_parent())))])
        .length == num_comps
    }
