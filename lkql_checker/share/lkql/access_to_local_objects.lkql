# Flag any `'Access' attribute reference if its prefix denotes an
# identifier defined by a local object declaration or a subcomponent
# thereof.
#
# An object declaration is considered as local if it is located
# anywhere except library-level packages or bodies of library-level
# packages (including packages nested in those). Here both package
# declarations and package instantiations are considered as packages.
#
# If the attribute prefix is a dereference or a subcomponent thereof, the
# attribute reference is not flagged.

import stdlib

fun has_access_type(n) =
    n.p_type_expression() is TypeExpr(p_designated_type_decl() is
    BaseTypeDecl(p_is_access_type() is true))

fun denotes_local_object(n) = {
    fun dotted_prefix(n) =
        match n.f_prefix.p_referenced_decl()
        | BasicSubpDecl                 => true
        | SubpBody                      => true
        | GenericSubpInstantiation      => true
        | p@BasePackageDecl             => stdlib.has_local_scope(p) or
                                           denotes_local_object(n.f_prefix)

        | p@PackageBody                 => stdlib.has_local_scope(p) or
                                           denotes_local_object(n.f_prefix)
        | p@GenericPackageInstantiation => stdlib.has_local_scope(p) or
                                           denotes_local_object(n.f_prefix)
        | r                           =>
          (not has_access_type(r)) and denotes_local_object(n.f_prefix);

    match n
    | DottedName => dotted_prefix(n)
    | QualExpr   => denotes_local_object(n.f_suffix)
    | ParenExpr  => denotes_local_object(n.f_expr)
    | CallExpr   => denotes_local_object(n.f_name)
    | BaseId     =>
        (not has_access_type(n.p_referenced_decl())) and
        stdlib.is_local_object(stdlib.ultimate_alias(n, strip_component=true))
    | *          => false
}

@check(message="access attribute for local objects",
       category="Style", subcategory="Programming Practice")
fun access_to_local_objects(node) =
    node is AttributeRef
    when node.f_attribute.p_name_is("Access")
     and denotes_local_object(node.f_prefix)
