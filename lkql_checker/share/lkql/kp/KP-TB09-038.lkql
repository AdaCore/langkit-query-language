# Flag integer types with a size clause forcing biasing

import stdlib

fun pow2(n, result = 1) = if n == 0 then result else pow2(n - 1, result * 2)

fun is_positive(n) = n.p_is_static_expr() and n.p_eval_as_int() >= 0

@check(message="possible occurrence of KP TB09-038", impact="20.[12]")
fun kp_tb09_038(node) =
    # Look for an integer type declaration
    node is TypeDecl(p_is_int_type(): true,
                     f_type_def: def@SignedIntTypeDef)
    # with an explicit range definition
    when def.f_range.f_range is op@BinOp(f_op: OpDoubleDot)
     # and both range values of the same sign
     when (if is_positive(op.f_left)
           then is_positive(op.f_right)
           else not is_positive(op.f_right))
      # and a Size aspect specifying just the number of bits required to fit the
      # range.
      and {
         val aspect = node.p_get_aspect("Size");
         aspect.exists and
         aspect.value.p_is_static_expr() and
         pow2(aspect.value.p_eval_as_int()) ==
         stdlib.range_values(op.f_left, op.f_right)
      }

