# Flag a record component whose type is a record type with an Unchecked_Union
# and a representation clause specifying a size that is not a power of two for
# some of the fields.

fun is_power_of_two(i) = i == 8 or i == 16 or i == 32 or i == 64

@memoized
fun check_type(t) =
    # Check whether t is a record type
    t.p_is_record_type() and
    # with an Unchecked_Union
    t.p_has_aspect("Unchecked_Union") and
    # a representation clause
    t.p_get_record_representation_clause() is rep@RecordRepClause when
    # and at least one component clause has a size that is not a power of two
    [f for f in (from rep select ComponentClause(
                  f_range: RangeSpec(f_range: r@BinOp(f_op: OpDoubleDot))
                  when not is_power_of_two(r.f_right.p_eval_as_int() -
                                           r.f_left.p_eval_as_int() + 1)
      ))]

@check(help="possible occurrence of KP V120-015",
       message="possible occurrence of KP V120-015 on powerpc targets",
       target="powerpc*")
fun kp_v120_015(node) =
    node is ComponentDecl
    when node.f_component_def.f_type_expr.p_designated_type_decl() is t@TypeDecl
     when check_type(t)
