# Flag subprogram bodies which override and have a formal parameter of a
# mutable discriminant type which is assigned in the body.

import stdlib

fun is_assigned(id, body) =
    |" Get if the given DefiningName identifier is used as LHS in an assignment
    |" statement in the provided HandledStatements.
    {
        # Get the statements in the subp body and its exception handlers
        val stmts = body.f_stmts.children
            & concat([eh.f_stmts.children
                    for eh in body.f_exceptions.children
                    if eh is ExceptionHandler].to_list);
        stdlib.any([s is AssignStmt when s.f_dest.p_referenced_defining_name == id
                    for s in stmts])
    }

fun is_unconstrained_discriminated(type_decl) =
    |" Get if the given BaseTypeDecl is an unconstrained type with a default valued
    |" discriminant.
    match type_decl
    | SubtypeDecl  => not type_decl.f_subtype.p_subtype_constraint()
                      and is_unconstrained_discriminated(type_decl.p_get_type())
    | BaseTypeDecl(p_base_type(): not null)
                   => not type_decl.f_type_def.f_subtype_indication.p_subtype_constraint()
                      and is_unconstrained_discriminated(type_decl.p_base_type())
    | BaseTypeDecl(p_private_completion(): not null)
                   => is_unconstrained_discriminated(type_decl.p_private_completion())
    # TODO: Remove the 'p_discriminants_list' parameter when langkit#776 will be resolved
    | BaseTypeDecl => stdlib.any([d.f_default_expr != null
                                  for d in type_decl.p_discriminants_list(type_decl.p_root_type())])
    | *            => false

@check(help="possible occurrence of KP 19142",
       message="possible occurrence of KP 19142")
fun kp_19142(node) =
    node is SubpBody
    # Check that the subprogram is overriding
    when node.p_root_subp_declarations()
     # Check that the subprogram hasn't been declared earlier, otherwise the KP
     # won't happen.
     and not node.p_decl_part()
     and stdlib.any([stdlib.any([is_assigned(id, node.f_stmts)
                                 for id in p.f_ids.children])
                     for p in node.f_subp_spec.p_params()
                     if is_unconstrained_discriminated(p.p_formal_type())
                        and p.f_mode is (ModeOut | ModeInOut)])
