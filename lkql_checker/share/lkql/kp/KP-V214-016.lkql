# Flag instantiations of Ada.Tags.Generic_Dispatching_Constructor where the
# root type of the type hierarchy of parameter T is a limited tagged type with
# no task component and one of its derivation has some task component.

import stdlib

# TODO: share with KP-V712-039.lkql once we can use stdlib.<selector>
selector component_types
    |" Return all the TypeDecl corresponding to all fields of a given type
    | TypeDecl(f_type_def is d@RecordTypeDef) =>
        skip *(from d select ComponentDecl)
    | TypeDecl(f_type_def is der@DerivedTypeDef(f_record_extension is
                                                def@BaseRecordDef)) =>
        skip *([der, def])
    | TypeDecl(f_type_def is DerivedTypeDef(f_subtype_indication is
               ind@SubtypeIndication) =>
        rec ind.f_name.p_referenced_decl()
    | ComponentDecl(f_component_def is ComponentDef(f_type_expr is
                    ind@SubtypeIndication)) =>
        rec ind.f_name.p_referenced_decl()
    | BaseRecordDef  => skip *(from this select ComponentDecl)
    | DerivedTypeDef => rec this.f_subtype_indication.f_name.p_referenced_decl()
    | *        => ()

fun check_type(params) =
   [p for p in params if
      p.param.p_name_is("T") and
      p.actual.p_referenced_decl().p_root_type() is root@BaseTypeDecl and
      root.f_type_def.f_has_limited.p_as_bool() and
      root is TypeDecl(all component_types is not TaskTypeDecl) and
      [t for t in root.p_find_all_derived_types(stdlib.list_of_units()) if
       t is TypeDecl(any component_types is TaskTypeDecl)]
   ]

@check(message="possible occurrence of KP V214-016", impact="21.*,22.*,23.*")
fun kp_v214_016(node) =
    node is GenericSubpInstantiation
    when stdlib.ultimate_subprogram_alias(node.p_designated_subp()).
         p_fully_qualified_name() == "Ada.Tags.Generic_Dispatching_Constructor"
     and check_type(node.p_inst_params())
