# Flag variant record types with a component whose type has a user-defined
# equality.

fun primitives(decl) =
    match decl
    | TypeDecl    => decl.p_get_primitives()
    | SubtypeDecl => decl.p_get_type().p_get_primitives()
    | *           => null

@check(message="possible occurrence of KP S124-035", impact="18.*,19.*")
fun kp_s114_015(node) =
    # Look for variant record types
    node is TypeDecl(f_discriminants: not null,
                     f_type_def: def@RecordTypeDef)
     when (from def.f_record_def.f_components select first VariantPart) != null
      # Look for all components definitions and check whether their corresponding
      # type has a user-defined equality
      and [c for c in (from def.f_record_def.f_components select ComponentDef)
           if [p for p in primitives(c.f_type_expr.p_designated_type_decl())
               if p.p_defining_name().p_name_is("\"=\"")]]

