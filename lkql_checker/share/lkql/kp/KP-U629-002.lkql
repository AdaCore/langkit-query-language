# Flag <type>(xxx.all) as part of a return or expression function
# body where <type> is tagged and the root type is an interface,
# xxx is of a class wide type, and the returned object is a controlling
# parameter of the enclosing function.

import stdlib

@check(message="possible occurrence of KP U629-002", impact="21.*")
fun kp_u629_002(node) =
    # Look for type(xxx.all) as part of a return or expression function body
    node is ExplicitDeref(parent: ParamAssoc(parent: AssocList(
        parent: CallExpr(
            any parent: ExprFunction | ReturnStmt,
             # the return object is a controlling parameter
            any parent: BaseSubpBody(f_subp_spec: spec@SubpSpec)
                          when stdlib.is_controlling_param_type(spec.p_returns(), spec),
            f_name: Identifier(
                p_referenced_decl(): BaseTypeDecl(
                    # where type is tagged and the root type is an interface
                    p_is_tagged_type(): true,
                    p_root_type(): BaseTypeDecl(p_is_interface_type(): true)))))))
    # and the type of node is a class wide access
    when node.f_prefix.p_referenced_decl()?.p_type_expression?()?.
         p_designated_type_decl?()?.p_accessed_type?() is ClasswideTypeDecl
