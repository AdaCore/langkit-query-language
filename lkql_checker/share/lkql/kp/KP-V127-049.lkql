# Flag actual parameters of generic instantiations that are functions taking
# two standard integer types and returning a boolean, when the formal parameter
# is an operator function.

import stdlib

fun has_two_integer_params(params) =
    (from params select DefiningName).length == 2 and not
    [t for t in (from params select TypeExpr)
       if not (t.p_designated_type_decl().p_base_subtype() is base@BaseTypeDecl
               when base.p_is_int_type()
                and base.p_canonical_fully_qualified_name().starts_with("standard."))]

fun is_operator(params, expr) =
    stdlib.get_parameter(params, expr).p_is_operator_name()

@check(message="possible occurrence of KP V127-049", impact="21.*,22.1")
fun kp_v127_049(node) =
    # Look for parameter associations of generic instantiations
    node is ParamAssoc(parent is AssocList(parent is inst@GenericInstantiation),
                       f_r_expr is expr@Name)
    # where the parameter is a subprogram
    when expr.p_referenced_decl() is decl@(BaseSubpBody | ClassicSubpDecl |
                                           SubpBodyStub)
     # returning a boolean (sub)type
     when (decl.f_subp_spec.f_subp_returns is t@TypeExpr
           when t.p_designated_type_decl().p_base_subtype() == t.p_bool_type())
      # taking two integer (sub)types
      and has_two_integer_params(decl.f_subp_spec.f_subp_params)
      # and whose formal is an operator
      and is_operator(inst.p_inst_params(), expr)

