# Flag instantiations of Ada.Unchecked_Deallocation if the Object actual is
# a tagged type or a class-wide type when one of its derived type has an
# alignment set to more than the Alignment parameter, either directly or
# indirectly via one of its fields.

import stdlib

@memoize
fun is_over_aligned(t, alignment) = {
    val aspect=t.p_get_aspect("Alignment");
    (aspect.exists and aspect.value is IntLiteral and
     aspect.value.p_denoted_value() > alignment) or
    [f for f in from t select ComponentDef or DiscriminantSpec
     if is_over_aligned(f.f_type_expr.p_designated_type_decl(), alignment)]
}

fun check_type(node, alignment) = {
    val type = node.f_r_expr.p_referenced_decl();
    if stdlib.is_classwide_type(type) then
        [t for t in type.p_find_all_derived_types(stdlib.list_of_units())
         if is_over_aligned(t, alignment)]
    else type.p_is_tagged_type() and is_over_aligned(type, alignment)
}

fun message(n, alignment) = {
    val params = n.f_params;
    val type = (if not params[1].f_designator or
                   params[1].f_designator.p_name_is("object")
                then params[1] else params[2]).f_r_expr.p_referenced_decl();
    val res = if stdlib.is_classwide_type(type) then
                  [t for t in type.p_find_all_derived_types(stdlib.list_of_units())
                   if is_over_aligned(t, alignment)][1]
              else type;
    {message: "possible occurrence of KP UA12-036, see type at " &
              stdlib.sloc_image(res), loc: n}
}

@unit_check(help="detect possible occurrences of KP UA12-036")
fun kp_ua12_036(unit, alignment: int = 16) = [
    message(n, alignment)
    for n in from unit.root select node@GenericSubpInstantiation
    when ({
         val name = stdlib.ultimate_subprogram_alias(node.p_designated_subp()).
                    p_fully_qualified_name();
         name == "Ada.Unchecked_Deallocation" or
         name == "Unchecked_Deallocation"})
     and node.f_params is params@AssocList
         when params.children_count == 2
          and if not params[1].f_designator or
                 params[1].f_designator.p_name_is("object")
              then check_type(params[1], alignment)
              else check_type(params[2], alignment)]
