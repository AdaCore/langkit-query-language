# Flag each occurrence of call (as given by parameter `forbidden`) performed
# outside library level package elaboration. Note that function renamings are
# not followed by this rule.

import stdlib

@check(message="call performed outside elaboration",
       category="Style", subcategory="Programming Practice")
fun calls_outside_elaboration(node, forbidden=[]) =
    node is BaseId(p_is_call() is true,
                   any stdlib.semantic_parent is BasicSubpDecl | SubpBody | TaskBody |
                                                 ExprFunction | EntryBody | ProtectedBody)
    when node.p_referenced_decl() is subp@BasicDecl
     when {
        val name = subp.p_canonical_fully_qualified_name();
        [c for c in forbidden if c.to_lower_case == name]
     }
