@check(message="declaration of global variable",
       category="Style", subcategory="Programming Practice")
fun global_variables(node, only_public=false) =
    |" Flag any variable declaration that appears immediately within the
    |" specification of a library package or library generic package. Variable
    |" declarations in nested packages and inside package instantiations are
    |" not flagged.
    |"
    |" This rule has the following (optional) parameter for the ``+R`` option and
    |" for LKQL rule options files:
    |"
    |" *Only_Public: bool*
    |"    If ``true``, do not flag variable declarations in private library (generic)
    |"    packages and in package private parts.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 2, 5
    |"
    |"    package Foo is
    |"        Var1 : Integer;    --  FLAG
    |"        procedure Proc;
    |"    private
    |"        Var2 : Boolean;    --  FLAG
    |"    end Foo;
    node is ObjectDecl(p_is_constant_object(): false,
                       p_semantic_parent(): s when {

        # Grab the enclosing package when the semantic parent is either
        val pkg = match s
            # 1. A private part and we're not looking only for public variables
            | p@PrivatePart when not only_public => p.p_semantic_parent()
            # 2. A package decl
            | p@PackageDecl when not (
                #  (if only public, filter private packages)
                only_public
                and p.parent is LibraryItem(f_has_private: PrivatePresent)
            ) => p
            # 3. A generic package decl
            | p@GenericPackageInternal when not (
                #  (if only public, filter private packages)
                only_public
                and p.parent.parent is LibraryItem(f_has_private: PrivatePresent)
            ) => p
            | * => null;

        # Filter out variables declared in nested packages
        pkg is BasePackageDecl(all parent: not BasePackageDecl)
    })
