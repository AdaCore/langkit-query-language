|" LKQL stdlib module
|"
|" This module contains functions that are shared accross lkql_checker rules.
|" These functions may be moved in the future in Libadalang or LKQL's builtin
|" library.

selector super_types
    |" Yields the chain of super types of the given type, as viewed from that
    |" type. Hence, for a type T which public view derives from a type A but
    |" private view derives from a type B (which itself derives from A),
    |" invoking this selector on the public view of T will yield A.
    | BaseTypeDecl => rec(*this.p_base_types())
    | * => ()

selector complete_super_types
    |" Yields the chain of super types of the given type in their most complete
    |" view. Hence, for a type T which public view derives from a type A but
    |" private view derives from a type B (which itself derives from A),
    |" invoking this selector on the public view of T will yield B and then A.
    | b@BaseTypeDecl when b.p_is_private() => {
        # We go through `p_base_subtype` to correctly handle SubtypeDecl nodes:
        # while they themselves don't have a next part, their base type may.
        val np = this.p_base_subtype().p_next_part();
        val typ = if np == null then this else np;
        rec(*typ.p_base_types())
    }
    | BaseTypeDecl =>
        rec(*this.p_base_types())
    | * => ()

selector semantic_parent
    |" Return all semantic parent nodes starting from a given node.
    | null     => ()
    | *        => rec(this.p_semantic_parent())

selector children_no_nested
    |" Return all children nodes starting from a base subprogram body, but not
    |" entering in nested bodies.

    | BodyNode =>
        # Don't recurse on bodies except if it's the root node (depth == 0)
        rec(*if depth == 0 then this.children else [])
    | null     => ()
    | *        => rec(*this.children)

fun all(iterable) =
    |" Return whether all elements in the given iterable are truthy
    [x for x in iterable if not x].length == 0

fun any(iterable) =
    |" Return whether at least one element in the given iterable is truthy
    [x for x in iterable if x]?[1] != ()

fun is_assert_pragma(s) =
    |" Return ``true`` if the string ``s`` is the name of an assert pragma

    s == "assert" or
    s == "assert_and_cut" or
    s == "assume" or
    s == "contract_cases" or
    s == "debug" or
    s == "invariant" or
    s == "loop_invariant" or
    s == "loop_variant" or
    s == "postcondition" or
    s == "precondition" or
    s == "predicate" or
    s == "refined_post"

fun is_assert_aspect(s) =
    |" Return ``true`` if the string ``s`` is the name of an assert aspect

    s == "static_predicate" or
    s == "dynamic_predicate" or
    s == "pre" or
    s == "post" or
    s == "type_invariant" or
    s == "contract_cases" or
    s == "invariant" or
    s == "predicate" or
    s == "refined_post" or
    s == "default_initial_condition" or
    s == "predicate_failure"

fun within_assert(node) =
    |" Return ``true`` if ``node`` is part of an assertion-related pragma or
    |" aspect.
    node is *(any parent:
        (p@PragmaNode when is_assert_pragma(p.f_id?.p_canonical_text()))
     | a@AspectAssoc
        when (match a.f_id
              | id@Identifier   =>
                  is_assert_aspect(id.p_canonical_text())
              | at@AttributeRef =>
                  at.f_attribute?.p_canonical_text() == "class"
              | *               => false))

@memoized
fun ultimate_alias(name, all_nodes=true, strip_component=false) =
    |" Return the ultimately designated ``ObjectDecl``, going through renamings
    |" This will not go through generic instantiations. If all_nodes is true,
    |" consider all kinds of nodes, otherwise consider only ``BaseId`` and
    |" ``DottedName``. If ``strip_component`` is true, go to the prefix when
    |" encountering a component, otherwise stop at the ``ComponentDecl``.

    if all_nodes or name is (BaseId | DottedName) then {
        val decl = name.p_referenced_decl();

        match decl
        | ObjectDecl(f_renaming_clause: r@RenamingClause) =>
            ultimate_alias(r.f_renamed_object, all_nodes, strip_component)
        | ComponentDecl when strip_component and name is DottedName =>
            ultimate_alias(name.f_prefix, all_nodes, strip_component)
        | *                                     => decl
    } else name

@memoized
fun ultimate_exception_alias(name) =
    |" Return the ultimately designated ``ExceptionDecl``, going through renamings
{
    val decl = name.p_referenced_decl();

    if decl is ExceptionDecl(f_renames: RenamingClause)
    then ultimate_exception_alias(decl?.f_renames?.f_renamed_object)
    else decl
}

@memoized
fun ultimate_subprogram_alias(name) =
    |" Return the ultimately designated ``BasicSubpDecl``, going through renamings
    if name is SubpRenamingDecl
    then ultimate_subprogram_alias(name.f_renames.f_renamed_object
                                       .p_referenced_decl())
    else name

@memoized
fun ultimate_generic_alias(name) =
    |" Return the ultimately designated ``GenericDecl``, going through renamings
    match name.p_referenced_decl()
    | r@GenericRenamingDecl => ultimate_generic_alias(r.f_renames.f_renamed_object)
    | *                     => name

@memoized
fun has_local_scope(n) =
    |" Return ``true`` if ``n`` is enclosed in a local scope
    n.parent is GenericFormalObjDecl or
    n is *(any semantic_parent: BasicSubpDecl | SubpBody | TaskBody |
                                  ExprFunction | BlockStmt | EntryBody |
                                  ProtectedBody)

fun is_local_object(o) =
    |" Return ``true`` if ``o`` represents a local ``ObjectDecl`` or ``ParamSpec``
    o is (ParamSpec | ObjectDecl when has_local_scope(o))

@memoized
fun is_in_package_scope(o) =
    |" Return ``true`` if ``o`` is immediately in the scope of a package spec,
    |" body or generic package.
    match o?.parent
    | BasePackageDecl     => true
    | PackageBody         => true
    | SingleTaskDecl      => false
    | TaskTypeDecl        => false
    | TaskBody            => false
    | BlockStmt           => false
    | BaseSubpBody        => false
    | EntryBody           => false
    | SingleProtectedDecl => false
    | ProtectedTypeDecl   => false
    | null                => false
    | *                   => is_in_package_scope(o?.parent)

fun is_program_unit(n) =
    |" Return ``true`` if ``n`` is a program unit spec, body or stub
    n is (SubpDecl | AbstractSubpDecl | BaseSubpBody
      | BasePackageDecl | PackageBody | GenericPackageInstantiation
      | GenericDecl | GenericInstantiation
      | SingleTaskDecl | TaskTypeDecl | TaskBody
      | SubpBodyStub | ProtectedBodyStub | PackageBodyStub | TaskBodyStub
      | SingleProtectedDecl | ProtectedTypeDecl)

@memoized
fun is_in_library_unit_body(o) =
    |" Return ``true`` if ``o`` is located in a library unit body
    match o?.parent
    | s@SubpBody    => s?.parent is LibraryItem
    | p@PackageBody => p?.parent is LibraryItem
    | null          => false
    | *             => is_in_library_unit_body(o?.parent)

fun param_pos(n, pos: int = 0) =
    |" Return the position of node ``n`` in its current list of siblings
    if not n then pos else param_pos(n?.previous_sibling(), pos+1)

# TODO: move this in LAL
fun is_predefined_op(op, follow_renamings=false) =
    |" Return true if ``op`` is a predefined operator; ``op`` can be an Op or
    |" a CallExpr.
{
    val ref = if follow_renamings
              then ultimate_subprogram_alias(op.p_referenced_decl())
              else op.p_referenced_decl();
    op is (Op | CallExpr(p_is_call(): true)) and
    if ref then ref.p_is_predefined_operator()
}

fun is_standard_numeric(n) =
    |" Return ``true`` if ``n`` is the name of a numeric type or subtype in Standard
    n == "standard.integer" or
    n == "standard.natural" or
    n == "standard.positive" or
    n == "standard.short_short_integer" or
    n == "standard.short_integer" or
    n == "standard.long_integer" or
    n == "standard.long_long_integer" or
    n == "standard.long_long_long_integer" or
    n == "standard.short_float" or
    n == "standard.float" or
    n == "standard.long_float" or
    n == "standard.long_long_float" or
    n == "standard.duration"

fun is_standard_boolean(n) =
    |" Return true if the root type of ``n`` is ``Standard.Boolean``.
    n.p_expression_type() is t@BaseTypeDecl
    when t.p_root_type() == n.p_bool_type()

fun full_root_type(t) =
    |" Return the full view of the root type of ``t``, traversing subtypes,
    |" derivations and privacy.
{
    val res = t.p_root_type();
    if res.p_is_private() then {
        val full_view = res.p_full_view();
        if full_view == res then res else full_root_type(full_view)
    } else res
}

fun is_predefined_type(n) =
    |" Return true if ``n`` is the name of a type declared in a predefined
    |" package spec.
{
    # Retrieve the root enclosing package
    val packages = [
        p for p in full_root_type(n.p_referenced_decl())
                                   .parents(include_self=false)
        if p is BasePackageDecl
    ].to_list;

    packages and packages[packages.length] is
        BasePackageDecl(f_package_name:
                        DefiningName(p_canonical_part(): name@DefiningName))
        when name.p_name_is("Standard")
          or name.p_name_is("System")
          or name.p_name_is("Ada")
          or name.p_name_is("Interfaces")
}

selector parent_decl_chain
    |" Return all parent basic decl nodes starting from a given node, using
    |" semantic parent.
    |" When on a subprogram or package body, go to the declaration
    |" This allows us to, if in a generic template, always find back the
    |" generic formal.
    | null         => ()
    | (BaseSubpBody | PackageBody) => rec({
        val prev_part = this.p_decl_part();

        # Some subprogram bodies don't have a previous part because they're
        # also the decl. In that case, return the semantic parent.
        if prev_part then prev_part else this.p_semantic_parent()
    })
    | *            => rec(this.p_semantic_parent())

fun closest_enclosing_generic(n) =
    |" If ``n`` is part of a generic package or subprogram, whether it is
    |" instantiated or not, then return it.
{
    val n = from n through parent_decl_chain select first GenericDecl;
    if n then n.p_get_uninstantiated_node() else null
}

# TODO: move to LAL
fun in_generic_instance(n) =
    |" Return true if ``n`` is part of a generic instantiation.
    n.p_generic_instantiations().length != 0

fun in_generic_template(n) =
    |" Return true if ``n`` is declared as part of a generic template (spec
    |" or body). Return false otherwise, including inside a generic
    |" instantiation.
    n and {
        val closest_gen = closest_enclosing_generic(n);
        val insts = n.p_generic_instantiations();
        val last_inst = if insts then insts[insts.length] else null;

        # Check that the node is in a generic and that either
        # 1. It's part of no instantiations
        (closest_gen and last_inst == null)

        # 2. The last instantiation on the instantiation stack does not
        # correspond to the innermost generic that we found.
        or (last_inst != null
            and last_inst.p_designated_generic_decl().p_get_uninstantiated_node()
           != closest_gen)
    }

fun enclosing_block(n) =
    |" Return the first ``DeclBlock`` enclosing ``n`` if any, ``null``
    |" otherwise.
{
    val block = [p for p in n.parents(include_self=false)
                  if p is DeclBlock]?[1];
    if block then block else null
}

@memoized
fun enclosing_body(n) =
    |" Return the first BodyNode enclosing n if any, null otherwise
{
    val body = [p for p in n.parents(include_self=false)
                  if p is BodyNode]?[1];
    if body then body else null
}

@memoized
fun enclosing_package(n) =
    |" Return the first BasePackageDecl or PackageBody enclosing n if any,
    |" null otherwise
{
    val pkg = [p for p in n.parents(include_self=false)
                  if p is (BasePackageDecl | PackageBody)]?[1];
    if pkg then pkg else null
}

fun ultimate_designated_generic_subp(subp_inst) =
    |" Given a node representing an instantiation of a generic subprogram,
    |" return that non-instantiated subprogram after resolving all renamings.
{
    val inst = subp_inst.p_designated_subp();
    val aliased = ultimate_subprogram_alias(inst);
    aliased.p_get_uninstantiated_node()
}

# TODO: move to LAL
fun is_classwide_type(t) =
    |" Return true if t is a classwide TypeDecl.
    t is (ClasswideTypeDecl |
         BaseSubtypeDecl(p_base_subtype(): ClasswideTypeDecl))

# TODO: move to LAL
fun is_controlling_param_type(t, spec) =
    |" Return true if `t` is a TypeExpr corresponding to a controlling
    |" parameter of the subprogram spec `spec`.
    t is TypeExpr(p_designated_type_decl(): d@BaseTypeDecl)
    when ((d.p_is_tagged_type() and not is_classwide_type(d)) or
          (d is AnonymousTypeDecl and
           d.p_accessed_type()?.p_is_tagged_type() and
           not is_classwide_type(d.p_accessed_type())))
     # Check that t is in the same package decl as spec
     and (enclosing_package(t) == enclosing_package(spec))

# TODO: move to LAL?
fun is_constructor(spec) =
    |" Return true if spec is a subprogram spec of a constructor, that is, has
    |" a controlling result and no controlling parameter.
    is_controlling_param_type(spec.p_returns(), spec)
     and not [p for p in spec.p_params()
              if is_controlling_param_type(p.f_type_expr, spec)]

fun is_constant_object(node) =
    |" Return true is node represents a constant object, false otherwise
    node is (ObjectDecl | ParamSpec) and node.p_is_constant_object()

fun is_unchecked_conversion(node) =
    |" Return true if node represents an instantiation of the
    |" `Ada.Unchecked_Conversion` subprogram
    node is GenericSubpInstantiation
    when ({
        val subp = ultimate_designated_generic_subp(node);
        val fqn = subp.p_fully_qualified_name();
        fqn == "Ada.Unchecked_Conversion" or fqn == "Unchecked_Conversion"
    })

fun is_unchecked_deallocation(node) =
    |" Return true if node represents an instantiation of the
    |" `Ada.Unchecked_Deallocation` subprogram
    node is GenericSubpInstantiation
    when ({
        val subp = ultimate_designated_generic_subp(node);
        val fqn = subp.p_fully_qualified_name();
        fqn == "Ada.Unchecked_Deallocation" or fqn == "Unchecked_Deallocation"
    })

fun is_composite_type(decl) =
    |" Given a BaseTypeDecl, returns whether the declared type is a composite
    |" Ada type (record, array, task or protected).
    {
        val v = decl.p_full_view();
        v.p_is_array_type() or
        v.p_is_record_type() or
        v.p_root_type() is (TaskTypeDecl | ProtectedTypeDecl)
    }

@memoized
fun get_subp_body(node) =
    |" Return the SubpBody, TaskBody or ExprFunction corresponding to node,
    |" if any, null otherwise.
    match node
    | SubpRenamingDecl =>
        get_subp_body(node.f_renames.f_renamed_object.p_referenced_decl())
    | BaseSubpBody     => node
    | EnumLiteralDecl  => null
    | ClassicSubpDecl  => node.p_body_part()
    | GenericSubpInstantiation
                       => node.p_designated_generic_decl().p_body_part()
    | SubpBodyStub     => node.p_body_part_for_decl()
    | EntryDecl        =>
        # For a task entry decl, return the task body as an over approximation
        # TODO: replace p_next_part_for_decl once U920-016 if fixed.
        (match node.p_semantic_parent()
         | d@SingleTaskTypeDecl => d.parent.p_next_part_for_decl()
         | d@TaskTypeDecl       => d.p_next_part_for_decl()
         | *                    => node.p_body_part())
    | TaskTypeDecl     => node.p_next_part_for_decl()
    | BasicDecl when node.p_is_subprogram()
                       => node.p_body_part_for_decl()
    | *                => null

fun is_limited_type(type) =
    |" Return `true` if type is a limited type
    type.f_type_def is
        ((def@(DerivedTypeDef | PrivateTypeDef | RecordTypeDef)
         when def.f_has_limited.p_as_bool()) |
    InterfaceTypeDef(f_interface_kind: InterfaceKindLimited))

@memoized
fun list_of_units() =
    |" Return a (cached) list of all known units
    units().to_list

fun sloc_image(node) =
    |" Return a string with basename:line corresponding to node's sloc
{
    val tok = node.token_start();
    tok.unit.name.base_name & ":" & img(tok.start_line)
}

fun find_comment(token, name) =
    |" Return true if a comment token immediately following the previous
    |" "begin" keyword is found and contains only the provided name.

    if token.kind == "comment" and
       token.previous().previous().kind == "begin"

    then token.text.ends_with(name) and
         match token.text.substring(1, token.text.length - name.length)
         | "^-- *$" => true
         | *        => false

    else token.kind != "begin" and find_comment(token.previous(), name)

fun first_non_blank(s, ind=1) =
    |" Return the index of the first non blank character of s, starting at ind
    match s.substring(ind, ind)
    | "[ \t]" => first_non_blank(s, ind + 1)
    | *       => ind

fun next_non_blank_token_line(token) =
    |" Return the start line of the next non blank token, or the next line for
    |" a comment, or 0 if none.
{
    val n = token.next();
    match n.kind
    | "whitespace"  => next_non_blank_token_line(n)
    | "comment"     => n.start_line + 1
    | "termination" => 0
    | "no_token"    => 0
    | *             => n.start_line
}

fun previous_non_blank_token_line(token) =
    |" Return the end line of the previous non blank token, or the previous
    |" line for a comment, or 0 if none.
{
    val p = token.previous();
    match p.kind
    | "whitespace"  => previous_non_blank_token_line(p)
    | "comment"     => p.start_line - 1
    | "termination" => 0
    | "no_token"    => 0
    | *             => p.end_line
}

fun max(x, y) =
    |" Return the max value between x and y
    if x > y then x else y

fun range_values(left, right) =
    |" Return the number of values covered between left and right expressions,
    |" -1 if it cannot be determined.
    if right.p_is_static_expr() and left.p_is_static_expr()
    then max(right.p_eval_as_int() - left.p_eval_as_int() + 1, 0)
    else -1

fun number_of_values(type) =
    |" Return the number of values covered by a given BaseTypeDecl, -1 if
    |" this value cannot be determined.
    match type
    | SubtypeDecl(f_subtype: *(f_constraint: RangeConstraint(f_range: *(f_range: op@BinOp)) => range_values(op.f_left, op.f_right)
    | SubtypeDecl => number_of_values(type.f_subtype.f_name.p_referenced_decl())
    | * when type == type.p_universal_int_type() => -1
    | TypeDecl(f_type_def: type_def) => match type_def
        | EnumTypeDef(f_enum_literals: e) => (
            match type.f_name?.p_canonical_fully_qualified_name()
            | "standard.character"           => 256
            | "standard.wide_character"      => 65536
            | "standard.wide_wide_character" => 2147483648
            | * => e.children_count
        )
        | m@ModIntTypeDef when m.f_expr.p_is_static_expr() => m.f_expr.p_eval_as_int()
        | s@SignedIntTypeDef when s.f_range.f_range is BinOp(f_op: OpDoubleDot) => {
            val op = s.f_range.f_range;
            range_values(op.f_left, op.f_right)
          }
        | DerivedTypeDef(f_subtype_indication: *(f_constraint: RangeConstraint(f_range: *(f_range: op@BinOp)))) =>
            range_values(op.f_left, op.f_right)
        | DerivedTypeDef(f_subtype_indication: s) => number_of_values(s.f_name.p_referenced_decl())
        | *                     => -1

fun has_interfaces(n) =
    |" Return true if ``n`` is an interface or implements some interfaces
    n.p_is_interface_type() or
    n is TypeDecl(any super_types: TypeDecl(p_is_interface_type(): true))

@memoized
fun propagate_exceptions(body) =
    |" Return true if the given body may propagate an exception, namely if:
    |"
    |" - it has no exception handler with a ``when others`` choice;
    |" - or it has an exception handler containing a raise statement, or a call
    |"
    |" to ``Ada.Exception.Raise_Exception`` or
    |" ``Ada.Exception.Reraise_Occurrence``.
    not (# Look for a when others handler
         [e for e in body.f_stmts.f_exceptions.children
          if e is ExceptionHandler and
              (from e.f_handled_exceptions
               select first OthersDesignator) != null] and
          # and no (re)raise statement
          (from body.f_stmts.f_exceptions.children
           select first (RaiseStmt |
               CallStmt(f_call: c@CallExpr) when {
                   val name = c.f_name.p_referenced_decl()
                               ?.p_fully_qualified_name?();
                   name == "Ada.Exceptions.Raise_Exception" or
                   name == "Ada.Exceptions.Reraise_Occurrence" })) == null)

fun is_by_copy(param) =
    |" Return true if ``param`` (a ``ParamActual``) has a non aliased by-copy
    |" type
    not (param.param.parent.parent is ParamSpec(f_has_aliased: AliasedPresent)) and
    param.actual.p_expression_type() is expr@BaseTypeDecl
    when expr.p_root_type().p_full_view().p_root_type() is t@BaseTypeDecl
    when t.p_is_discrete_type() or t.p_is_access_type() or
         t.p_is_fixed_point() or t.p_is_float_type()

fun get_parameter(params, actual) =
    |" Given a ``List[ParamActual]``, return the parameter corresponding to
    |" actual, null if actual is not found.
{
    fun find(params, actual, n) =
        if n == 0 then null
        else if params[n].actual == actual then params[n].param
        else find(params, actual, n - 1);
    find(params, actual, params.length)
}

@memoized
fun strip_conversions(node) =
    |" Strip ``ParenExpr``, ``QualExpr`` and type conversions
    match node
    # Strip parenthesis
    | ParenExpr => strip_conversions(node.f_expr)
    # Strip type qualifications
    | QualExpr  => strip_conversions(node.f_suffix)
    # Strip type conversions
    | CallExpr(p_kind(): "type_conversion")
                => strip_conversions(node.f_suffix[1].f_r_expr)
    | *         => node

fun ultimate_prefix(n) =
    |" Return ``n.f_prefix`` as long as ``n`` is a ``DottedName`` and
    |" designates a ``ComponentDecl``, ``n`` otherwise.
    if n is DottedName and n.p_referenced_decl() is ComponentDecl
    then ultimate_prefix(n.f_prefix)
    else n

@memoized
fun default_bit_order() =
    |" Return the value of ``System.Default_Bit_Order`` if any ``with System``
    |" clause is found, null otherwise.
{
    val w = (select first w@WithClause
             when from w select first Name(p_name_is("System"): true));

    if w == null then null
    else {
        val system = from w select first Name(p_name_is("System"): true);

        (from system.p_referenced_decl()
         select first decl@ObjectDecl(f_has_constant: ConstantPresent,
                                      f_default_expr: not null)
         when decl.p_canonical_fully_qualified_name()
              == "system.default_bit_order").f_default_expr
    }
}

fun has_non_default_sso(decl) =
    |" Return true if ``decl`` has a ``Scalar_Storage_Order`` aspect whose
    |" value cannot be determined to be equal to
    |" ``System.Default_Storage_Order``.
{
    val aspect = decl.p_get_aspect("Scalar_Storage_Order");

    aspect.exists and match default_bit_order()
    | null   => true
    | expr => match expr.text
        | "High_Order_First" =>
            ultimate_alias(aspect.value).p_canonical_fully_qualified_name()
            != "system.bit_order.high_order_first"
        | "Low_Order_First" =>
            ultimate_alias(aspect.value).p_canonical_fully_qualified_name()
            != "system.bit_order.low_order_first"
        | * => true
}

fun depends_on_mutable_discriminant(component_decl) =
    |" Given a `ComponentDecl`, return whether it depends on a mutable
    |" discriminant value coming from its parent record declaration.
    |" The component depends on a discriminant if it uses it in its subtype
    |" constraint or if it is a variant.
    any([
        id.p_referenced_decl() is DiscriminantSpec(f_default_expr: not null)
        for id in from component_decl.p_type_expression().p_subtype_constraint()
                  select Identifier &
                  [v.f_discr_name
                   for v in from component_decl through parent select VariantPart].to_list
    ])

selector component_types
    |" Return all the ``BaseTypeDecl`` corresponding to all fields of a given
    |" type, including their full views, base types and subtypes.
    | TypeDecl(f_type_def: d@RecordTypeDef) =>
        rec(*(from d select ComponentDecl), ())
    | TypeDecl(f_type_def: DerivedTypeDef(f_record_extension:
                                            def@BaseRecordDef)) =>
        rec(*([this.p_base_type()] & (from def select ComponentDecl)), ())
    | TypeDecl(f_type_def: DerivedTypeDef) => rec(this.p_base_type())
    | TypeDecl(f_type_def: ArrayTypeDef)   => rec(this.p_comp_type())
    | TypeDecl(f_type_def: PrivateTypeDef) => rec(this.p_full_view())
    | SubtypeDecl                            => rec(this.p_base_subtype())
    | ComponentDecl(f_component_def: ComponentDef(f_type_expr:
                    ind@SubtypeIndication))  =>
        rec(ind.f_name.p_referenced_decl())
    | *                                      => ()

selector full_parent_types
    |" Return all base (sub)types full views
    | SubtypeDecl       => rec(this.p_base_subtype().p_full_view())
    | ClasswideTypeDecl => rec(this.f_name.p_basic_decl().p_full_view())
    | BaseTypeDecl      => rec(*this.p_full_view().p_base_types())
    | *            => ()
