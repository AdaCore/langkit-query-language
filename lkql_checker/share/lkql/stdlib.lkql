|" LKQL stdlib module
|"
|" This module contains functions that are shared accross lkql_checker rules.
|" All of them should be both:
|"
|" * Candidates for Libadalang integration
|" * Candidates for integration in lkql's stdlib

fun is_assert_pragma(s) =
    |" Return ``true`` if the string ``s`` is the name of an assert pragma

    s == "assert" or
    s == "assert_and_cut" or
    s == "assume" or
    s == "contract_cases" or
    s == "debug" or
    s == "invariant" or
    s == "loop_invariant" or
    s == "loop_variant" or
    s == "postcondition" or
    s == "precondition" or
    s == "predicate" or
    s == "refined_post"

fun is_assert_aspect(s) =
    |" Return ``true`` if the string ``s`` is the name of an assert aspect

    s == "static_predicate" or
    s == "dynamic_predicate" or
    s == "pre" or
    s == "post" or
    s == "type_invariant" or
    s == "contract_cases" or
    s == "invariant" or
    s == "predicate" or
    s == "refined_post" or
    s == "default_initial_condition" or
    s == "predicate_failure"

fun ultimate_alias(name) =
    |" Return the ultimately designated ``ObjectDecl``, going through renamings
    |" This will not go through generic instantiations

    if name is (BaseId or DottedName) then {
        val decl = name?.p_referenced_decl();
        val ren = match decl
            | ObjectDecl => decl?.f_renaming_clause
            | *          => null;

        if ren == null
        then decl
        else ultimate_alias(ren?.f_renamed_object)
    } else name

fun local_scope(e) =
    |" Return ``true`` if ``e`` represents a local scope or a generic formal
    e is SubpBody or
         TaskBody or
         BlockStmt or
         EntryBody or
         ProtectedBody or
         GenericFormalObjDecl

fun has_local_scope(n) =
    |" Return ``true`` if ``n`` is enclosed in a local scope
    [p for p in n?.parents() if local_scope(p)].length > 0

fun is_local_object(o) =
    |" Return ``true`` if ``o`` represents a local ``ObjectDecl`` or ``ParamSpec``
    o is ParamSpec or
         (ObjectDecl when has_local_scope(o))

fun param_pos(n, pos: int = 0) =
    |" Return the position of node ``n`` in its current list of siblings
    if n == null then pos else param_pos(n?.previous_sibling, pos+1)

