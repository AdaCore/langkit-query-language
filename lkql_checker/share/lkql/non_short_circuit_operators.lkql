import stdlib

fun operator_image(node) =
    |" Return the string of a given AND/OR operator
    match node
    | OpAnd      => "AND"
    | OpOr       => "OR"
    | c@CallExpr => (if c.p_relative_name()?.p_name_is("\"and\"")
                     then "AND" else "OR")
    | *          => "unknown"

@unit_check(help="use of predefined AND and OR for boolean types",
            remediation="EASY",
            category="Style", subcategory="Programming Practice")
fun non_short_circuit_operators(unit, except_assertions=false) =
    |" Flag all calls to predefined ``and`` and ``or`` operators for
    |" any boolean type. Calls to
    |" user-defined ``and`` and ``or`` and to operators defined by renaming
    |" declarations are not flagged. Calls to predefined ``and`` and ``or``
    |" operators for modular types or boolean array types are not flagged.
    |"
    |" The rule has an optional parameter for the ``+R`` option and for LKQL rule
    |" options files:
    |"
    |" *Except_Assertions: bool*
    |"    If ``true``, do not flag the use of non-short-circuit_operators inside
    |"    assertion-related pragmas or aspect specifications.
    |"
    |" A pragma or an aspect is considered as assertion-related if its name
    |" is from the following list:
    |"
    |" * ``Assert``
    |" * ``Assert_And_Cut``
    |" * ``Assume``
    |" * ``Contract_Cases``
    |" * ``Debug``
    |" * ``Default_Initial_Condition``
    |" * ``Dynamic_Predicate``
    |" * ``Invariant``
    |" * ``Loop_Invariant``
    |" * ``Loop_Variant``
    |" * ``Post``
    |" * ``Postcondition``
    |" * ``Pre``
    |" * ``Precondition``
    |" * ``Predicate``
    |" * ``Predicate_Failure``
    |" * ``Refined_Post``
    |" * ``Static_Predicate``
    |" * ``Type_Invariant``
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 1, 3
    |"
    |"    B1 := I > 0 and J > 0;       --  FLAG
    |"    B2 := I < 0 and then J < 0;
    |"    B3 := I > J or J > 0;        --  FLAG
    |"    B4 := I < J or else I < 0;
    [
        {message: "use of predefined " & operator_image(n) & " for boolean type",
         loc: n}
        for n in from unit.root select node@(((OpAnd | OpOr)
                  when stdlib.is_predefined_op(node)
                   and stdlib.is_standard_boolean(node.parent)
                   and stdlib.is_standard_boolean(node.parent?.f_left))
         | CallExpr(p_relative_name(): n@Name
                     when n?.p_name_is("\"and\"") or n?.p_name_is("\"or\""))
            when stdlib.is_predefined_op(node)
             and stdlib.is_standard_boolean(node)
             and stdlib.is_standard_boolean(node.f_suffix[1]?.f_r_expr))
        when not (except_assertions and stdlib.within_assert(node))
    ]
