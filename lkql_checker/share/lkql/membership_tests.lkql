# Flag use of membership test expression.
# This rule has the following parameters:
# - Multi_Alternative_Only: Flag only those membership test expressions that
#   have more than one membership choice in the membership choice list.
# - Float_Types_Only: Flag only those membership test expressions that checks
#   objects of floating point type and private types whose completions are
#   floating-point types.
# - Except_Assertions: Do not flag a membership test expression if it is a
#   subcomponent of the following constructs[...]
# These three parameters are independent on each other.

import stdlib

@check(message="membership test")
fun membership_tests(node, multi_alternative_only=false, float_types_only=false, except_assertions=false) =
    node is MembershipExpr
    and ((not multi_alternative_only) or node.f_membership_exprs[2] != null)
    and ((not float_types_only)
         or node.f_expr.p_expression_type().p_is_float_type())
    and ((not except_assertions)
      or not ((node is *(any parent is p@Pragma
               when stdlib.is_assert_pragma(p.f_id?.p_canonical_text())))
              or node is *(any parent is a@AspectAssoc
                 when (match a.f_id
                       | id@Identifier   =>
                           stdlib.is_assert_aspect(id?.p_canonical_text())
                       | at@AttributeRef =>
                           at?.f_attribute?.p_canonical_text() == "class"
                       | *               => false))))
