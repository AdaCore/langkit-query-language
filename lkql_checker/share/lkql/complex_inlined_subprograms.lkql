# Flag a subprogram (or generic subprogram, or instantiation of a subprogram)
# if pragma Inline is applied to it and at least one of the following
# conditions is met:
# - it contains at least one complex declaration such as a subprogram body,
#   package, task, protected declaration, or a generic instantiation (except
#   instantiation of Ada.Unchecked_Conversion);
# - it contains at least one complex statement such as a loop, a case or an if
#   statement;
# - the number of statements exceeds a value specified by the N rule parameter;
# Subprogram renamings are also considered.

import stdlib

fun complex_declaration(decls) =
    |" Return the first complex declaration found in decls, null otherwise
    if decls is *(any children is c@* when match c
                  | SubpBody                    => true
                  | PackageDecl                 => true
                  | TaskBody                    => true
                  | ProtectedBody               => true
                  | GenericPackageInstantiation => true
                  | g@GenericSubpInstantiation  =>
                      g.p_designated_subp()?.p_canonical_fully_qualified_name()
                      != "ada.unchecked_conversion"
                  | * => false)
    then c else null

fun complex_statement(stmts) =
    |" Return the first complex statement found in stmts, null otherwise
    if stmts is *(any children is c@Stmt when match c
                  | BaseLoopStmt => true
                  | CaseStmt     => true
                  | IfStmt       => true
                  | *            => false)
    then c else null

fun is_complex_subp(node, n) =
    |" Return true is node is a complex subprogram body as defined above
    complex_declaration(node?.f_decls) != null or
    complex_statement(node?.f_stmts) != null or
    # Check for number of statements
    [s for s in node?.f_stmts?.f_stmts?.children if s is Stmt].length > n

@unit_check
fun complex_inlined_subprograms(unit, n : int = 5) = [
    {message: if complex_declaration(stdlib.get_subp_body(nod)?.f_decls) is
                 decl@AdaNode
              then "complex declaration in inlined subprogram (line " &
                   img(decl?.token_start().start_line) & ")"
              else (if complex_statement(stdlib.get_subp_body(nod)?.f_stmts) is
                       stmt@Stmt
                    then "branching in inlined subprogram (line " &
                         img(stmt?.token_start().start_line) & ")"
                    else "too many statements in inlined subprogram"),
     loc: nod?.p_defining_name()}
    for nod in from unit.root select node@(SubpBody or GenericSubpInstantiation)
    when node.p_has_aspect("Inline")
     and is_complex_subp(stdlib.get_subp_body(node), n)]
