fun check_others(stmts) =
    stmts.f_exceptions is AdaNodeList(all children(depth=3)
                                     : not OthersDesignator)

@unit_check(help="no OTHERS choice in exception handlers",
            category="Style", subcategory="Programming Practice")
fun no_others_in_exception_handlers(unit,
                                    all_handlers=false,
                                    subprogram=false,
                                    task=false) =
    |" Flag handled sequences of statements that do not contain exception
    |" handler with ``others``, depending on the rule parameter(s)
    |" specified.
    |"
    |" This rule has three parameters for the ``+R`` option and for LKQL rule
    |" options files:
    |"
    |" *Subprogram: bool*
    |"    If ``true``, flag a subprogram body if the handled sequence of statements
    |"    of this body does not contain an exception handler with ``others`` choice.
    |"    This includes the case when the body does not contain any exception handler
    |"    at all. The diagnostic message points to the beginning of the subprogram body.
    |"
    |" *Task: bool*
    |"    If ``true``, flag a task body if the handled sequence of statements of this
    |"    body does not contain an exception handler with ``others`` choice. This
    |"    includes the case when the body does not contain any exception handler at all.
    |"    The diagnostic message points to the beginning of the task body.
    |"
    |" *All_Handlers: bool*
    |"    If ``true``, flag a handled sequence of statements if it does contain at least
    |"    one exception handler, but it does not contain an exception handler with
    |"    ``others`` choice. If a handled sequence of statements does not have any
    |"    exception handler, nothing is flagged for it. The diagnostic message points
    |"    to the ``EXCEPTION`` keyword in the handled sequence of statements.
    |"
    |" At least one parameter should be specified for the rule. If
    |" more than one parameter is specified, each of the specified
    |" parameters has its effect.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 5
    |"
    |"    procedure Other (I, J : in out Integer) is
    |"    begin
    |"       begin
    |"          I := I + 1;
    |"       exception                --  FLAG (if All_Handlers parameter is set)
    |"          when Constraint_Error => null;
    |"       end;
    |"
    |"    exception                    --  NO FLAG
    |"       when Constraint_Error =>
    |"          I := Integer'Last;
    |"       when others =>
    |"          I := J;
    |"          raise;
    |"    end Other;
    [
        (match n
         | TaskBody => {message: "no OTHERS exception handler in task", loc: n}
         | SubpBody => {message: "no OTHERS exception handler in subprogram",
                        loc: n}
         | *        => {message: "no OTHERS choice in exception handler",
                        loc: n.f_exceptions.token_start().previous()})
        for n in from unit.root select
            ((node@((TaskBody when task) | (SubpBody when subprogram))
             when if node.f_stmts.f_exceptions[1] then check_others(node.f_stmts))
            | node@HandledStmts
               when all_handlers and node.f_exceptions[1] and
                    check_others(node))
    ]
