import stdlib

fun is_operator(s) =
    |" Whether given subprogram declaration of body node represents an
    |" operator.
    s is (BasicSubpDecl | BaseSubpBody)
    when s.p_defining_name().p_is_operator_name()

fun decls_not_only_operator(pkg) =
    |" Whether the given package name identifies a package that defines other
    |" symbols than operators.
    {
        val decls = match pkg.p_referenced_decl()
            | p@BasePackageDecl     => p.f_public_part.f_decls.children
            | p@PackageRenamingDecl => p.p_final_renamed_package()
                                        .f_public_part.f_decls.children
            | p@GenericPackageInstantiation => p.p_designated_generic_decl()
                                                .f_package_decl.f_public_part
                                                .f_decls.children
            | *                     => [];
        not decls or
        stdlib.any([s for s in decls if not is_operator(s)])
    }

@unit_check(help="use clause", category="Feature", rule_name="USE_Clauses")
fun use_clauses(unit, exempt_operator_packages=false, allowed=[]) =
    |" Flag names mentioned in use clauses. Use type clauses and names mentioned
    |" in them are not flagged.
    |"
    |" This rule has the following optional parameter for the ``+R`` option and for
    |" LKQL rule options files:
    |"
    |" *Exempt_Operator_Packages: bool*
    |"    If ``true``, do not flag a package name in a package use clause if it refers
    |"    to a package that only declares operators in its visible part.
    |"
    |" .. note::
    |"    This rule has another parameter, only available when using an LKQL rule
    |"    options file: ``allowed``. It is a list of Ada names describing packages
    |"    to exempt from begin flagged when used in "use" clauses. Strings in this
    |"    list are case insensitive. Example:
    |"
    |"    .. code-block:: lkql
    |"
    |"       val rules = @{
    |"          Use_Clauses: {Allowed: ["Ada.Strings.Unbounded", "Other.Package"]}
    |"       }
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 10, 11
    |"
    |"    package Pack is
    |"       I : Integer;
    |"    end Pack;
    |"
    |"    package Operator_Pack is
    |"       function "+" (L, R : Character) return Character;
    |"    end Operator_Pack;
    |"
    |"    with Pack, Operator_Pack;
    |"    use Pack;                   --  FLAG if "Pack" is not in Allowed
    |"    use Operator_Pack;          --  FLAG only if Exempt_Operator_Packages is false
    {
        val canonical_allowed = [s.to_lower_case for s in allowed].to_list;
        [
            {message: "use clause", loc: p}
            for p in concat(
                [
                    [
                        c for c in use.f_packages.children
                        if not c.p_referenced_decl()?.p_canonical_fully_qualified_name?() in canonical_allowed
                    ].to_list
                    for use in from unit.root select UsePackageClause
                ].to_list
            )
            if not exempt_operator_packages or decls_not_only_operator(p)
        ]
    }
