# Flag each actual parameter to a subprogram or entry call where the
# corresponding formal parameter has a default expression, if positional
# notation is used.

import stdlib

fun check_actual(spec, node) =
    match spec
    | SubpSpec  => spec?.f_subp_params?.f_params[stdlib.param_pos(node)]?.
                   f_default_expr != null
    | EntrySpec => spec?.f_entry_params?.f_params[stdlib.param_pos(node)]?.
                   f_default_expr != null
    | *         => false

@check(message="use named notation when passing actual to defaulted parameter",
       remediation="EASY")
fun positional_actuals_for_defaulted_parameters(node) =
    node is ParamAssoc(f_designator is null, parent is l@AssocList)
    when l?.parent is c@CallExpr
        when check_actual(c?.f_name?.p_called_subp_spec(), node)
