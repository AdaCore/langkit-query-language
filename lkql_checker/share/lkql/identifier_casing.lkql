# Flag each defining identifier that does not have a casing corresponding to
# the kind of entity being declared. All defining names are checked.
# The rule may have the following parameters:
# - Type=casing_scheme
#   Specifies casing for names from type and subtype declarations.
# - Enum=casing_scheme
#   Specifies the casing of defining enumeration literals and for the defining
#   names in a function renaming declarations if the renamed entity is an
#   enumeration literal.
# - Constant=casing_scheme
#   Specifies the casing for defining names from constants and named number
#   declarations, including the object renaming declaration if the renamed
#   object is a constant.
# - Exception=casing_scheme
#   Specifies the casing for names from exception declarations and exception
#   renaming declarations.
# - Others=casing_scheme
#   Specifies the casing for all defining names for which no special casing
#   scheme is specified. If this parameter is not set, the casing for the
#   entities that do not correspond to the specified parameters is not checked.
# - Exclude
#   Specifies a list of full identifier casing exceptions.
#
# TODO: missing handling of wildcards on substrings as defined in gnatpp or
# old gnatcheck.
#
# Where: casing_scheme ::= upper|lower|mixed
# upper means that the defining identifier should be upper-case. lower means
# that the defining identifier should be lower-case mixed means that the first
# defining identifier letter and the first letter after each underscore should
# be upper-case, and all the other letters should be lower-case.

import stdlib

fun excluded_name(id, exclude) = {
    |" Return the string corresponding to id in exclude if any, otherwise ""
    val ex = [s for s in exclude if id?.p_name_is(s)];
    if ex.length == 0 then "" else ex.to_list[ex.length]
}

fun excluded(id, exclude) = {
    |" Return 0 if ``id`` can be found in ``exclude`` and has the wrong casing,
    |" 1 if ``id`` can be found with the right casing and 2 is it cannot be
    |" found.
    val ex = [s for s in exclude if id?.p_name_is(s)];
    if ex.length != 0
    then (if id.text == ex.to_list[ex.length] then 1 else 0)
    else 2
}

fun wrong_casing(str, scheme) =
    |" Return true if ``str`` does not follow the casing specified by ``scheme``
    match scheme
    | "upper" => not str.is_upper_case
    | "lower" => not str.is_lower_case
    | "mixed" => not str.is_mixed_case
    | *       => false

@unit_check(help="casing of defining names", remediation="EASY",
            parametric_exemption=true)
fun identifier_casing(unit,
                      type="", enum="", constant="", exception="", others="",
                      exclude=[]) = [
    {message: n.text & " does not have casing specified " &
              ({
                 val str = excluded_name(n.f_name, exclude);
                 if str == "" then match n.parent
                    | t@BaseTypeDecl when t is not SingleTaskTypeDecl or
                      p@TaskBody when p.p_previous_part() is not SingleTaskDecl
                    => "for subtype names (" & type
                    | EnumLiteralDecl => "for enumeration literals (" & enum
                    | p@* => match p?.parent
                             | ObjectDecl or
                               NumberDecl       => "for constant names ("
                                                   & constant
                             | SubpRenamingDecl => "for enumeration literals ("
                                                   & enum
                             | ExceptionDecl    => "for exception names ("
                                                   & exception
                             | *                => "(" & others
                 else "in the dictionary (" & str}) & ")",
     loc: n}
    for n in from unit.root select node@DefiningName(f_name is id@Identifier)
    when {
        val res = excluded(id, exclude);
        if res == 0 then true
        else if res == 1 then false
        else match node.parent

        # Task objects
        | SingleTaskDecl or SingleTaskTypeDecl => others != "" and wrong_casing(id.text, others)

        # Types and subtypes, including TaskBody when the spec is a task type
        | BaseTypeDecl or
          p@TaskBody when p.p_previous_part() is not SingleTaskDecl
        => type != "" and wrong_casing(id.text, type)

        # Enums
        | EnumLiteralDecl => enum != "" and wrong_casing(id.text, enum)

        # Look one level up for remaining cases
        | p@* => match p?.parent

        # Constants
        # TODO: use LAL p_is_constant_object() when available (U330-040)
        | (o@ObjectDecl
           when (o?.f_has_constant?.p_as_bool() or
                 # Renaming of a constant
                 (o?.f_renaming_clause != null and
                  stdlib.ultimate_alias(o?.f_renaming_clause?.f_renamed_object)
                  is ObjectDecl(f_has_constant is ConstantPresent))))
          or NumberDecl
        =>
            constant != "" and wrong_casing(id.text, constant)

        # Function renaming an enum literal
        | r@SubpRenamingDecl
          when r?.f_renames?.f_renamed_object?.p_referenced_decl() is
               EnumLiteralDecl
        =>
            enum != "" and wrong_casing(id.text, enum)

        # Exceptions
        | ExceptionDecl =>
            exception != "" and wrong_casing(id.text, exception)

        | * => others != "" and wrong_casing(id.text, others)
    }]
