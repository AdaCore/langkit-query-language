fun in_out_params(s) =
    [p for p in s.p_params() if p.f_mode is ModeInOut]

fun params_out(s) =
    [p for p in s.p_params() if p.f_mode is ModeOut].to_list

@check(message="procedure can be rewritten as function", category="Feature")
fun function_style_procedures(node) =
    |" Flag each procedure that can be rewritten as a function. A procedure can be
    |" converted into a function if it has exactly one parameter of mode ``out``
    |" and no parameters of mode ``in out``, with no ``Global`` aspect
    |" specified or with explicit specification that its ``Global`` aspect is set to
    |" ``null`` (either by aspect specification or by pragma Global). Procedure
    |" declarations, formal procedure declarations, and generic procedure declarations
    |" are always checked. Procedure
    |" bodies and body stubs are flagged only if they do not have corresponding
    |" separate declarations. Procedure renamings and procedure instantiations are
    |" not flagged.
    |"
    |" If a procedure can be rewritten as a function, but its ``out`` parameter is
    |" of a limited type, it is not flagged.
    |"
    |" Protected procedures are not flagged. Null procedures also are not flagged.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 2
    |"
    |"    procedure Cannot_be_a_function (A, B : out Boolean);
    |"    procedure Can_be_a_function (A : out Boolean);           --  FLAG
    node is (SubpBody | SubpBodyStub | ClassicSubpDecl | GenericSubpInternal)
    when (node is (ClassicSubpDecl | GenericSubpInternal) or
          not node.p_previous_part())
     and node.f_subp_spec.f_subp_kind is SubpKindProcedure
     and node.p_get_aspect_spec_expr("Global") is (null | NullLiteral)
     and not in_out_params(node.f_subp_spec)
     and ({
         # Check for 1 out parameter of a non limited type
         val p_out=params_out(node.f_subp_spec);
         p_out.length == 1 and
         p_out[1].f_ids.children_count == 1 and
         p_out[1].f_type_expr.p_designated_type_decl() is not
             TypeDecl(f_type_def:
                          (def@(DerivedTypeDef | PrivateTypeDef |
                                RecordTypeDef)
                          when def.f_has_limited.p_as_bool())
                       | InterfaceTypeDef(f_interface_kind:
                                           InterfaceKindLimited))})
