import stdlib

fun true_and_false(left, right) =
    (stdlib.is_standard_true(left) and stdlib.is_standard_false(right)) or
    (stdlib.is_standard_false(left) and stdlib.is_standard_true(right))

fun check_then_else(then_stmt, else_stmt) =
    (
        then_stmt is AssignStmt and else_stmt is AssignStmt and
        then_stmt.f_dest.p_name_matches(else_stmt.f_dest) and
        true_and_false(then_stmt.f_expr, else_stmt.f_expr)
    )
    or (
        then_stmt is ReturnStmt and else_stmt is ReturnStmt and
        true_and_false(then_stmt.f_return_expr, else_stmt.f_return_expr)
    )

fun simplify_boolean_expression(node) =
    match node
    | RelationOp =>
        if stdlib.is_standard_false(node.f_right)
        then new UnOp(new OpNot(), node.f_left)
        else node.f_left
    | IfStmt =>
        (
            match node.f_then_stmts[1]
            | a@AssignStmt =>
                new AssignStmt(
                    f_dest=a.f_dest,
                    f_expr=node.f_cond_expr
                )
            | ReturnStmt => new ReturnStmt(node.f_cond_expr)
        )
    | IfExpr => node.f_cond_expr
    | UnOp => stdlib.negate_op(stdlib.strip_conversions(node.f_expr))

@check(message="redundant boolean expression",
       category="Style", subcategory="Programming Practice",
       auto_fix=(n, ctx) => ctx.replace(n, simplify_boolean_expression(n)))
fun redundant_boolean_expressions(node) =
    |" Flag constructs including boolean operations that can be simplified. The
    |" following constructs are flagged:
    |"
    |" * ``if`` statements that have ``if`` and ``else`` paths (and no ``elsif`` path) if
    |"   both paths contain a single statement that is either:
    |"
    |"   * an assignment to the same variable of ``True`` in one path and ``False``
    |"     in the other path
    |"
    |"   * a return statement that in one path returns ``True`` and in the other
    |"     path ``False``
    |"
    |"   where ``True`` and ``False`` are literals of the type ``Standard.Boolean``
    |"   or any type derived from it. Note that in case of assignment statements the
    |"   variable names in the left part should be literally the same (case
    |"   insensitive);
    |"
    |" * ``if`` expressions that have ``if`` and ``else`` paths (without any ``elseif``)
    |"   if one path expression is ``True`` and the other is ``False``, where ``True``
    |"   and ``False`` are literals of the ``Standard.Boolean`` type (or any type derived
    |"   from it).
    |" * infix call to a predefined ``=`` or ``/=`` operator when the right operand
    |"   is ``True`` or ``False`` where ``True`` and ``False`` are literals of the type
    |"   ``Standard.Boolean`` or any type derived from it.
    |" * infix call to a predefined ``not`` operator whose argument is an infix
    |"   call to a predefined ordering operator.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 1
    |"
    |"    if I + J > K then   --  FLAG
    |"       return True;
    |"    else
    |"       return False;
    |"    end if;
    match node
    | RelationOp(f_op: op@(OpEq | OpNeq)) =>
        stdlib.is_predefined_op(op)
        and (
            node.f_right is name@Name
            when stdlib.is_standard_true(name) or stdlib.is_standard_false(name)
        )
    | IfStmt =>
        node.f_alternatives[1] == null
        and node.f_else_part?.f_stmts.children_count == 1
        and node.f_then_stmts.children_count == 1
        and check_then_else(node.f_then_stmts[1], node.f_else_part?.f_stmts[1])
    | IfExpr =>
        node.f_alternatives[1] == null
        and true_and_false(node.f_then_expr, node.f_else_expr)
    | UnOp => stdlib.is_negated_op(node)
