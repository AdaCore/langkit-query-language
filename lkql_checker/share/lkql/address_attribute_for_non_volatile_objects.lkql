import stdlib

fun is_non_volatile_object(o) =
    o is ObjectDecl(f_has_constant: ConstantAbsent)
     and not (o?.p_has_aspect("Volatile") or
              o?.p_has_aspect("Atomic") or
              o?.p_has_aspect("Shared"))

@check(message="address attribute for non-volatile object",
       category="Style", subcategory="Programming Practice")
fun address_attribute_for_non_volatile_objects(node) =
    |" Flag any 'Address attribute reference if its prefix denotes a data
    |" object defined by a variable object declaration and this object is not
    |" marked as Volatile. An entity is considered as being marked volatile
    |" if it has an aspect Volatile, Atomic or Shared declared for it.
    |"
    |" This rule has no parameters.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 5
    |"
    |"    Var1 : Integer with Volatile;
    |"    Var2 : Integer;
    |"
    |"    X : Integer with Address => Var1'Address;
    |"    Y : Integer with Address => Var2'Address;   --  FLAG
    node is AttributeRef
    when node.f_attribute?.p_name_is("Address")
     and (not (node.parent is AttributeDefClause
               when node.parent?.f_attribute_expr == node))
     and is_non_volatile_object(stdlib.ultimate_alias(node.f_prefix,
                                                      all_nodes=false))
