# Check wether the given Identifier or string is present as a
# BaseId in the list elements.
#
# U407-040 for list iterators
# U407-032 for in list checks
fun nodelist_contains_id(l, id) =
    l is *(any children: BaseId(p_name_matches(id): true))

# Return true iff id identifies a discriminant of type_def
fun id_is_a_discriminant(id, type_def) =
    type_def is DerivedTypeDef(
        any children: assoc@CompositeConstraintAssoc(
            f_constraint_expr: i@BaseId
            when i?.p_name_matches(id)
        )
        # f_ids contains the defining name (named assoc.) or is null (positional)
        when nodelist_contains_id(assoc.f_ids, id) or not assoc.f_ids[1]
    )

# Return true iff type_decl has discriminant it uses in its own declaration
# (eg to initialize a component, array size...).
fun is_using_discriminant_in_declaration(type_decl) =
    type_decl.f_discriminants?.f_discr_specs is *(
        all children(depth=1): DiscriminantSpec(
            f_ids: DefiningNameList(
                all children(depth=2): decl@BaseId
                when id_is_a_discriminant(decl, type_decl?.f_type_def)
            )
        )
    )

@check(message="declaration of discriminated record", category="Feature")
fun discriminated_records(node) =
    |" Flag all declarations of record types with discriminants. Only the
    |" declarations of record and record extension types are checked. Incomplete,
    |" formal, private, derived and private extension type declarations are not
    |" checked. Task and protected type declarations also are not checked.
    |"
    |" This rule has no parameters.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 5, 9
    |"
    |"    type Idx is range 1 .. 100;
    |"    type Arr is array (Idx range <>) of Integer;
    |"    subtype Arr_10 is Arr (1 .. 10);
    |"
    |"    type Rec_1 (D : Idx) is record        --  FLAG
    |"       A : Arr (1 .. D);
    |"    end record;
    |"
    |"    type Rec_2 (D : Idx) is record        --  FLAG
    |"       B : Boolean;
    |"    end record;
    |"
    |"    type Rec_3 is record
    |"       B : Boolean;
    |"    end record;
    node is TypeDecl(
       any children(depth=2): DiscriminantSpecList
       when not (
          node.f_type_def is PrivateTypeDef
          or is_using_discriminant_in_declaration(node)
       )
    )
