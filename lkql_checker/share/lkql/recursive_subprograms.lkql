import stdlib

fun get_body(node) =
    match node
    | GenericPackageInstantiation
                      => node.f_generic_pkg_name.p_referenced_decl()
    | GenericSubpInstantiation
                      => node.f_generic_subp_name.p_referenced_decl()
    | Name            => stdlib.get_subp_body(node.p_referenced_decl())
    | BasicDecl       => stdlib.get_subp_body(node)
    | *               => null

# Get the bodies of the functions called statically by a given function body
@memoized
selector static_calls
    | b@(BodyNode | GenericDecl) => rec(*
        # Grab the bodies for every static call
        [get_body(a)
         for a in stdlib.children_no_nested(b)
         if a is (GenericInstantiation |
                 BaseId when a.p_is_static_call() or
                             a.p_referenced_decl() is TaskTypeDecl)].to_list)
    | *      => ()

@memoized
fun find_all_overrides(subp) =
    subp.p_find_all_overrides(stdlib.list_of_units())

@memoized
fun root_subp_decls(subp) =
    subp.p_root_subp_declarations()

# Given a `name`, return all the bodies of the decl referenced by `name`,
# taking dispatching calls into account.
fun bodies(name) =
    if name is Expr(p_is_dispatching_call(): true) then {
        val root  = name.p_referenced_decl().p_canonical_part();
        val roots = root_subp_decls(root);
        val subp  = if not roots then root else roots[1];
        [stdlib.get_subp_body(subp)] &
        [stdlib.get_subp_body(s) for s in find_all_overrides(subp)].to_list
    } else [get_body(name)]

fun calls_helper(b) =
      concat([bodies(a) for a in stdlib.children_no_nested(b)
              if a is (GenericInstantiation |
                      (BaseId when a.p_is_direct_call() or
                                   a.p_referenced_decl() is TaskTypeDecl))].
             to_list)

@memoized
selector calls
   | b@(BodyNode | GenericDecl) => rec(*calls_helper(b))
       # Grab the bodies for every direct call
   | *      => ()

# Note: we keep skip_dispatching_calls for compatibility only

@check(help="recursive subprogram (global analysis required)",
       message="recursive subprogram", follow_generic_instantiations=true,
       category="Style", subcategory="Programming Practice")
fun recursive_subprograms(node,
                          skip_dispatching_calls=true,
                          follow_dispatching_calls=false,
                          follow_ghost_code=false) =
    |" Flags specs (and bodies that act as specs) of recursive subprograms. A
    |" subprogram is considered as recursive in a given context if there exists
    |" a chain of direct calls starting from the body of, and ending at
    |" this subprogram within this context. A context is provided by the set
    |" of Ada sources specified as arguments of a given ``gnatcheck`` call.
    |" Neither dispatching calls nor calls through access-to-subprograms
    |" are considered as direct calls by this rule. If *Follow_Dispatching_Calls*
    |" rule parameter is set, ``gnatcheck`` considers a dispatching call as a set
    |" of calls to all the subprograms the dispatching call may dispatch to,
    |" otherwise dispatching calls are ignored. The current rule limitation is
    |" that when processing dispatching calls the rule does not take into account
    |" type primitive operations declared in generic instantiations.
    |"
    |" This rule does not take into account calls to subprograms whose
    |" bodies are not available because of any reason (a subprogram is imported,
    |" the Ada source containing the body is not provided as ``gnatcheck``
    |" argument source etc.). The *Unavailable_Body_Calls* rule can be used to
    |" detect these cases.
    |"
    |" Generic subprograms and subprograms detected in generic units are not
    |" flagged. Recursive subprograms in generic instantiations
    |" are flagged.
    |"
    |" Ghost code and assertion code such as pre & post conditions or code inside of
    |" `pragma Assert` is not flagged either by default.
    |"
    |" The rule does not take into account implicit calls that are the
    |" result of computing default initial values for an object or a subcomponent
    |" thereof as a part of the elaboration of an object declaration.
    |"
    |" The rule also does not take into account subprogram calls inside
    |" aspect definitions.
    |"
    |" The rule has an optional parameter for the ``+R`` option and for LKQL rule
    |" options files:
    |"
    |" *Follow_Dispatching_Calls: bool*
    |"    Whether to treat a dispatching call as a set of calls to all the subprograms
    |"    the dispatching call may dispatch to.
    |"
    |" *Follow_Ghost_Code: bool*
    |"    Whether to analyze ghost code and assertion code, which isn't analyzed by
    |"    this check by default.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 1
    |"
    |"    function Factorial (N : Natural) return Positive is  --  FLAG
    |"    begin
    |"       if N = 0 then
    |"          return 1;
    |"       else
    |"          return N * Factorial (N - 1);
    |"       end if;
    |"    end Factorial;
    node is (ClassicSubpDecl | SubpBodyStub(p_previous_part(): null) |
             BaseSubpBody(p_previous_part(): null | GenericSubpDecl))

      when (not stdlib.in_generic_template(node))
       and (follow_ghost_code or not node.p_is_ghost_code())
       and stdlib.get_subp_body(node) is b@BaseSubpBody when
           if follow_dispatching_calls
           then b is body@BaseSubpBody(any calls: c@BaseSubpBody when body == c)
           else b is body@BaseSubpBody(any static_calls: c@BaseSubpBody
                                       when body == c)
