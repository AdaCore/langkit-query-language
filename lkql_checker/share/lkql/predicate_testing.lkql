# Flag a membership test if at least one of its membership choice contains a
# subtype mark denoting a subtype defined with (static or dynamic)
# subtype predicate.
# Flags 'Valid attribute reference if the nominal subtype of the attribute
# prefix has (static or dynamic) subtype predicate.
# This rule has the parameter Except_Assertions: Do not flag a construct
# described above if it is a subcomponent of the following constructs[...]

import stdlib

# Return true if t represents a SubtypeDecl with a predicate (directly or via
# a parent type).
fun has_predicate(t) =
    t is (SubtypeDecl
         when t.p_has_aspect("Predicate")
           or t.p_has_aspect("Static_Predicate")
           or t.p_has_aspect("Dynamic_Predicate")
           or has_predicate(t.f_subtype?.f_name?.p_referenced_decl())
      | TypeDecl(f_type_def is d@DerivedTypeDef)
         when has_predicate(d.f_subtype_indication.f_name.p_referenced_decl()))

@check(message="expression needs subtype predicate evaluation",
       category="Feature")
fun predicate_testing(node, except_assertions=false) =
    (match node
     # Flags a subtype mark[...] used as a membership choice
     | MembershipExpr =>
         (from node.f_membership_exprs
          select first id@Identifier
          when has_predicate(id.p_referenced_decl())) != null
     # Flags 'Valid attribute reference[...]
     | AttributeRef => node.f_attribute.p_name_is("Valid")
         and has_predicate(node.f_prefix.p_expression_type())
     | *                   => false)
    # Exclude assert pragmas/aspect if except_assertions is set
    and not (except_assertions and stdlib.within_assert(node))
