# Flag each place where an exception is explicitly raised and handled in the
# same subprogram body. A raise statement in an exception handler, package
# body, task body or entry body is not flagged.

fun enclosing_body(node) = {
   val parent_bodies = to_list([p for p in parent(node) if p is Body]);
   if parent_bodies.length == 0 then null else parent_bodies[1]
}

fun canonical_exception(name) = {
   val exception_decl = name?.p_referenced_decl();
   val ren = exception_decl?.f_renames;

   if ren == null
   then exception_decl
   else canonical_exception(ren?.f_renamed_object)
}

@check(message="this exception will be handled in the same body")
fun exceptions_as_control_flow(node) =
   # Select raise statements that are directly part of a subprogram body
   node is r@RaiseStmt(f_exception_name is exc@Name)
   when enclosing_body(r) is BaseSubpBody(
      any children is exc_handler@ExceptionHandler when {
          val exc_block = exc_handler.parent;
          val stmt_block = exc_block?.parent;
          val canonical_exc = canonical_exception(exc);

          # Where there is a handler that handles this same exception (either
          # via an others clause, or a direct name handling)
          exc_handler.f_handled_exceptions is *(
             any children is OthersDesignator or
                 i@Identifier(p_referenced_decl() is ExceptionDecl)
                 when canonical_exception(i) == canonical_exc)

          # And the handler belongs to a block that encloses this raise statement
          and r is *(any parent is p@* when p.parent == stmt_block)

          # But the raise statement is not directly part of the handler
          and not r is *(any parent is p@* when p.parent == exc_block)
      }
   )
