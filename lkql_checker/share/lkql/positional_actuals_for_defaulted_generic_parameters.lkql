# Flag each generic actual parameter corresponding to a generic formal
# parameter with a default initialization, if positional notation is used.

import stdlib

fun get_formal(decls, pos, n: int = 1) =
    |" Return the GenericFormal corresponding to the parameter number `pos`
    match decls[n]
    | f@GenericFormal => {
        val count = match f.f_decl
                    | d@(ObjectDecl | NumberDecl) => d.f_ids.children_count
                    | *                            => 1;
        if pos <= count then f else get_formal(decls, pos - count, n + 1) }
    | *               => get_formal(decls, pos, n + 1)

fun check_generic(n, node) =
    get_formal(
        n.p_referenced_decl().f_formal_part.f_decls,
        stdlib.param_pos(node)
    ) is GenericFormal(
        f_decl: d@(FormalSubpDecl | ObjectDecl) when d.f_default_expr
    )

fun add_param_name(param, ctx) =
    ctx.set_child(
        param,
        ParamAssoc.f_designator,
        new Identifier (param.p_get_params()[1].text)
    )

@check(message="use named notation when passing actual to defaulted generic parameter",
       remediation="EASY", category="Style", subcategory="Programming Practice",
       auto_fix=add_param_name)
fun positional_actuals_for_defaulted_generic_parameters(node) =
    node is ParamAssoc(f_designator: null, parent: l@AssocList)
    when match l.parent
         | p@GenericSubpInstantiation    =>
              check_generic(
                  stdlib.ultimate_generic_alias(p.f_generic_subp_name),
                  node
              )
         | p@GenericPackageInstantiation =>
              check_generic(
                  stdlib.ultimate_generic_alias(p.f_generic_pkg_name),
                  node
              )
         | *                             => false
