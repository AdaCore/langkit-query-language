# Flags a tagged derived type declaration or an interface type declaration if
# its depth (in its inheritance hierarchy) exceeds the value specified by the N
# rule parameter. Types in generic instantiations which violate this rule are
# also flagged; generic formal types are not flagged. This rule also does not
# flag private extension declarations. In the case of a private extension, the
# corresponding full declaration is checked.
# This rule has the parameter n: Integer not less than -1 specifying the
# maximal allowed depth of any inheritance hierarchy. If the rule parameter is
# set to -1, the rule flags all the declarations of tagged and interface types.

fun deep_inheritance(type, n) =
    if n == 0 then true
    else [t for t in type.p_base_types() if deep_inheritance(t, n-1)]?[1] != ()

@check(message="derivation tree is too deep",
       follow_generic_instantiations=true,
       category="Style", subcategory="Object Orientation")
fun deep_inheritance_hierarchies(node, n: int = 2) =
    node is TypeDecl(parent is not GenericFormalTypeDecl,
                     f_type_def is not
                     DerivedTypeDef(f_has_with_private is WithPrivatePresent))
    when deep_inheritance(node, n+1)
