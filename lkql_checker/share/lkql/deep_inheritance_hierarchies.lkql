fun deep_inheritance(type, n) =
    if n == 0 then true
    else [t for t in type.p_base_types() if deep_inheritance(t, n-1)]

@check(message="derivation tree is too deep",
       follow_generic_instantiations=true,
       category="Style", subcategory="Object Orientation")
fun deep_inheritance_hierarchies(node, n: int = 2) =
    |" Flags a tagged derived type declaration or an interface type declaration if
    |" its depth (in its inheritance hierarchy) exceeds the value specified by the
    |" *N* rule parameter. Types in generic instantiations which violate this
    |" rule are also flagged; generic formal types are not flagged. This rule also
    |" does not flag private extension declarations. In the case of a private
    |" extension, the corresponding full declaration is checked.
    |"
    |" In most cases, the inheritance depth of a tagged type or interface type is
    |" defined as 0 for a type with no parent and no progenitor, and otherwise as 1 +
    |" max of the depths of the immediate parent and immediate progenitors. If the
    |" declaration of a formal derived type has no progenitor, or if the declaration
    |" of a formal interface type has exactly one progenitor, then the inheritance
    |" depth of such a formal derived/interface type is equal to the inheritance
    |" depth of its parent/progenitor type, otherwise the general rule is applied.
    |"
    |" If the rule flags a type declaration inside the generic unit, this means that
    |" this type declaration will be flagged in any instantiation of the generic
    |" unit. But if a type is derived from a format type or has a formal progenitor
    |" and it is not flagged at the place where it is defined in a generic unit, it
    |" may or may not be flagged in instantiation, this depends of the inheritance
    |" depth of the actual parameters.
    |"
    |" This rule has the following (mandatory) parameter for the ``+R`` option and
    |" for LKQL rule options files:
    |"
    |" *N: int*
    |"    Integer not less than -1 specifying the maximal allowed depth of any
    |"    inheritance hierarchy. If the rule parameter is set to -1, the rule
    |"    flags all the declarations of tagged and interface types.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 8
    |"
    |"    type I0 is interface;
    |"    type I1 is interface and I0;
    |"    type I2 is interface and I1;
    |"
    |"    type T0 is tagged null record;
    |"    type T1 is new T0 and I0 with null record;
    |"    type T2 is new T0 and I1 with null record;
    |"    type T3 is new T0 and I2 with null record; -- FLAG (if rule parameter is 2)
    node is TypeDecl(parent: not GenericFormalTypeDecl,
                     f_type_def: not
                     DerivedTypeDef(f_has_with_private: WithPrivatePresent),
                     p_is_tagged_type(): true,
                     p_next_part_for_decl(): null)
    when deep_inheritance(node, n+1)
