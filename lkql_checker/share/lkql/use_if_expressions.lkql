# Flag if statements which could be replaced by an if expression.
# This rule recognizes if statements of the form:
#      if ... then
#         return ...;
#      [elsif ... then
#         return ...;]
#      else
#         return ...;
#      end if;
# and:
#      if ... then
#         <LHS> := ...;
#      [elsif ... then
#         <LHS> := ...;]
#      else
#         <LHS> := ...;
#      end if;

import stdlib

fun simple_return(l) = l != null and l.children_count == 1 and l[1] is ReturnStmt
fun simple_assignment(l) =
    l.children_count == 1 and l[1] is AssignStmt(f_dest: Name)

fun replace_by_expr(if_stmt, ctx) =
    |" Replace ``if_stmt`` node by a semantically equivalent node which use an
    |" IfExpr to perform the conditional branching.
    {
        val is_return = simple_return(if_stmt.f_then_stmts);
        val then_stmt = if_stmt.f_then_stmts[1];
        val else_stmt = if_stmt.f_else_stmts[1];
        val if_expr = new ParenExpr(new IfExpr(
            f_cond_expr = if_stmt.f_cond_expr,
            f_then_expr = if is_return then then_stmt.f_return_expr else then_stmt.f_expr,
            f_else_expr = if is_return then else_stmt.f_return_expr else else_stmt.f_expr,
            f_alternatives=new ElsifExprPartList([
                {
                    val stmt = part.f_stmts[1];
                    new ElsifExprPart(
                        f_cond_expr = part.f_cond_expr,
                        f_then_expr = if is_return then stmt.f_return_expr else stmt.f_expr
                    )
                }
                for part in if_stmt.f_alternatives.children
            ].to_list)
        ));
        ctx.replace(
            if_stmt,
            if is_return
            then new ReturnStmt(if_expr)
            else new AssignStmt(
                f_dest = then_stmt.f_dest,
                f_expr = if_expr
            )
        )
    }

@check(message="IF statement may be replaced by an IF expression",
       category="Style", subcategory="Programming Practice",
       auto_fix=replace_by_expr)
fun use_if_expressions(node) =
    node is IfStmt
    when (simple_return(node.f_then_stmts) and
          simple_return(node.f_else_stmts) and
          stdlib.all([simple_return(s.f_stmts)
                      for s in node.f_alternatives.children]))
      or (simple_assignment(node.f_then_stmts) and
          simple_assignment(node.f_else_stmts) and
          stdlib.all([simple_assignment(s.f_stmts)
                      for s in node.f_alternatives.children]) and
          {
              val stmts = from node select AssignStmt;
              val lhs = stmts[1].f_dest;
              stdlib.all([s.f_dest.p_name_matches(lhs) for s in stmts])
          })
