fun simple_return(l) = l.children_count == 1 and l[1] is ReturnStmt
fun simple_assignment(l) =
    l.children_count == 1 and l[1] is AssignStmt(f_dest: Name)

@check(message="IF statement may be replaced by an IF expression",
       category="Style", subcategory="Programming Practice")
fun use_if_expressions(node) =
    |" Flag ``if`` statements which could be replaced by an ``if`` expression.
    |" This rule detects the following code patterns:
    |"
    |" .. code-block:: ada
    |"
    |"    if ... then
    |"       return ...;
    |"    elsif ... then    --  optional chain of elsif
    |"       return ...;
    |"    else
    |"       return ...;
    |"    end if;
    |"
    |" and:
    |"
    |" .. code-block:: ada
    |"
    |"    if ... then
    |"       <LHS> := ...;
    |"    elsif ... then    --  optional chain of elsif
    |"       <LHS> := ...;
    |"    else
    |"       <LHS> := ...;  --  same LHS on all branches
    |"    end if;
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 1, 9
    |"
    |"    if X = 1 then   --  FLAG
    |"       return 1;
    |"    elsif X = 2 then
    |"       return 2;
    |"    else
    |"       return 3;
    |"    end if;
    |"
    |"    if X >= 2 then   --  FLAG
    |"       X := X + 1;
    |"    elsif X <= 0 then
    |"       X := X - 1;
    |"    else
    |"       X := 0;
    |"    end if;
    node is IfStmt
    when (simple_return(node.f_then_stmts) and
          simple_return(node.f_else_part.f_stmts) and
          not [s for s in node.f_alternatives.children
               if not simple_return(s.f_stmts)])
      or (simple_assignment(node.f_then_stmts) and
          simple_assignment(node.f_else_part.f_stmts) and
          not [s for s in node.f_alternatives.children
               if not simple_assignment(s.f_stmts)] and {
          val stmts = from node select AssignStmt;
          val lhs = stmts[1].f_dest;
          not [s for s in stmts if not s.f_dest.p_name_matches(lhs)]})
