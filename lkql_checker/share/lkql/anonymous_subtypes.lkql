# Any part of the tree is a discriminant of the enclosing type decl
fun is_using_discriminant(node, type_decl) =
    type_decl and
    node is *(any children: id@Identifier
              when type_decl is TypeDecl(
                 any children(depth=3): DiscriminantSpec(
                    f_ids: DefiningNameList(
                        any children: i@Identifier
                        when i.p_name_matches(id)))))

fun get_type_decl(node) =
    from node through parent select first TypeDecl

# A self-reference has the form Type'Access
fun is_self_referencing(expr, type_decl) =
    type_decl and
    expr is *(any children: at@AttributeRef
              when at.f_attribute.p_name_is("Access")
               and at.f_prefix.p_name_matches(type_decl.f_name?.f_name))

@check(message="anonymous subtype", category="Feature")
fun anonymous_subtypes(node) =
    |" Flag all uses of anonymous subtypes except for the following:
    |"
    |" * when the subtype indication depends on a discriminant, this includes the
    |"   cases of a record component definitions when a component depends on a
    |"   discriminant, and using the discriminant of the derived type to
    |"   constraint the parent type;
    |" * when a self-referenced data structure is defined, and a discriminant
    |"   is constrained by the reference to the current instance of a type;
    |"
    |" A use of an anonymous subtype is
    |" any instance of a subtype indication with a constraint, other than one
    |" that occurs immediately within a subtype declaration. Any use of a range
    |" other than as a constraint used immediately within a subtype declaration
    |" is considered as an anonymous subtype.
    |"
    |" The rule does not flag ranges in the component clauses from a record
    |" representation clause, because the language rules do not allow to use
    |" subtype names there.
    |"
    |" An effect of this rule is that ``for`` loops such as the following are
    |" flagged (since ``1..N`` is formally a 'range')
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 1
    |"
    |"    for I in 1 .. N loop   --  FLAG
    |"       ...
    |"    end loop;
    |"
    |" Declaring an explicit subtype solves the problem:
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 3
    |"
    |"    subtype S is Integer range 1..N;
    |"    ...
    |"    for I in S loop        --  NO FLAG
    |"       ...
    |"    end loop;
    node is ((SubtypeIndication(f_constraint: constraint@Constraint)
         when (not (constraint is
                    CompositeConstraint(p_is_discriminant_constraint(): true)
                    and is_self_referencing(constraint, get_type_decl(node))))
          and not (node.parent is SubtypeDecl and
                   constraint is
                       (RangeConstraint |
                       (CompositeConstraint
                        when constraint.p_is_discriminant_constraint()
                        # If it's an index constraint, check that all
                        # constraints are references to other types
                          or not [c for c in constraint.f_constraints.children
                                  if c.f_constraint_expr is not Name(
                                      p_referenced_decl(): BaseTypeDecl)]))))
    | BinOp(f_op: OpDoubleDot,
             parent: not RangeSpec(parent: TypeDef | ComponentClause),
             all parent: not Constraint(parent: SubtypeIndication))
    | AttributeRef(f_attribute: Identifier(p_name_is("Range"): true),
                    parent: not RangeSpec(parent:
                                            TypeDef | ComponentClause),
                    all parent: not Constraint(parent: SubtypeIndication)))
    and not is_using_discriminant(node, get_type_decl(node))
