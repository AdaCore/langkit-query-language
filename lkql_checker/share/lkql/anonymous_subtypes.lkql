# Flag all uses of anonymous subtypes except for the following:
# - when the subtype indication depends on a discriminant, this includes the
#   cases of a record component definitions when a component depends on a
#   discriminant, and using the discriminant of the derived type to constrain
#   the parent type;
# - when a self-referenced data structure is defined, and a discriminant is
#   constrained by the reference to the current instance of a type;
#
# A use of an anonymous subtype is any instance of a subtype indication
# with a constraint, other than one that occurs immediately within a
# subtype declaration. Any use of a range other than as a constraint used
# immediately within a subtype declaration is considered as an anonymous
# subtype.
#
# The rule does not flag ranges in the component clauses from a record
# representation clause, because the language rules do not allow to use
# subtype names there.

# Any part of the tree is a discriminant of the enclosing type decl
fun is_using_discriminant(node, type_decl) =
    type_decl != null and
    node is *(any children is id@Identifier
              when type_decl is TypeDecl(
                 any children(depth=3) is DiscriminantSpec(
                    f_ids is DefiningNameList(
                        any children is i@Identifier
                        when i.p_name_matches(id)))))

fun get_type_decl(node) =
    if node is *(any parent is p@TypeDecl) then p else null

# A self-reference has the form Type'Access
fun is_self_referencing(expr, type_decl) =
    type_decl != null and
    expr is *(any children is at@AttributeRef
              when at.f_attribute.p_name_is("Access")
               and at.f_prefix.p_name_matches(type_decl.f_name.f_name))

@check(message="anonymous subtype")
fun anonymous_subtypes(node) =
    node is (SubtypeIndication(f_constraint is constraint@Constraint,
                               parent is not SubtypeDecl)
         when (not (constraint is DiscriminantConstraint
                    and is_self_referencing(constraint, get_type_decl(node)))))
    or BinOp(f_op is OpDoubleDot,
             parent is not RangeSpec(parent is TypeDef),
             all parent is not Constraint(parent is SubtypeIndication))
    or AttributeRef(f_attribute is Identifier(p_name_is("Range") is true),
                    parent is not RangeSpec(parent is TypeDef),
                    all parent is not Constraint(parent is SubtypeIndication))
    and not is_using_discriminant(node, get_type_decl(node))
