# Flag each subprogram body with an Export or Convention aspect that may
# propagate an exception.
# A subprogram is considered as not propagating if:
# - it has an exception handler with a "when others" choice;
# - and no exception handler contains a raise statement, nor any call to
#   Ada.Exception.Raise_Exception or Ada.Exception.Reraise_Occurrence.

import stdlib

fun is_exported(body) = {
    |" Return true if a given BaseSubpBody has an Export or Convention aspect
    val decl = match body.p_decl_part()
               | part@BasicDecl => part
               | *              => body;
    decl.p_has_aspect("Export") or decl.p_has_aspect("Convention")
}

@check(message="exception may propagate out of exported subprogram",
       category="Style", subcategory="Programming Practice")
fun exception_propagation_from_export(node) =
    node is SubpBody
    when is_exported(node) and stdlib.propagate_exceptions(node)
