@check(message="definition of non class-wide aspect",
       category="Style", subcategory="Object Orientation")
fun specific_pre_post(node) =
    |" Flag a declaration of a primitive operation of a tagged type if this
    |" declaration contains specification of Pre or/and Post aspect.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 5, 8, 11, 19
    |"
    |"    type T is tagged private;
    |"    function Check1 (X : T) return Boolean;
    |"    function Check2 (X : T) return Boolean;
    |"
    |"    procedure Proc1 (X : in out T)           --  FLAG
    |"       with Pre => Check1 (X);
    |"
    |"    procedure Proc2 (X : in out T)           --  FLAG
    |"       with Post => Check2 (X);
    |"
    |"    function Fun1 (X : T) return Integer     --  FLAG
    |"       with Pre  => Check1 (X),
    |"            Post => Check2 (X);
    |"
    |"    function Fun2 (X : T) return Integer
    |"       with Pre'Class  => Check1 (X),
    |"            Post'Class => Check2 (X);
    |"
    |"    function Fun3 (X : T) return Integer     --  FLAG
    |"       with Pre'Class  => Check1 (X),
    |"            Post'Class => Check2 (X),
    |"            Pre        => Check1 (X),
    |"            Post       => Check2 (X);
    node is (BasicSubpDecl |
             BaseSubpBody(p_previous_part(): null) |
             SubpBodyStub(p_previous_part(): null))
    # Get subprogram declarations
    when node.p_subp_spec_or_null() is
         # primitive of a tagged type
         AdaNode(p_primitive_subp_tagged_type(): AdaNode)
         # with direct pre/post aspect definitions
         when node.p_has_aspect("Pre", true) or node.p_has_aspect("Post", true)
