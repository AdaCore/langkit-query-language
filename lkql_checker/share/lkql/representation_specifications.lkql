# Flag each record representation clause, enumeration representation clause and
# declarations with a representation aspect (including attribute clauses and
# pragmas).
# The rule has a parameter Record_Rep_Clauses_Only: Only record representation
# clauses are flagged.

selector defining_names
    |" Return all the defining names of this basic decl. This can be used
    |" instead of `any children is DefiningName...` to avoid selecting the
    |" defining names of nested basic decls.
    | BasicDecl => *(this.p_defining_names())
    | *         => ()

fun has_aspect(node, aspect) = {
   val a = node.p_get_aspect(aspect);
   a.exists and not a.inherited
}

fun has_rep_aspect(node) =
   has_aspect(node, "Address") or
   has_aspect(node, "Alignment") or
   has_aspect(node, "Size") or
   has_aspect(node, "Component_Size") or
   has_aspect(node, "External_Tag") or
   has_aspect(node, "Asynchronous") or
   has_aspect(node, "Convention") or
   has_aspect(node, "Import") or
   has_aspect(node, "Export") or
   has_aspect(node, "No_Return") or
   has_aspect(node, "Atomic") or
   has_aspect(node, "Atomic_Components") or
   has_aspect(node, "Discard_Names") or
   has_aspect(node, "Independent") or
   has_aspect(node, "Independent_Components") or
   has_aspect(node, "Pack") or
   has_aspect(node, "Unchecked_Union") or
   has_aspect(node, "Volatile") or
   has_aspect(node, "Volatile_Components")

@unit_check(help="representation specification", category="Feature")
fun representation_specifications(unit, record_rep_clauses_only=false) = [
    {message: if n is BasicDecl
              then "declaration with a representation aspect"
              else "representation specification",
     loc: n}
    for n in from unit.root
    select RecordRepClause or
           (EnumRepClause when not record_rep_clauses_only) or
           (BasicDecl(any defining_names is dn@* when has_rep_aspect(dn))
                when not record_rep_clauses_only)
]
