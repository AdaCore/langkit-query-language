# Flag each use of the specified aspects. The aspects to be detected are named
# in the parameter ``forbidden``. If the ``all`` parameter is true, all aspects
# by default are flagged, except the aspects listed in the ``allowed``
# parameter.

@unit_check(help="usage of specified aspects", parametric_exemption=true,
            category="Style", subcategory="Portability")
fun forbidden_aspects(unit, all=false, forbidden=[], allowed=[]) = [
    {message: "use of aspect " & node.f_id.text, loc: node}
    for node in from unit.root select AspectAssoc(f_id: id@Name)
    # Note that p_name_is doesn't work on e.g. AttributeRef, so compare strings
    # directly instead.
    when {
        val str = id.text.to_lower_case;
        (all or [p for p in forbidden if str == p.to_lower_case])
        and not [p for p in allowed if str == p.to_lower_case]}]
