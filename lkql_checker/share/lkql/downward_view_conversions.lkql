fun is_downward_conv(expr_type, t) =
    |" Whether converting from `expr_type` to `t` is a downward view conversion
    |" of tagged types
    expr_type is AdaNode
    and t is AdaNode
    and t.p_full_view() is target@BaseTypeDecl
      # Compare specific types in case one or the other is the classwide
      # version
      when target.p_specific_type() != expr_type.p_specific_type()
       and target.p_is_derived_type(expr_type)

fun is_tagged(typ) =
    |" Whether typ is tagged or an access to a tagged type
    |" TODO: Maybe share in the stdlib?
    typ.p_is_tagged_type()
    or typ.p_accessed_type() is BaseTypeDecl(p_is_tagged_type(): true)

@check(message="downward view conversion",
       category="Style", subcategory="Object Orientation")
fun downward_view_conversions(node) =
    |" Flag downward view conversions.
    |"
    |" This rule has no parameters.
    |"
    |" This rule will also flag downward view conversions done through access types.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 19, 21
    |"
    |"    package Foo is
    |"       type T1 is tagged private;
    |"       procedure Proc1 (X : in out T1'Class);
    |"
    |"       type T2 is new T1 with private;
    |"       procedure Proc2 (X : in out T2'Class);
    |"
    |"    private
    |"       type T1 is tagged record
    |"          C : Integer := 0;
    |"       end record;
    |"
    |"       type T2 is new T1 with null record;
    |"    end Foo;
    |"
    |"    package body Foo is
    |"
    |"       procedure Proc1 (X : in out T1'Class) is
    |"          Var : T2 := T2 (X);                          --  FLAG
    |"          X_Acc : T1_Access := X'Unrestricted_Access;
    |"          Var_2 : T2_Access := T2_Access (X_Acc);      --  FLAG
    |"       begin
    |"          Proc2 (T2'Class (X));                        --  FLAG
    |"       end Proc1;
    |"
    |"       procedure Proc2 (X : in out T2'Class) is
    |"       begin
    |"          X.C := X.C + 1;
    |"       end Proc2;
    |"
    |"    end Foo;
    node is CallExpr(
        # Select type conversions
        p_referenced_decl(): BaseTypeDecl(
            p_base_subtype(): t@BaseTypeDecl when is_tagged (t)
        )
    )

    # Where the target type is derived from the type of the conversion argument,
    # taking full views into account.
    when node.f_suffix[1].f_r_expr?.p_expression_type().p_full_view()
        is expr_type@BaseTypeDecl
           # Regular case
           when is_downward_conv(expr_type, t)
                # Downward view conversion case
                or is_downward_conv (expr_type.p_accessed_type(), t.p_accessed_type())
