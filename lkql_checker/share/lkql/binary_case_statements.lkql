fun to_if_stmt(case_stmt, ctx) =
    |" This function turns the given "case" statement into a if statement.
    |" Assumes that the "case" has only 2 alternatives.
    {
        val alts = case_stmt.f_alternatives.children;
        val cond = new RelationOp(
            f_left=case_stmt.f_expr,
            f_op=new OpEq(),
            f_right=alts[1].f_choices[1]
        );
        match alts[2].f_choices[1]
        | OthersDesignator =>
            ctx.create_from_template(
                "if {} then {} else {} end if;",
                "if_stmt_rule",
                [cond, alts[1].f_stmts, alts[2].f_stmts]
            )
        | choice           =>
            ctx.create_from_template(
                "if {} then {} elsif {} = {} then {} end if;",
                "if_stmt_rule",
                [cond, alts[1].f_stmts, case_stmt.f_expr, choice, alts[2].f_stmts]
            )
    }

@check(message="CASE statement can be replaced with IF statement",
       category="Style", subcategory="Programming Practice",
       auto_fix=(n, ctx) => ctx.replace(n, to_if_stmt(n, ctx)))
fun binary_case_statements(node, except_enums = false) =
    |" Flag a case statement if this statement has only two alternatives, one
    |" containing exactly one choice, the other containing exactly one choice
    |" or the ``others`` choice.
    |"
    |" The rule has an optional parameter for the ``+R`` option and for LKQL rule
    |" options files:
    |"
    |" *Except_Enums: bool*
    |"    If ``true``, do not flag case statements whose selecting expression is of an
    |"    enumeration type.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 1
    |"
    |"    case Var is                   --  FLAG
    |"       when 1 =>
    |"          Var := Var + 1;
    |"       when others =>
    |"          null;
    |"    end case;
    node is CaseStmt(
        f_alternatives: CaseStmtAlternativeList(
            all children(depth=1): a@CaseStmtAlternative
            when a.f_choices.children_count == 1
        )
        when node.f_alternatives.children_count == 2
    ) and not (except_enums and node.f_expr.p_expression_type().p_is_enum_type())
