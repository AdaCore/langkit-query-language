fun index(order, str) =
    [n for n in [1, 2, 3, 4, 5] if order[n] == str].to_list[1]

fun priority(spec, order) =
    if spec.f_default_expr
    then index(order, "defaulted_in")
    else match spec.f_mode
         | ModeOut     => index(order, "out")
         | ModeInOut   => index(order, "in_out")
         | ModeIn      => index(order, "in")
         | ModeDefault => if spec.f_type_expr is
                             AnonymousType(f_type_decl:
                                           *(f_type_def: AccessDef))
                          then index(order, "access") else index(order, "in")

@check(message="parameter out of order", remediation="EASY", category="Feature")
fun parameters_out_of_order(node,
                            order = ["in", "access", "in_out",
                                     "out", "defaulted_in"]) =
    |" Flag each parameter specification if it does not follow the required
    |" ordering of parameter specifications in a formal part. The required
    |" order may be specified by the following rule parameters:
    |"
    |" *in*
    |"   ``in`` non-access parameters without initialization expressions;
    |"
    |" *access*
    |"   ``access`` parameters  without initialization expressions;
    |"
    |" *in_out*
    |"   ``in out`` parameters;
    |"
    |" *out*
    |"   ``out`` parameters;
    |"
    |" *defaulted_in*
    |"   parameters with initialization expressions (the order of ``access``
    |"   and non-access parameters is not checked.
    |"
    |" When the rule is used with parameters, all the five parameters should
    |" be given, and each parameter should be specified only once.
    |"
    |" The rule can be called without parameters, in this case it checks the
    |" default ordering that corresponds to the order in which the
    |" rule parameters are listed above.
    |"
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 1
    |"
    |"    procedure Proc1 (I : in out Integer; B : Boolean) is    --  FLAG
    node is ParamSpec(any parent(depth=3): not EntryCompletionFormalParams)
    when ({
        val prio = priority(node, order);
        node is *(any next_siblings:
                  sib@ParamSpec when priority(sib, order) < prio)
    })
