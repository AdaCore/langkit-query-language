@check(message="incorrect format for numeric literal",
       category="Style", subcategory="Readability")
fun numeric_format(node) =
    |" Flag each numeric literal which does not satisfy at least one of the
    |" following requirements:
    |"
    |" *
    |"   the literal is given in the conventional decimal notation given,
    |"   or, if its base is specified explicitly, this base should be
    |"   2, 8, 10 or 16 only;
    |"
    |" *
    |"   if the literal base is 8 or 10, an underscore should separate groups
    |"   of 3 digits starting from the right end of the literal;
    |"
    |" *
    |"   if the literal base is 2 or 16, an underscore should separate groups
    |"   of 4 digits starting from the right end of the literal;
    |"
    |" *
    |"   all letters (exponent symbol and digits above 9) should be in upper case.
    |"
    |" This rule has no parameters.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 4, 5
    |"
    |"    D : constant := 16#12AB_C000#;          --  NO FLAG
    |"    E : constant := 3.5E3;                  --  NO FLAG
    |"
    |"    F : constant := 1000000;                --  FLAG
    |"    G : constant := 2#0001000110101011#;    --  FLAG
    node is NumLiteral when match node.text
    # default base
    | "^[0-9]{1,3}(_[0-9]{3})*(\.[0-9]{1,3}(_[0-9]{3})*)?(E[+-]?[0-9]+)?$"
                  => false
    # base 2
    | "^2#[01]{1,4}(_[01]{4})*(\.[01]{1,4}(_[01]{4})*)?#(E[+-]?[0-9]+)?$"
                  => false
    # base 8
    | "^8#[0-7]{1,3}(_[0-7]{3})*(\.[0-7]{1,3}(_[0-7]{3})*)?#(E[+-]?[0-9]+)?$"
                  => false
    # base 16
    | "^16#[0-9A-Z]{1,4}(_[0-9A-Z]{4})*(\.[0-9A-Z]{1,4}(_[0-9A-Z]{4})*)?#(E[+-]?[0-9]+)?$"
                  => false
    # base 10
    | "^10#[0-9]{1,3}(_[0-9]{3})*(\.[0-9]{1,3}(_[0-9]{3})*)?#(E[+-]?[0-9]+)?$"
                  => false
    # Reject anything else
    | *           => true
