# Flag each control structure whose nesting level exceeds the value provided in
# the rule parameter n.
# The control structures checked are the following:
# - if statement
# - case statement
# - loop statement
# - selective accept statement
# - timed entry call statement
# - conditional entry call statement
# - asynchronous select statement
# If Loops_Only is true, only loop statements are counted.

fun check_control_parent(node, n) =
    |" Return true if node and its parents contain more than n control structure
    match node
    | null => false
    | (IfStmt | CaseStmt | BaseLoopStmt | SelectStmt) =>
        if n == 0 then true else check_control_parent(node.parent, n - 1)
    | * => check_control_parent(node.parent, n)

fun check_loop_parent(node, n) =
    |" Return true if node and its parents contain more than n loops
    match node
    | null => false
    | BaseLoopStmt => if n == 0 then true else check_control_parent(node.parent, n - 1)
    | * => check_control_parent(node.parent, n)

@check(message="nesting level of control structures too deep",
       category="Style", subcategory="Programming Practice")
fun overly_nested_control_structures(node, n: int = 3, loops_only = false) =
    if loops_only
    then node is BaseLoopStmt when check_loop_parent(node.parent, n)
    else node is (IfStmt | CaseStmt | BaseLoopStmt | SelectStmt)
         when check_control_parent(node.parent, n)
