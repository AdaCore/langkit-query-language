# Flag any use of an others choice in a case statement.
# If the optional parameter N is specified, only flag if the others choice
# can be determined to span less than N values (0 means no minimum value).

import stdlib

fun choices(list) =
    reduce([c for c in list.children if c is not OthersDesignator],
           (comp, node) =>
               comp + (match node
                       | BinOp =>
                           stdlib.range_values(node.f_left, node.f_right)
                       | Identifier(p_referenced_decl() is type@BaseTypeDecl) =>
                           stdlib.number_of_values(type)
                       | *     => 1),
           0)

fun remaining_values(case) =
    stdlib.number_of_values(case.f_expr.p_expression_type()) -
    reduce([c.f_choices for c in case.f_alternatives.children],
           (comp, node) => comp + choices(node),
           0)

@check(message="OTHERS choice in case statement", remediation="EASY",
       category="Style", subcategory="Programming Practice")
fun others_in_case_statements(node, n : int = 0, ignore = false) =
    node is OthersDesignator(parent is AlternativesList(
                             parent is alt@CaseStmtAlternative))
    when n == 0 or
         { val v = remaining_values(alt.parent.parent); v > 0 and v < n }
