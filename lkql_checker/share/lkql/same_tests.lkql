fun check_list(l) =
    [e for e in l if [f for f in l if e != f and e.same_tokens(f)]]

fun message(node) = {
    val l = [node.f_cond_expr] &
            [n.f_cond_expr for n in node.f_alternatives.children].to_list;
    val e = [e for e in l if [f for f in l if e != f and
                              e.same_tokens(f)]][1];
    val f = [f for f in l if e != f and e.same_tokens(f)][1];
    {message: "test duplicated at line " & img(f.token_start().start_line),
     loc: e}
}

@unit_check(help="same test",
            category="Style", subcategory="Programming Practice")
fun same_tests(unit) =
    |" Flags condition expressions in ``if`` statements or ``if`` expressions if
    |" a statement or expression contains another condition expression that is
    |" syntactically equivalent to the first one.
    |"
    |" This rule has no parameters.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 1, 5
    |"
    |"    if Str = A then                --  FLAG: same test at line 5
    |"       Put_Line("Hello, tata!");
    |"    elsif Str = B then
    |"       Put_Line("Hello, titi!");
    |"    elsif Str = A then
    |"       Put_Line("Hello, toto!");
    |"    else
    |"       Put_Line("Hello, world!");
    |"    end if;
    [
        message(n)
        for n in from unit.root select
        node@(IfStmt | IfExpr)
        when check_list([node.f_cond_expr] &
                        [n.f_cond_expr for n in node.f_alternatives.children].to_list)
    ]
