# TODO: extend with use_membership.check_expr to recognize more cases.

import stdlib

fun is_static_relation(expr) =
    expr is RelationOp(f_right: Expr(p_is_static_expr(): true),
                       f_op: op@Op when stdlib.is_predefined_op(op))

fun check_alternatives(list, id) =
    |" Check that all alternatives are of the form:
    |" Id <relation op> static-expr
    [x for x in list
     if x.f_cond_expr is r@RelationOp(f_left: id2@(Identifier | DottedName))
        when is_static_relation(r) and id2.p_name_matches(id)
     ].length == list.length

@check(message="IF statement may be replaced by a CASE statement",
       category="Style", subcategory="Programming Practice")
fun use_case_statements(node) =
    |" Flag an ``if`` statement if this statement could be replaced by a
    |" ``case`` statement. An ``if`` statement is considered as being
    |" replaceable by a ``case`` statement if:
    |"
    |" *
    |"   it contains at least one ``elsif`` alternative;
    |"
    |" *
    |"   all the conditions are infix calls to some predefined relation operator,
    |"   for all of them one operand is the reference to the same variable of some
    |"   discrete type;
    |"
    |" *
    |"   for calls to relation operator another operand is some static expression;
    |"
    |" This rule has no parameters.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 1
    |"
    |"    if I = 1 then      --  FLAG
    |"       I := I + 1;
    |"    elsif I > 2 then
    |"       I := I + 2;
    |"    else
    |"       I := 0;
    |"    end if;
    node is IfStmt(
        f_alternatives: l@ElsifStmtPartList when l[1],
        f_cond_expr: r@RelationOp
        when r.f_left is id@(
                 (Identifier when id.p_expression_type().p_is_discrete_type())
              | (DottedName
                  when id.f_suffix is suffix@Name
                      when suffix.p_referenced_decl() is ComponentDecl
                       and suffix.p_expression_type().p_is_discrete_type()))
            when is_static_relation(r)
             and check_alternatives(from node.f_alternatives select ElsifStmtPart, id))
