# TODO: move this function to libadalang
fun lal_is_mod_type(n) =
    n.f_type_expr.p_designated_type_decl().p_root_type() is TypeDecl(f_type_def: ModIntTypeDef)

@check(message="bit record without layout definition",
       category="Style", subcategory="Portability")
fun bit_records_without_layout_definition(node) =
    |" Flag record type declarations if a record has a component of a modular
    |" type and the record type is packed but does not have a record representation clause
    |" applied to it.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 4
    |"
    |"    package Pack is
    |"       type My_Mod is mod 8;
    |"
    |"       type My_Rec is record   --  FLAG
    |"          I : My_Mod;
    |"       end record;
    |"       pragma Pack (My_Rec);
    |"    end Pack;
    node is TypeDecl
    when node.f_type_def is (RecordTypeDef | DerivedTypeDef)
     and node.p_has_aspect("Pack")
     and not node.p_get_record_representation_clause()
     and node is *(any children: c@(ComponentDef | DiscriminantSpec)
                   when lal_is_mod_type(c))
