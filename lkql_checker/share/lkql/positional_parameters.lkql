# Flag each positional parameter notation in a subprogram or entry call, except
# for the following:
# - Parameters of calls to attribute subprograms are not flagged;
# - Parameters of prefix or infix calls to operator functions are not flagged;
# - If the called subprogram or entry has only one formal parameter, the
#   parameter of the call is not flagged;
# - If a subprogram call uses the Object.Operation notation, then
#   - the first parameter (that is, Object) is not flagged;
#   - if the called subprogram has only two parameters, the second parameter of
#     the call is not flagged;
# This rule has the parameter All: if this parameter is specified, all the
# positional parameter associations that can be replaced with named
# associations according to language rules are flagged, except parameters of
# the calls to operator functions.

fun check_actual_param(spec, node, check_dot) =
    match spec
    | SubpSpec  =>
        {
            val num_params=(from spec.f_subp_params?.f_params
                            select DefiningName).length;
            num_params > 2 or (num_params > 1 and not check_dot)
        }
    | EntrySpec => spec.f_entry_params.f_params[2] != null
    | *         => false

fun add_param_name(param, ctx) =
    ctx.set_child(
        param,
        ParamAssoc.f_designator,
        new Identifier (param.p_get_params()[1].text)
    )

@check(message="positional parameter association", remediation="EASY",
       category="Style", subcategory="Programming Practice",
       auto_fix=add_param_name)
fun positional_parameters(node, all=false) =
    node is ParamAssoc(f_designator: null, parent: l@AssocList)
    when l.parent is c@CallExpr(
        p_is_call(): true,
        f_name: not AttributeRef,
        f_name: id@*(p_is_operator_name(): false)
            when (all or check_actual_param(c.p_called_subp_spec(), node,
                                            id.p_is_dot_call()))
    )
