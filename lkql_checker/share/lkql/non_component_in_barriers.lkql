# Flag each occurrence of a protected entry barrier referencing variables
# other than components of the protected object.

fun is_protected_component(id, decl, names) = {
    val name = decl.p_defining_name();
    [n for n in names if n == name] or
    (id.parent is p@DottedName when
     is_protected_component(p, p.f_prefix.p_referenced_decl(), names))
}

@unit_check(help="barrier references non component variable",
            category="Style", subcategory="Programming Practice")
fun non_component_in_barriers(unit) = [
    {message: "barrier references non component variable", loc: n.f_barrier}
    for n in from unit.root select node@EntryBody(
        any parent is b@ProtectedBody
        when {
            val names = from b.p_decl_part()?.f_definition?.f_private_part?.f_decls
                        select DefiningName;
            [id for id in (from node.f_barrier select Identifier)
             if id.p_referenced_decl() is
                ObjectDecl or ParamSpec or
                d@ComponentDecl when not is_protected_component(id, d, names)]
        }
    )
]
