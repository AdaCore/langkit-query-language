# Flag each occurrence of a protected entry barrier referencing variables
# other than components of the protected object.

fun contains_defining_name(l, name) =
    |" Return true if l contains the defining name `name`
    [n for n in l if n == name]?[1] != ()

@unit_check(help="barrier references non component variable")
fun non_component_in_barriers(unit) = [
    {message: "barrier references non component variable", loc: n.f_barrier}
    for n in from unit.root select node@EntryBody(any parent is b@ProtectedBody)
    when ({
        val names = from b.p_decl_part()?.f_definition?.f_private_part?.f_decls
                    select DefiningName;
        [id for id in (from node.f_barrier select Identifier)
         if id.p_referenced_decl() is
            ObjectDecl or ParamSpec or
            d@ComponentDecl
                when not contains_defining_name(names, d.p_defining_name())].
        length != 0
    })
]
