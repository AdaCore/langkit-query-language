# Flag each generic package instantiation when it can be determined that
# it has the same actual parameters as another generic instantiation.
# This determination is conservative and will check for a match on:
# - integer, character and string literals
# - identifier names other than function calls (e.g. types, variables,
#   subprogram names).
# Note that no verification is made to check if the instantiation declares
# global variables (if they do, removing the flagged duplicates will likely not
# be possible).

import stdlib

fun same_exprs(e1, e2) =
    match e1
    | IntLiteral    => e2 is IntLiteral and
                       e1.p_denoted_value() == e2.p_denoted_value()
    | CharLiteral   => e2 is CharLiteral and
                       e1.p_denoted_value() == e2.p_denoted_value()
    | StringLiteral => e2 is StringLiteral and
                       e1.p_denoted_value() == e2.p_denoted_value()
    | RealLiteral   => false
    | Name          => e2 is Name and
                       e1.p_referenced_decl() == e2.p_referenced_decl() and
                       not e1.p_is_call()
    | *             => false

fun params_equal(l1, l2, i: int) =
    if i == 0 then true
    else same_exprs(l1[i].f_r_expr, l2[i].f_r_expr) and
         params_equal(l1, l2, i - 1)

fun same_params(p1, p2) = {
    val count = p1.children_count;
    count == p2.children_count and params_equal(p1, p2, count)
}

@memoized
fun insts() = select GenericPackageInstantiation

@memoized
fun same_instance(node) =
    [i for i in insts()
       if i != node and
          node.f_generic_pkg_name.p_referenced_decl() ==
          i.f_generic_pkg_name.p_referenced_decl() and
          same_params(node.f_params, i.f_params)]?[1]

@unit_check(help="duplicate generic package instantiations",
            category="Style", subcategory="Program Structure")
fun same_instantiations(unit) =
    [{message: "same instantiation found at " &
               stdlib.sloc_image(same_instance(n)), loc: n}
     for n in from unit.root select GenericPackageInstantiation
              if same_instance(n)]
