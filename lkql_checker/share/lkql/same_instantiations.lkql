import stdlib

fun same_exprs(e1, e2) =
    match e1
    | IntLiteral    => e2 is IntLiteral and
                       e1.p_denoted_value() == e2.p_denoted_value()
    | StringLiteral => e2 is StringLiteral and
                       e1.p_denoted_value() == e2.p_denoted_value()
    | CharLiteral   => e2 is CharLiteral and
                       e1.p_denoted_value() == e2.p_denoted_value()
    | RealLiteral   => false
    | Name          => e2 is Name and
                       e1.p_referenced_defining_name() is name@DefiningName
                       when name == e2.p_referenced_defining_name() and not e1.p_is_call()
    | *             => false

fun params_equal(l1, l2, i: int) =
    i == 0 or
    (same_exprs(l1[i].actual, l2[i].actual) and params_equal(l1, l2, i - 1))

fun same_non_null_params(i1, i2) = {
    val params1 = i1.p_inst_params();
    val params2 = i2.p_inst_params();
    val length = params1.length;

    # Check that there is at least one parameter
    length != 0 and
    # Compare these parameters
    length == params2.length and params_equal(params1, params2, length)
}

@memoized
fun insts(library_only) =
    select i@GenericPackageInstantiation
    when if library_only then not stdlib.has_local_scope(i)

@memoized
fun same_instance(node, library_only) =
    [i for i in insts(library_only)
       if i != node and
          node.f_generic_pkg_name.p_referenced_decl() ==
              i.f_generic_pkg_name.p_referenced_decl() and
          same_non_null_params(node, i)]?[1]

@unit_check(help="duplicate generic package instantiations (global analysis required)",
            category="Style", subcategory="Program Structure")
fun same_instantiations(unit, library_level_only = false) =
    |" Flag each generic package instantiation when it can be determined that a set of
    |" the ``gnatcheck`` argument sources contains another instantiation of the same
    |" generic with the same actual parameters.
    |" This determination is conservative, it checks currently for the following matching
    |" parameters:
    |"
    |" * integer, character, and string literals;
    |"
    |" * Ada names that denote the same entity.
    |"
    |" Generic packages that have no parameters are ignored.
    |"
    |" If some instantiation is marked by the rule, additional investigation
    |" is required to decide if one of the duplicated instantiations can be
    |" removed to simplify the code. In particular, the rule does not check if
    |" these instantiations declare any global variable or perform some
    |" non-trivial actions as a part of their elaboration.
    |"
    |" This rule has the following (optional) parameter for the ``+R`` option and
    |" for LKQL rule options files:
    |"
    |" *Library_Level_Only: bool*
    |"    If ``true``, only check library level instantiations.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 10, 17
    |"
    |"    generic
    |"       type T is private;
    |"       X : Integer;
    |"    package Gen is
    |"    end Gen;
    |"
    |"    with Gen;
    |"
    |"    package Inst1 is
    |"       package Inst_1 is new Gen (Integer, 2);  --  FLAG
    |"       package Inst_2 is new Gen (Integer, 3);  --  NO FLAG
    |"    end Inst1;
    |"
    |"    with Gen;
    |"
    |"    package Inst2 is
    |"       package Inst_3 is new Gen (Integer, 2);  --  FLAG
    |"    end Inst2;
    [{message: "same instantiation found at " &
               stdlib.sloc_image(same_instance(n, library_level_only)), loc: n}
     for n in from unit.root
              select GenericPackageInstantiation
     if (if library_level_only then not stdlib.has_local_scope(n)) and
         same_instance(n, library_level_only)
    ]
