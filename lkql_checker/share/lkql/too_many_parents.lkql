# Flag any tagged type declaration, interface type declaration, single task
# declaration or single protected declaration that has more than n
# parents. A parent here is either a (sub)type denoted by the subtype mark from
# the parent_subtype_indication (in case of a derived type declaration), or any
# of the progenitors from the interface list (if any).
# This rule has the following parameter: n: Positive integer
# specifying the maximal allowed number of parents/progenitors.

import stdlib

@check(message="type has too many parents", remediation="MAJOR",
       category="Style", subcategory="Object Orientation")
fun too_many_parents(node, n : int = 5) =
    node is (TypeDecl(p_is_tagged_type(): true) |
             TaskTypeDecl | ProtectedTypeDecl | SingleProtectedDecl)
    when ({
        # Compute the number of interfaces for a SingleProtectedDecl, 0 otherwise
        # since for all type declarations, super_types takes interfaces into
        # account.
        val nb_single_protected_interfaces = (
            if node is SingleProtectedDecl then node.f_interfaces.children_count else 0
        );
        # Compute the length of the set of unique parent types
        val nb_parent_types = stdlib.super_types(node).to_list.unique.length;
        nb_parent_types + nb_single_protected_interfaces > n
    })
