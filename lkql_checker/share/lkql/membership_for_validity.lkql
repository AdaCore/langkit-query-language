fun type_of(name) =
    match name.p_referenced_decl()
    | BasicDecl(p_type_expression(): t@TypeExpr) => t.p_designated_type_decl()
    | * => null

@check(message="membership test instead of 'Valid",
       category="Style", subcategory="Portability")
fun membership_for_validity(node) =
    |" Flag membership tests that can be replaced by a ``'Valid`` attribute.
    |" Two forms of membership tests are flagged:
    |"
    |" * X in Subtype_Of_X
    |" * X in Subtype_Of_X'First .. Subtype_Of_X'Last
    |"
    |" where X is a data object except for a loop parameter, and ``Subtype_Of_X``
    |" is the subtype of the object as given by the corresponding declaration.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 5
    |"
    |"       subtype My_Int is Integer range 1 .. 10;
    |"       X : My_Int;
    |"       Y : Integer;
    |"    begin
    |"       if X in My_Int then                           --  FLAG
    node is MembershipExpr(f_expr: var@Name)
    when not node.f_membership_exprs[2]
     and node.f_membership_exprs[1] is
         ((typ@Name when type_of(var) == typ.p_referenced_decl()) |
         bin_op@BinOp(f_op: OpDoubleDot,
               f_left: at1@AttributeRef(f_prefix: typ1)
                         when at1.f_attribute.p_name_is("First")
                          and at1.f_prefix is Name,
               f_right: at2@AttributeRef(f_prefix: typ2)
                          when at2.f_attribute.p_name_is("Last")
                           and at2.f_prefix is Name)
         when (
             typ1.p_referenced_decl() == typ2.p_referenced_decl()
             and type_of(var) == typ1.p_referenced_decl()
         ))
