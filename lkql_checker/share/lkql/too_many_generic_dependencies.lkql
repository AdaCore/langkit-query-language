fun check_deps(node, n : int) =
    |" Return true if node has a chain of at least n generic units withed
    n == 0 or
    node is LibraryItem(
        parent: unit@CompilationUnit
        when [x for x in concat(
                  [[p for p in w.f_packages.children
                      if p.p_referenced_decl() is GenericDecl].to_list
                   for w in (from unit.f_prelude select WithClause)].to_list)
                if check_deps(x.p_referenced_decl()?.parent, n - 1)])

@unit_check(help="too many generic dependencies", remediation="MAJOR",
            category="Style", subcategory="Program Structure")
fun too_many_generic_dependencies(unit, n : int = 3) =
    |" Flags a ``with`` clause that mentions a
    |" generic unit that in turn directly depends (mentions in its ``with``
    |" clause) on another generic unit, and so on, and the length of the
    |" chain of these dependencies on generics is more than N where N is
    |" a rule parameter.
    |"
    |" This rule has the following (mandatory) parameter for the ``+R`` option and
    |" for LKQL rule options files:
    |"
    |" *N: int*
    |"    Non-negative integer specifying the maximal allowed length of the
    |"    chain of dependencies on generic units.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 20
    |"
    |"    generic
    |"    package D is
    |"    end D;
    |"
    |"    with D;
    |"    generic
    |"    package C is
    |"    end C;
    |"
    |"    with C;
    |"    generic
    |"    package B is
    |"    end B;
    |"
    |"    with B;
    |"    generic
    |"    package A is
    |"    end A;
    |"
    |"    with A;        --  FLAG (if N <= 3)
    |"    package P is
    |"       procedure Proc;
    |"    end P;
    if unit.root is CompilationUnit then
        [{message: "too many generic dependencies", loc: x}
         for x in
         concat([[p for p in w.f_packages.children
                    if p.p_referenced_decl() is decl@GenericDecl
                       when check_deps(decl.parent, n)].to_list
                 for w in from unit.root.f_prelude select WithClause].to_list)]
    else []
