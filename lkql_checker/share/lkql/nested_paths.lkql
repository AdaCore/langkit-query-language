fun has_last_breaking_stmt(stmts) =
    match stmts[stmts.children_count]
    | (RaiseStmt | ReturnStmt | ExitStmt(f_cond_expr: null) | GotoStmt) => true
    | b@BlockStmt => b.f_stmts.f_exceptions[1] == null and
                     has_last_breaking_stmt(b.f_stmts.f_stmts)
    | *           => false

@check(message="nested path may be moved outside if statement",
       category="Style", subcategory="Programming Practice")
fun nested_paths(node) =
    |" Flag the beginning of a sequence of statements that is immediately enclosed
    |" by an ``IF`` statement if this sequence of statement can be moved outside
    |" the enclosing ``IF`` statement. The beginning of a sequence of statements is
    |" flagged if:
    |"
    |" *
    |"   The enclosing ``IF`` statement contains ``IF`` and ``ELSE`` paths and
    |"   no ``ELSIF`` path;
    |"
    |" *
    |"   This sequence of statements does not end with a breaking statement but
    |"   the sequence of statement in another path does end with a breaking statement.
    |"
    |" A breaking statement is either a raise statement, or a return statement,
    |" or an unconditional exit statement, or a goto statement or a block
    |" statement without an exception handler with the enclosed sequence of
    |" statements that ends with some breaking statement.
    |"
    |" This rule has no parameters.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 3
    |"
    |"    loop
    |"       if I > K then
    |"          K := K + I;   --  FLAG
    |"          I := I + 1;
    |"       else
    |"          L := 10;
    |"          exit;
    |"       end if;
    |"    end loop;
    # Match stmt lists that are either the then or the else list of an if stmt
    node is (StmtList(parent: if_stmt@IfStmt) |
             StmtList(parent: ElsePart(parent: if_stmt@IfStmt)))
     when

      # No "elsif" branches
      if_stmt.f_alternatives[1] == null

      # Has an "else" part
      and if_stmt.f_else_part.f_stmts[1] != null

      and not has_last_breaking_stmt(node)
      and has_last_breaking_stmt(if if_stmt.f_then_stmts == node
                                 then if_stmt.f_else_part.f_stmts
                                 else if_stmt.f_then_stmts)
