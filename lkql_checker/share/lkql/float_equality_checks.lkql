import stdlib

fun is_float(n) =
    n.p_expression_type() is t@BaseTypeDecl
    when t.p_full_view().p_is_float_type()

@check(message="use of equality operation for float values", category="Feature")
fun float_equality_checks(node, follow_renamings=false) =
    |" Flag all explicit calls to the predefined equality operations for
    |" floating-point types and private types whose completions are floating-point
    |" types. Both '=' and '/=' operations are checked. User-defined equality
    |" operations are not flagged. Also, the '=' and '/=' operations for fixed-point
    |" types are not flagged. Uses of operators that are renamings of the predefined
    |" equality operations will be flagged if `Follow_Renamings` is true.
    |"
    |" This rule has the following (optional) parameter for the ``+R`` option and
    |" for LKQL rule options files:
    |"
    |" *Follow_Renamings: bool*
    |"    Whether to take renamings of predefined equality operations into account.
    |"
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 11
    |"
    |"    package Pack is
    |"         type Speed is digits 0.01 range 0.0 .. 10_000.0;
    |"         function Get_Speed return Speed;
    |"    end Pack;
    |"
    |"    with Pack; use Pack;
    |"    procedure Process is
    |"         Speed1 : Speed := Get_Speed;
    |"         Speed2 : Speed := Get_Speed;
    |"
    |"         Flag : Boolean := Speed1 = Speed2;     --  FLAG
    node is ((
        RelationOp(f_op: op@(OpEq | OpNeq))
        when stdlib.is_predefined_op(op, follow_renamings) and is_float(node.f_left)
    )
    | CallExpr
       when (node.f_name.p_name_is("\"=\"") or
             node.f_name.p_name_is("\"/=\""))
        and stdlib.is_predefined_op(node, follow_renamings)
        and is_float(node.f_suffix[1].f_r_expr))
