fun check_generic(n) =
    |" Return true if the generic decl corresponding to n contains more than 1
    |" formal parameter.
    [(match x.f_decl
      | d@(ObjectDecl | NumberDecl) => d.f_ids.children_count
      | *                            => 1)
     for x in from n.p_referenced_decl().f_formal_part.f_decls
              select GenericFormal].length > 1

@check(message="positional generic association", remediation="EASY",
       category="Style", subcategory="Programming Practice")
fun positional_generic_parameters(node) =
    |" Flag each positional actual generic parameter except for the case when
    |" the generic unit being instantiated has exactly one generic formal
    |" parameter.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 10
    |"
    |"    with Ada.Text_IO; use Ada.Text_IO;
    |"    with Ada.Unchecked_Conversion;
    |"    procedure Bar (I : in out Integer) is
    |"       type My_Int is range -12345 .. 12345;
    |"
    |"       function To_My_Int is new Ada.Unchecked_Conversion
    |"         (Source => Integer, Target => My_Int);
    |"
    |"       function To_Integer is new Ada.Unchecked_Conversion
    |"         (My_Int, Integer);                                --  FLAG (twice)
    |"
    |"       package My_Int_IO is new  Ada.Text_IO.Integer_IO (My_Int);
    node is ParamAssoc(f_designator: null,
                       parent: l@AssocList(parent: g@GenericInstantiation))
    when l.children_count > 1
      or match g
         | p@GenericSubpInstantiation    => check_generic(p.f_generic_subp_name)
         | p@GenericPackageInstantiation => check_generic(p.f_generic_pkg_name)
         | *                             => false

