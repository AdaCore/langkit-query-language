# Flag each positional actual generic parameter except for the case when the
# generic unit being instantiated has exactly one generic formal parameter.

fun follow_renamings(gen_decl) =
    |" If gen_decl is a renaming declaration, return the renamed generic
    |" declaration, gen_decl otherwise.
    match gen_decl
    | r@GenericRenamingDecl => r.f_renames.p_referenced_decl()
    | *                     => gen_decl

fun check_generic(n) =
    |" Return true if the generic decl corresponding to n contains more than 1
    |" formal parameter.
    reduce([
        (
            match x.f_decl
            | d@(ObjectDecl | NumberDecl) => d.f_ids.children_count
            | *                           => 1
        )
        for x in from follow_renamings(n).f_formal_part.f_decls select GenericFormal
    ], (acc, cur) => acc + cur, 0) > 1

fun add_param_name(param, ctx) =
    ctx.set_child(
        param,
        ParamAssoc.f_designator,
        new Identifier (param.p_get_params()[1].text)
    )

@check(message="positional generic association", remediation="EASY",
       category="Style", subcategory="Programming Practice",
       auto_fix=add_param_name)
fun positional_generic_parameters(node) =
    node is ParamAssoc(f_designator: null,
                       parent: l@AssocList(parent: g@GenericInstantiation))
    when l.children_count > 1
    or match g
    | g@GenericInstantiation => check_generic(g.p_designated_generic_decl())
    | *                      => false
