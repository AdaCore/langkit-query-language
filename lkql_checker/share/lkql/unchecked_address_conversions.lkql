import stdlib

fun is_address(param) =
    stdlib.full_root_type(param.f_r_expr.p_referenced_decl())
          .p_fully_qualified_name() == "System.Address"

fun check_uc_params(source, target, all) =
    |" If `all` is true, check that either source or target is derived from
    |" Address. Otherwise, check that source is derived from System.Address and
    |" target is an access type.
    if all then is_address(source) or is_address(target)
    else target.f_r_expr.p_referenced_decl().p_full_view().p_is_access_type()
     and is_address(source)

@check(message="address-to-access conversion",
       follow_generic_instantiations=true,
       category="Style", subcategory="Programming Practice")
fun unchecked_address_conversions(node, all=false, no_instantiations=false) =
    |" Flag instantiations of ``Ada.Unchecked_Conversion`` if the actual for the
    |" formal type Source is the ``System.Address`` type (or a type derived from
    |" it), and the actual for the formal type ``Target`` is an access type
    |" (including types derived from access types). This include cases when the
    |" actual for ``Source`` is a private type and its full declaration is a type
    |" derived from ``System.Address``, and cases when the actual for ``Target`` is
    |" a private type and its full declaration is an access type. The rule is
    |" checked inside expanded generics unless the ``No_Instantiations`` parameter
    |" is set.
    |"
    |" The rule has the following optional parameters for the ``+R`` option and for
    |" LKQL rule options files:
    |"
    |" *All: bool*
    |"    If ``true``, all instantiations of Unchecked_Conversion to or from System.Address are
    |"    flagged.
    |"
    |" *No_Instantiations: bool*
    |"    If ``true``, Do not check inside expanded generics.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 9
    |"
    |"    with Ada.Unchecked_Conversion;
    |"    with System;
    |"    package Foo is
    |"       type My_Address is new System.Address;
    |"
    |"       type My_Integer is new Integer;
    |"       type My_Access is access all My_Integer;
    |"
    |"       function Address_To_Access is new Ada.Unchecked_Conversion  --  FLAG
    |"         (Source => My_Address,
    |"          Target => My_Access);
    |"    end Foo;
    node is GenericSubpInstantiation
    when not (no_instantiations and stdlib.in_generic_instance(node))
     and stdlib.is_unchecked_conversion(node)
     and node.f_params is params@AssocList
         when params.children_count == 2
          and if (not params[1].f_designator) or
                 params[1].f_designator.p_name_is("source")
              then check_uc_params(params[1], params[2], all)
              else check_uc_params(params[2], params[1], all)
