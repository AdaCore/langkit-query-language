# Flag instantiations of Ada.Unchecked_Conversion if the actual for the formal
# type Source is the System.Address type (or a type derived from it), and the
# actual for the formal type Target is an access type (including types derived
# from access types). This includes cases when the actual for Source is a
# private type and its full declaration is a type derived from System.Address,
# and cases when the actual for Target is a private type and its full
# declaration is an access type. The rule is checked inside expanded generics.
#
# If the parameter ALL is set, all instantiations of Unchecked_Conversion
# to or from System.Address are flagged.

import stdlib

fun is_address(param) =
    stdlib.full_root_type(param.f_r_expr.p_referenced_decl()).
    p_fully_qualified_name() == "System.Address"

fun check_uc_params(source, target, all) =
    |" If `all` is true, check that either source or target is derived from
    |" Address. Otherwise, check that source is derived from System.Address and
    |" target is an access type.
    if all then is_address(source) or is_address(target)
    else target.f_r_expr.p_referenced_decl().p_full_view().p_is_access_type()
     and is_address(source)

@check(message="address-to-access conversion",
       follow_generic_instantiations=true,
       category="Style", subcategory="Programming Practice")
fun unchecked_address_conversions(node, all=false) =
    node is GenericSubpInstantiation
    when ({
        val name = stdlib.ultimate_subprogram_alias(node.p_designated_subp()).
                   p_fully_qualified_name();
        name == "Ada.Unchecked_Conversion" or name == "Unchecked_Conversion"})
     and node.f_params is params@AssocList
         when params.children_count == 2
          and if not params[1].f_designator or
                 params[1].f_designator.p_name_is("source") 
              then check_uc_params(params[1], params[2], all)
              else check_uc_params(params[2], params[1], all)
