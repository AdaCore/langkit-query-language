# Flag instantiations of Ada.Unchecked_Conversion if the actual for the formal
# type Source is the System.Address type (or a type derived from it), and the
# actual for the formal type Target is an access type (including types derived
# from access types). This includes cases when the actual for Source is a
# private type and its full declaration is a type derived from System.Address,
# and cases when the actual for Target is a private type and its full
# declaration is an access type. The rule is checked inside expanded generics.

fun check_uc_params(source, target) =
    |" Check that source is derived from System.Address and target is an
    |" access type.
    target?.f_r_expr?.p_referenced_decl()?.p_is_access_type() and
    source?.f_r_expr?.p_referenced_decl()?.p_root_type()?.
    p_fully_qualified_name() == "System.Address"

# TODO: set follow_generic_instantiations to true once we can check
# GenericSubpInstantiation with it.
@check(message="address-to-access conversion",
       follow_generic_instantiations=false)
fun unchecked_address_conversions(node) =
    node is GenericSubpInstantiation
    when node.p_designated_subp()?.p_canonical_fully_qualified_name()
         == "ada.unchecked_conversion"
     and node.f_params is params@AssocList
         when children_count(params) == 2
          and if params[1]?.f_designator == null or
                 params[1]?.f_designator?.p_name_is("source") 
              then check_uc_params(params[1], params[2])
              else check_uc_params(params[2], params[1])
