import stdlib

# Return whether the node passed as argument is within a nested loop
fun is_in_nested_loop(n) = {
    val body = stdlib.enclosing_body(n);
    [p for p in n.parents(include_self=false)
     if p is BaseLoopStmt and stdlib.enclosing_body(p) == body].length > 1
}

@check(message="exit statement with no loop name",
       rule_name="EXIT_Statements_With_No_Loop_Name",
       category="Style", subcategory="Programming Practice")
fun exit_statements_with_no_loop_name(node, nested_only=false) =
    |" Flag each ``exit`` statement that does not specify the name of the loop
    |" being exited.
    |"
    |" This rule has the following (optional) parameter for the ``+R`` option and
    |" for LKQL rule options files:
    |"
    |" *Nested_Only: bool*
    |"    If ``true``, flag only those exit statements with no loop name that exit from
    |"    nested loops.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 4
    |"
    |"    procedure Bar (I, J : in out Integer) is
    |"    begin
    |"       loop
    |"          exit when I < J;  --  FLAG
    |"          I := I - 1;
    |"          J := J + 1;
    |"       end loop;
    |"    end Bar;
    if nested_only then
       node is e@ExitStmt(f_loop_name: null) when is_in_nested_loop(e)
    else
       node is ExitStmt(f_loop_name: null)
