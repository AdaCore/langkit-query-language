# Flag while loops which could be replaced by a for loop
# This rule recognizes while loops of the form:
#      Id : ...;
#      [no write reference to Id]
#   begin
#      [...]
#      while Id <relation op> ... loop
#         [no write reference to Id]
#         Id := Id +/- 1;
#      end loop;
#      [no reference to Id]

import stdlib

fun write_references(node, id) =
    |" Return all the write references to `id`, starting from `node`
    from node select Identifier(p_name_matches(id) is true,
                                p_is_write_reference() is true)

fun no_write_reference(node, id) =
    |" Return true if no write reference to `id` is found, starting from `node`
    (from node select first
     Identifier(p_name_matches(id) is true,
                p_is_write_reference() is true)) == null

fun has_references(node, id) =
    |" Return true if any reference to `id` starting from `node` is found
    (from node select first Identifier(p_name_matches(id) is true)) != null

@check(message="while loop may be replaced by a for loop",
       category="Style", subcategory="Programming Practice")
fun for_loops(node) =
    # Find while loops of the form: while Id <relation op> ... loop
    node is WhileLoopStmt(f_spec is WhileLoopSpec(f_expr is
                          rel@RelationOp(f_left is id@Identifier)
                          when stdlib.is_predefined_op(rel.f_op)))
    when {
        val refs = write_references(node.f_stmts, id);
        # Look for a single write reference to id
        refs.length == 1 and
        # which is of the form: id := id +/- 1
        refs[1].parent is
        assign@AssignStmt(f_expr is
            expr@BinOp(f_op is op@(OpPlus or OpMinus)
                           when stdlib.is_predefined_op(op),
                       f_right is i@IntLiteral
                       when i.p_denoted_value() == 1,
                       f_left is Identifier(p_name_matches(id) is true)))
        # located at the very end of the loop
        when assign.next_sibling == null
         # and where id is declared in the same enclosing scope as the loop
         and id.p_referenced_decl() is decl@ObjectDecl
             when node.p_semantic_parent() == decl.p_semantic_parent()
              # and no other write of Id is found in its declarative part
              # (e.g. from nested subprograms)
              and no_write_reference(decl.parent, id)
              # also check that there are no further references to id after the
              # loop.
              and not node is *(any next_siblings is n@*
                                when has_references(n, id))
    }
