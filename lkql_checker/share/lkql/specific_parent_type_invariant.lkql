fun check_aspect(n, aspect) = n != null and n.p_has_aspect(aspect)

fun base_type(t) = match t
  | SubtypeDecl(p_base_subtype(): s) => base_type(s)
  | * => t

@check(message="parent type has specific Type_Invariant aspect",
       category="Style", subcategory="Object Orientation")
fun specific_parent_type_invariant(node) =
    |" Flag any record extension definition or private extension definition if
    |" a parent type has a Type_Invariant aspect defined for it. A record
    |" extension definition is not flagged if it is a part of a completion of a
    |" private extension declaration.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 18, 23
    |"
    |"    package Pack1 is
    |"       type PT1 is tagged private;
    |"       type PT2 is tagged private
    |"         with Type_Invariant => Invariant_2 (PT2);
    |"
    |"       function Invariant_2   (X : PT2) return Boolean;
    |"
    |"    private
    |"       type PT1 is tagged record
    |"          I : Integer;
    |"       end record;
    |"
    |"       type PT2 is tagged record
    |"          I : Integer;
    |"       end record;
    |"
    |"       type PT1_N is new PT1 with null record;
    |"       type PT2_N is new PT2 with null record;    --  FLAG
    |"    end Pack1;
    |"
    |"    package Pack2 is
    |"       type N_PT1 is new Pack1.PT1 with private;
    |"       type N_PT2 is new Pack1.PT2 with private;  --  FLAG
    |"    private
    |"       type N_PT1 is new Pack1.PT1 with null record;
    |"       type N_PT2 is new Pack1.PT2 with null record;
    |"    end Pack2;
    # Flag any tagged type extension
    node is DerivedTypeDef(parent: p@BaseTypeDecl(p_is_tagged_type(): true))
    # exclude private completions
    when not p.p_previous_part() is TypeDecl(
        f_type_def: DerivedTypeDef(f_has_with_private: WithPrivatePresent))
     # exclude also formal derived types
     and p.parent is not GenericFormalTypeDecl
     # check for a parent type with a Type_Invariant aspect (current or public
     # view)
     and ({
         val base = base_type(p.p_base_type());
         [t for t in [base] & base.p_base_types()
          if t.p_has_aspect("Type_Invariant") or
             check_aspect(t.p_previous_part(), "Type_Invariant") or
             check_aspect(t.p_full_view(), "Type_Invariant")] })
