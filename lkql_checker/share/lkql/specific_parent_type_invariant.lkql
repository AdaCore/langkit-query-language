# Flag any record extension definition or private extension definition if a
# parent type has a Type_Invariant aspect defined for it. A record extension
# definition is not flagged if it is a part of a completion of a private
# extension declaration.

fun check_aspect(n, aspect) = n != null and n.p_has_aspect(aspect)

fun base_type(t) = match t
  | SubtypeDecl(p_base_subtype() is s@*) => base_type(s)
  | * => t

@check(message="parent type has specific Type_Invariant aspect",
       category="Style", subcategory="Object Orientation")
fun specific_parent_type_invariant(node) =
    # Flag any tagged type extension
    node is DerivedTypeDef(parent is p@BaseTypeDecl(p_is_tagged_type() is true))
    # exclude private completions
    when not p.p_previous_part() is TypeDecl(
        f_type_def is DerivedTypeDef(f_has_with_private is WithPrivatePresent))
     # exclude also formal derived types
     and p.parent is not GenericFormalTypeDecl
     # check for a parent type with a Type_Invariant aspect (current or public
     # view)
     and ({
         val base = base_type(p.p_base_type());
         [t for t in [base] & base.p_base_types()
          if t.p_has_aspect("Type_Invariant") or
             check_aspect(t.p_previous_part(), "Type_Invariant") or
             check_aspect(t.p_full_view(), "Type_Invariant")] })
