# Flag subprogram or entry body (or body stub) if its parameter (or parameter
# and result) profile does not follow the lexical structure of the profile in
# the corresponding subprogram or entry declaration.

import stdlib

# Return true if the two lists l1 and l2 have identical names
fun list_equal(l1, l2, i: int) =
    if i == 0 then true
    else l1[i].p_name_matches(l2[i]) and list_equal(l1, l2, i - 1)

# Return true if the types t1 and t2 are not lexically the same
fun type_mismatch(t1, t2) = {
    val l1 = from t1 select Identifier;
    val l2 = from t2 select Identifier;
    l1.length != l2.length or not list_equal(l1, l2, l1.length)
}

# Return true if a mismatch is found between the two parameter lists n1 and n2
fun param_mismatch(n1, n2, i: int) =
    if i == 0 then false
    else if (n1[i]?.f_mode is ModeDefault) != (n2[i]?.f_mode is ModeDefault) or
            n1[i]?.f_ids.children_count != n2[i]?.f_ids.children_count or
            type_mismatch(n1[i]?.f_type_expr, n2[i]?.f_type_expr)
         then true
         else param_mismatch(n1, n2, i - 1)

# Return true if the two subprogram decls are not lexically equivalent
fun subp_mismatch(node, decl) = {
     val params1 = node?.f_subp_spec?.f_subp_params?.f_params;
     val params2 = decl?.f_subp_spec?.f_subp_params?.f_params;
     val count1  = params1.children_count;
     val count2  = params2.children_count;
     count1 != count2 or
     type_mismatch(node?.f_subp_spec?.f_subp_returns,
                   decl?.f_subp_spec?.f_subp_returns) or
     param_mismatch(params1, params2, count1)
}

# Return true if the entry body and its decl are not lexically equivalent
fun entry_mismatch(e) = {
     val params1 = e?.f_params?.f_params?.f_params;
     val params2 = e?.p_decl_part()?.f_spec?.f_entry_params?.f_params;
     val count1  = params1.children_count;
     val count2  = params2.children_count;
     count1 != count2 or param_mismatch(params1, params2, count1)
}

@unit_check(help="parameter profile discrepancies",
            category="Style", subcategory="Readability")
fun profile_discrepancies(unit) = [
    {message: "structure of parameter profile differs from " &
              stdlib.sloc_image(n.p_decl_part()),
     loc: n.p_defining_name()}
    for n in from unit.root select node@((BaseSubpBody or SubpBodyStub)
        when match node.p_decl_part()
        | g@GenericSubpDecl => subp_mismatch(node, g?.f_subp_decl)
        | s@BasicSubpDecl   => subp_mismatch(node, s)
        | *                 => false
    or EntryBody when entry_mismatch(node))]
