# Flag any expression not directly part of another expression which contains
# more than N expressions of the following kind (each count for 1):
# - Identifiers
# - Literals
# - Conditional expressions
# - Quantified expressions
# - Aggregates
# - @ symbols

fun num_expr(node) =
    |" Return the number of relevant expressions as defined above of a given
    |" node.
    (from node select ((e@SingleTokNode when e is not Op) | CondExpr |
                       QuantifiedExpr | BaseAggregate | TargetName)).length

@unit_check(help="maximum complexity of an expression",
            category="Style", subcategory="Program Structure")
fun maximum_expression_complexity(unit, n: int = 10) = [
    {message: "expression has too many sub-expressions (" &
              img(num_expr(node)) & ")", loc: node}
    for node in from unit.root select
    # Note: using "all parent is not Expr" would be more accurate but would
    # slow down this rule significantly and checking one level is good enough
    # in practice.
    # Exclude standalone identifiers which are not expressions per se.
    expr@Expr(parent is not Expr)
    when expr is not (Identifier | DefiningName | EndName)
     and num_expr(expr) > n]
