fun check_size(n, min_size, min_stmt) =
    (from n select Stmt).length >= min_stmt or
    (from n select SingleTokNode).length >= min_size

fun check_list(l, min_size, min_stmt) =
    [e for e in l if check_size(e, min_size, min_stmt) and
        [f for f in l if e != f and e.same_tokens(f)]]?[1] != ()

fun gather_stmts(node) =
    match node
    | IfStmt   =>
        [node.f_then_stmts] &
        [n.f_stmts for n in node.f_alternatives.children].to_list &
        (if node.f_else_part then [node.f_else_part.f_stmts] else [])
    | IfExpr   =>
        [node.f_then_expr] &
        [n.f_then_expr for n in node.f_alternatives.children].to_list &
        # There might not be an else expression, which translates to the field
        # being null. In that case, make sure not to include it.
        (if node.f_else_expr then [node.f_else_expr] else [])
    | CaseStmt => [n.f_stmts for n in node.f_alternatives.children].to_list
    | CaseExpr => [n.f_expr for n in node.f_cases.children].to_list

fun message(node, min_size, min_stmt) = {
    val l = gather_stmts(node);
    val e = [e for e in l if check_size(e, min_size, min_stmt) and
                [f for f in l if e != f and e.same_tokens(f)]][1];
    val f = [f for f in l if e != f and e.same_tokens(f)][1];
    {message: "code duplicated at line " & img(f.token_start().start_line),
     loc: e}
}

@unit_check(help="duplicate branch",
            category="Style", subcategory="Programming Practice")
fun duplicate_branches(unit, min_size: int = 14, min_stmt: int = 4) =
    |" Flag a sequence of statements that is a component of an ``if`` statement
    |" or of a ``case`` statement alternative, if the same ``if`` or ``case``
    |" statement contains another sequence of statements as its component
    |" (or a component of its ``case`` statement alternative) that is
    |" syntactically equivalent to the sequence of statements in question.
    |" The check for syntactical equivalence of operands ignores line breaks,
    |" white spaces and comments.
    |"
    |" Small sequences of statements are not flagged by this rule. The rule has
    |" two optional parameters that allow to specify the maximal size of statement
    |" sequences that are not flagged:
    |"
    |" * *min_stmt: int*
    |"    An integer literal. All statement sequences that contain more than *min_stmt*
    |"    statements (`Stmt` as defined in Libadalang) as subcomponents are flagged;
    |"
    |" * *min_size: int*
    |"    An integer literal. All statement sequences that contain more than *min_size*
    |"    lexical elements (`SingleTokNode` in Libadalang terms) are flagged.
    |"
    |" You have to use the ``param_name=value`` formatting to pass arguments through
    |" the ``+R`` options. Example: ``+RDuplicate_Branches:min_stmt=20,min_size=42``.
    |"
    |" If at least one of the two thresholds specified by the rule parameters is
    |" exceeded, a statement sequence is flagged. The following defaults are used:
    |" ``min_stmt=4,min_size=14``.
    |"
    |" .. rubric:: Example
    |"
    |" .. code-block:: ada
    |"    :emphasize-lines: 2, 11
    |"
    |"    if X > 0 then
    |"       declare       --  FLAG: code duplicated at line 11
    |"          A : Integer := X;
    |"          B : Integer := A + 1;
    |"          C : Integer := B + 1;
    |"          D : Integer := C + 1;
    |"       begin
    |"          return D;
    |"       end;
    |"    else
    |"       declare
    |"          A : Integer := X;
    |"          B : Integer := A + 1;
    |"          C : Integer := B + 1;
    |"          D : Integer := C + 1;
    |"       begin
    |"          return D;
    |"       end;
    |"    end if;
    [
        message(n, min_size, min_stmt)
        for n in from unit.root
        select node@(IfStmt | IfExpr | CaseStmt | CaseExpr)
        when check_list(gather_stmts(node), min_size, min_stmt)
    ]
