# Flag each raise statement that raises a predefined exception (i.e., one
# of the exceptions Constraint_Error, Numeric_Error, Program_Error,
# Storage_Error, or Tasking_Error).

fun is_predefined_raise(id) =
    id.p_referenced_decl() is decl@BasicDecl
    when match decl.p_defining_name().p_canonical_fully_qualified_name()
    | "^standard\.(program|constraint|numeric|storage|tasking)_error$" => true
    | * => false

fun canonical_exception_name(name) = {
   val ren = name?.p_referenced_decl()?.f_renames;

   if not ren
   then name
   else canonical_exception_name(ren?.f_renamed_object)
}

@check(message="explicit raise of a predefined exception", category="Feature")
fun raising_predefined_exceptions(node) =
    node is RaiseStmt(f_exception_name is exc@Name)
    when is_predefined_raise(canonical_exception_name(exc))
