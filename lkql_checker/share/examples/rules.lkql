val rules = @{
    Abstract_Type_Declarations,
    Anonymous_Arrays,
    Anonymous_Subtypes,
    Blocks,

    Boolean_Relational_Operators,
    # Flag each call to a predefined relational operator
    # (<, >, <=, >=, = and /=) for the predefined Boolean type.

    Complex_Inlined_Subprograms: {N: 3},
    # Flag a subprogram (or generic subprogram, or instantiation of a
    # subprogram) if pragma Inline is applied to it and at least one of the
    # following conditions is met:
    # * it contains at least one complex declaration such as a subprogram
    #    body, package, task, protected declaration, or a generic instantiation
    #    (except instantiation of Ada.Unchecked_Conversion);
    # *  it contains at least one complex statement such as a loop, a case or
    #    an if statement;
    # *  the number of statements exceeds 3

    Controlled_Type_Declarations,

    Deep_Inheritance_Hierarchies: {N: 5},
    # Flag a tagged derived type declaration or an interface type declaration
    # if its depth (in its inheritance hierarchy) exceeds 5

    Deeply_Nested_Generics: {N: 3},
    # Flag a generic declaration nested in another generic declaration if the
    # nesting level of the inner generic exceeds 3

    Identifier_Casing: {Others: "mixed"},
    # Flag any defining identifier if it casing does not follow the rules: the
    # first letter and every letter after underscore are uppercase, all the
    # other lettres are lowercase

    Identifier_Suffixes: {
        Type_Suffix:         "_Type",
        Access_Suffix:       "_Access_Type",
        Class_Access_Suffix: "_Class_Type"
    },
    # Flag any defining identifier if it corresponds to the given kind of
    # entities but does not have a specified suffix

    Identifier_Prefixes: {
        Type:     "T_",
        Access:   "A_",
        Constant: "C_"
    },
    # Flag any defining identifier if it corresponds to the given kind of
    # entities but does not have a specified prefix

    Non_Qualified_Aggregates,
    Non_Short_Circuit_Operators,

    OTHERS_In_Aggregates,
    OTHERS_In_CASE_Statements,
    OTHERS_In_Exception_Handlers,

    Warnings: "km",
    # Include warnings generated by the compiler with '-gnatwk' (variables that
    # could be constants) and '-gnatwm' (modified but unreferenced variables)
    # into generated gnatcheck report

    Style_Checks: "uO",
    # Include warnings generated by the compiler style checks '-gnatyu'
    # (unnecessary blank lines) and '-gnatyO' (overriding subprograms are
    # not explicitly marked as such.) into generated gnatcheck report

    Restrictions: {Arg: ["No_Allocators", "No_Tasking", "No_Dependence => Ada.Containers"]}
    # Include warnings generated by the compiler with the specified restrictions
    # into generated gnatcheck report
}
